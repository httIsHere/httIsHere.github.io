<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>长风破浪会有时，直挂云帆济沧海 ｜ 2021总结</title>
    <url>/2022/01/19/2021-final/</url>
    <content><![CDATA[<p>每次要写总结的时候总是不知道为什么一点也想不起今年发生了什么事。</p>
<h3 id="工作-amp-专业"><a href="#工作-amp-专业" class="headerlink" title="工作 &amp; 专业"></a>工作 &amp; 专业</h3><h4 id="第一次面试他人"><a href="#第一次面试他人" class="headerlink" title="第一次面试他人"></a>第一次面试他人</h4><p>一个字——慌，和同事一起面试实习生，哈哈哈哈，面试完就是感觉现在的学生怎么都这么厉害，想到自己刚毕业的时候真的就是啥也不会。</p>
<h4 id="开始重学前端"><a href="#开始重学前端" class="headerlink" title="开始重学前端"></a>开始重学前端</h4><p>工作久了，有那么段时间感觉自己永远都在做着重复性的东西，或者什么新技术出来都要试一下，笔记里的东西越来越多，但是能记住的发现就没有几个。</p>
<p>一些最简单的最底层的自从工作之后就再也没接触过了，还是要给自己重新打好基础。</p>
<h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><p>又写完了一个本子，年末要买新本子的时候总是很开心。</p>
<p>每天一部分的小开心大概就来自做手帐吧，然后开始用<code>Notion</code>做记录，没想到分享到小红书和B站之后还收获了一些粉丝，后面还要持续输出。</p>
<h3 id="2022年的展望"><a href="#2022年的展望" class="headerlink" title="2022年的展望"></a>2022年的展望</h3><ul>
<li>除了技术文章可以多看看技术方面的书📖，可能会有不一样的收获。</li>
<li>多写一些自己的技术博客，总结&amp;实践。</li>
<li>希望能走出舒适圈，技术更进一步。</li>
<li>重拾Node，并坚持下去。</li>
<li>保持学习。</li>
</ul>
<blockquote>
<p>今年事件回顾</p>
</blockquote>
<ul>
<li>一月<ul>
<li>和几个同事一起去爬了小和山，大概是知道这是近期最后一次相聚吧，愿前程似锦。</li>
<li>看完了《灵笼》。</li>
<li>疫情总是反反复复。</li>
</ul>
</li>
<li>二月<ul>
<li>SECHSKIES终于出了新歌。</li>
<li>和飞飞一起去看了电影🎬，飞飞年后回来就要离职了，难过。</li>
<li>新年要寄回家的礼物一直没有派送，圆通❌。</li>
<li>过年回家妹妹做了好多甜品，开心，虽然又是一个一大家子不能完全相聚的年，但还是有希望。</li>
<li>因为家里的催婚很不开心，大概就是彼此理解却无法接受吧。</li>
<li>大晚上开车去公园，还要让我开车吓死人咯。</li>
<li>走亲戚的时候每个人都觉得我在杭州上班坐办公室赚得很多却没有一个人对我说一个人在外工作辛苦了。</li>
<li>回杭那天还是给自己许了个愿，健健康康吧。</li>
</ul>
</li>
<li>三月<ul>
<li>哈哈哈，知道了利老师。</li>
<li>终于鼓起勇气去治疗牙齿了，就知道要做根管治疗，还要去3，4次，最后花了4000多做了牙冠，害，一定要早治疗！</li>
<li>在追创造营。</li>
</ul>
</li>
<li>四月<ul>
<li>《非正式会谈》终于开始录新一季了。</li>
<li>虽然感冒很难受，但是为了钱！</li>
<li>又是和妹妹去西湖的一天，天气很好但我很胖。</li>
<li>最近的健身训练都在突破自己，每次看到自己做的重量有进步都超级开心。</li>
<li>第一次尝试了青芒，很好吃，就是牙要掉了。</li>
<li>创造营成团夜啦，喜欢的都出道了，哈哈哈。</li>
</ul>
</li>
<li>五月<ul>
<li>我的《新西游记》特别节目终于来了，又可以快乐了。</li>
<li>《灵笼》的新一季也要来了！</li>
<li>开心！！！毕业后全寝室第一次人员到齐！！！一起去台州爬了山⛰️，期待下一次的相聚。</li>
<li>新垣结衣和星野源居然结婚了。</li>
<li>在追《御赐小仵作》，居然还花了钱买剧。</li>
<li>健身满一年，还需继续努力。</li>
</ul>
</li>
<li>六月<ul>
<li>不知道吃了什么居然肠胃炎了，上吐下泻，生病的晚上总是容易emo。</li>
<li>还是反反复复，好多人都说我莫不是一个悲观主义者，其实就是。</li>
</ul>
</li>
<li>七月<ul>
<li>教育行业整顿，公司裁员。</li>
<li>河南郑州发生了水灾，虽然很穷但是还是捐了钱，希望大家都能好好的。</li>
<li>东京奥运会，气死人的奥运会。</li>
<li>生日，我居然就25岁了，总感觉上大学还是昨天的事。</li>
</ul>
</li>
<li>八月<ul>
<li>还是计划着要努力存钱。</li>
<li>臀推90kg达成。</li>
</ul>
</li>
<li>九月<ul>
<li>原来的健身房要装修，于是换到了另一家分店。</li>
<li>又一次和妹妹去西湖，每次说要出去玩就是去西湖。</li>
</ul>
</li>
<li>十月<ul>
<li>国庆十一回家了，第一次去看了装修的新房子，我的房间真的好小啊。</li>
<li>买了一年的专辑到了，我震惊了。</li>
</ul>
</li>
<li>十一月<ul>
<li>花了很多钱买了过年礼物，突然感觉时间过得好快呀。</li>
<li>摔碎了一块腮红。</li>
<li>最近手腕一直不得劲。</li>
<li>公司体检。</li>
</ul>
</li>
<li>十二月<ul>
<li>不想回忆的令人伤心的12月。</li>
<li>在小红书和B站乱搞，居然一下子有了几千个粉丝。</li>
</ul>
</li>
</ul>
<p>疫情还是反反复复，人类在疾病面前真的很渺小。<br>愿一直做一个善良的人。<br>愿年年身体健康，万事如意。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>LeeCode题解记录（JavaScript版）</title>
    <url>/2021/10/13/LeeCode-by-JS/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/httIsHere/leecode-result">github地址</a></p>
</blockquote>
<h2 id="2023-02"><a href="#2023-02" class="headerlink" title="~~ 2023.02 ~~"></a><del>~</del><del>~</del> 2023.02 <del>~</del><del>~</del></h2><ul>
<li><a href="/2023/03/01/LeeCode-by-JS/55-jump-game/">[55] Jump Game</a></li>
<li><a href="/2023/02/28/LeeCode-by-JS/989-add-to-array-form-of-integer/">[989] Add to Array-Form of Integer</a></li>
<li><a href="/2023/02/27/LeeCode-by-JS/693-Binary-Number-with-Alternating-Bits/">[693] Binary Number with Alternating Bits</a></li>
</ul>
<h2 id="2021-12"><a href="#2021-12" class="headerlink" title="~~ 2021.12 ~~"></a><del>~</del><del>~</del> 2021.12 <del>~</del><del>~</del></h2><ul>
<li><a href="/2021/12/16/LeeCode-by-JS/1961-check-if-string-is-a-prefix-of-array/">[1961] Check If String Is a Prefix of Array 检查字符串是否为数组前缀</a></li>
<li><a href="/2021/12/16/LeeCode-by-JS/1967-number-of-strings-that-appear-as-substrings-in-word/">[1967] Number of Strings That Appear as Substrings in Word 作为子字符串出现在单词中的字符串数目</a></li>
<li><a href="/2021/12/10/LeeCode-by-JS/1971-find-if-path-exists-in-graph/">[1971] Find if Path Exists in Graph 寻找图中是否存在路径</a></li>
<li><a href="/2021/12/10/LeeCode-by-JS/1979-find-greatest-common-divisor-of-array/">[1979] Find Greatest Common Divisor of Array 找出数组的最大公约数</a></li>
<li><a href="/2021/12/10/LeeCode-by-JS/1974-minimum-time-to-type-word-using-special-typewriter/">[1974] Minimum Time to Type Word Using Special Typewriter 使用特殊打字机键入单词的最少时间</a></li>
<li><a href="/2021/12/07/LeeCode-by-JS/1984-minimum-difference-between-highest-and-lowest-of-k-scores/">[1984] Minimum Difference Between Highest and Lowest of K Scores 学生分数的最小差值</a></li>
<li><a href="/2021/12/07/LeeCode-by-JS/1991-find-the-middle-index-in-array/">[1991] Find the Middle Index in Array 寻找数组的中间位置</a></li>
<li><a href="/2021/12/07/LeeCode-by-JS/1995-count-special-quadruplets/">[1995] Count Special Quadruplets 统计特殊四元组</a></li>
<li><a href="/2021/12/06/LeeCode-by-JS/2000-reverse-prefix-of-word/">[2000] Reverse Prefix of Word 反转单词前缀</a></li>
<li><a href="/2021/12/06/LeeCode-by-JS/2006-count-number-of-pairs-with-absolute-difference-k/">[2006] Count Number of Pairs With Absolute Difference K 差的绝对值为 K 的数对数目</a></li>
<li><a href="/2021/12/06/LeeCode-by-JS/2011-final-value-of-variable-after-performing-operations/">[2011] Final Value of Variable After Performing Operations 执行操作后的最终变量值</a></li>
</ul>
<h2 id="2021-11"><a href="#2021-11" class="headerlink" title="~~ 2021.11 ~~"></a><del>~</del><del>~</del> 2021.11 <del>~</del><del>~</del></h2><ul>
<li><a href="/2021/11/23/LeeCode-by-JS/392-is-subsequence/">[392] Is Subsequence 是否子序列</a></li>
<li><a href="/2021/11/23/LeeCode-by-JS/389-find-the-difference/">[389] Find the Difference 寻找不同</a></li>
<li><a href="/2021/11/22/LeeCode-by-JS/387-first-unique-character-in-a-string/">[387] First Unique Character in a String 字符串中的第一个唯一字符</a></li>
<li><a href="/2021/11/22/LeeCode-by-JS/383-ransom-note/">[383] Ransom Note 赎金信</a></li>
<li><a href="/2021/11/19/LeeCode-by-JS/367-valid-perfect-square/">[367] Valid Perfect Square 有效完美平方数</a></li>
<li><a href="/2021/11/18/LeeCode-by-JS/349-intersection-of-two-arrays/">[349] Intersection of Two Arrays &amp; [350] Intersection of Two Arrays II 两个数组的交集</a></li>
<li><a href="/2021/11/18/LeeCode-by-JS/345-reverse-vowels-of-a-string">[345] Reverse Vowels of a String 反转字符串内的元音字母</a></li>
<li><a href="/2021/11/01/LeeCode-by-JS/338-Counting-Bits/">[338] Counting Bits 位计算</a></li>
<li><a href="/2021/11/02/LeeCode-by-JS/507-Perfect-Number/">[507] Perfect Number 完全数</a></li>
<li><a href="/2021/11/17/LeeCode-by-JS/344-reverse-string/">[344] Reverse String 反转字符串</a></li>
</ul>
<h2 id="2021-10"><a href="#2021-10" class="headerlink" title="~~ 2021.10 ~~"></a><del>~</del><del>~</del> 2021.10 <del>~</del><del>~</del></h2><ul>
<li><a href="234-palindrome-linked-list/">[234] palindrome linked list 回文链表</a></li>
<li><a href="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/">[235] Lowest Common Ancestor of a Binary Search Tree 二叉搜索树的最近公共祖先</a></li>
<li><a href="237-Delete-Node-in-a-Linked-List/">[237] Delete Node in a Linked List 删除链表中的节点</a></li>
<li><a href="242.valid-anagram/">[242] Valid Anagram 有效的字母异位词</a></li>
<li><a href="257.Binary-Tree-Paths/">[257] Binary Tree Paths 二叉树所有路径</a></li>
<li><a href="/2021/10/15/LeeCode-by-JS/258-Add-Digits/">[258] Add Digits 各位相加</a></li>
<li><a href="/2021/10/15/LeeCode-by-JS/263-Ugly-Number/">[263] Ugly Number 丑数</a></li>
<li><a href="/2021/10/18/LeeCode-by-JS/268-missing-number/">[268] Missing Number 消失的数</a></li>
<li><a href="/2021/10/18/LeeCode-by-JS/278-first-bad-version/">[278] First Bad Version 第一个错误版本</a></li>
<li><a href="/2021/10/21/LeeCode-by-JS/283-move-zeroes/">[283] Move Zeroes 移动零</a></li>
<li><a href="/2021/10/21/LeeCode-by-JS/290-word-pattern/">[290] Word Pattern 单词规律</a></li>
<li><a href="/2021/10/21/LeeCode-by-JS/292-nim-game/">[292] Nim Game Nim游戏</a></li>
<li><a href="/2021/10/21/LeeCode-by-JS/326-power-of-three/">[326] Power of Three 3的指数次幂 (同[342] Power of Four)</a></li>
</ul>
<h2 id="2021-09"><a href="#2021-09" class="headerlink" title="~~ 2021.09 ~~"></a><del>~</del><del>~</del> 2021.09 <del>~</del><del>~</del></h2><ul>
<li><a href="206-reverse-linked-list/">[206] Reverse Linked List 翻转链表</a></li>
</ul>
]]></content>
      <categories>
        <category>LeeCode</category>
      </categories>
      <tags>
        <tag>LeeCode</tag>
      </tags>
  </entry>
  <entry>
    <title>听《能力陷阱》-【美】埃米尼亚·伊贝拉 （一）</title>
    <url>/2020/01/06/Act_like_a_leader_00/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/png/250093/1578310667973-af3dc6c7-374d-4c77-aad3-140d4c9930cd.png" alt=""><br><br>英文名：&lt; Act like a leader and think like a leader &gt;</p>
<p>核心：先行动后思考，不要被思想局限。</p>
<p>1、定义自己的工作<br></p>
<p>不要用自己的技能和特长来定义自己的工作，如果是用技能和特长来定义自己的工作那么就会讨厌生活的变动，工作的变动。<br><br>我觉得我是因为讨厌变动才造成懒惰，不会思考，不会畅想。我会一直点一家外卖直到吃厌才会去找另外的外卖，我不喜欢每次到要点外卖前的选择，不喜欢尝试新的外卖，因为我怕点到我不喜欢的菜，对，因为我怕。<br><br>很多时候害怕变动或者不喜欢变动都是对自己能力的不自信，因为我觉得不够，所以我只会做我自己分内的工作，我不敢接触其他工作内容。<br></p>
<p>1）由外而内的思考原则<br><br>很多时候我们都在说要吾日三省吾身，每天要多多反省自己，所以对于一时的冲动，就有了犹豫的时间，因为我们的价值观，我们优先考虑的东西都会阻碍我们的行动，“由内而外”产生的想法就会对我们的改变造成阻碍。但是一个人的思维方式是很难改变的，不可能我和你说你不能老是由内而外的思考，你应该多多经历多多像领导一样思考，不要总是局限于自己的能力范围，但是可能一下子改变吗，当然不可能。所以只能慢慢做慢慢去锻炼自己的思维方式，第一就是不要对参与新项目或者新活动产生排斥感，不要排斥和新的人新的事物打交道，不一定要从工作开始，可以先从生活新鲜事开始，因为这些充满挑战的新经历以及它们带来的成就会改变限制我们的固有行为和思维，比如每个周末宅在家里就是一种固有行为，所以首先多出去走走就是一种调整，你会面对去哪儿？去干嘛？行程安排这些挑战，这些就是你首要面对的。<br><br>自省大多时候会让我们只停留在过去，但是过去的就是过去了，有时候想太多，后悔太多是没有用的，我们只有多行动才能学会敏感自如的应对生活的改变。</p>
<blockquote>
<p>我何以知道自己在想什么？——只有在看到我做了什么以后才能知道。<br>                        —— 社会心理学家卡尔·韦克（Karl Weick）</p>
</blockquote>
<p>由内而外：内在自我认知-过去的经历-思考<br>由外而内：外在能力表现-新的经历-行动</p>
<p>2）避免能力陷阱<br></p>
<blockquote>
<p>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终使得我们一直只会做擅长的那些事。</p>
</blockquote>
<p>我们任务我们的价值来源于我们擅长的事，所以会投入大量的精力和时间去做我们会做的事，有可能仅仅只是我们会而已。久而久之就会忽略其他的事情，总觉得自己没有时间，没有精力。上大学的时候，就总觉得课被排得满满的，难以有整块的时间让我去做自己想要做的事，可以要做的事难道真的需要那么多整块的时间吗。<br><br>前几天刚刚正好经历了跨年，所以年度总结是必不可少的，leader给了一组数据问我们满意吗，其实我们心里的第一想法就是我们满不满意有什么关系，老板满意就行，反正我们做到了自己应该做的，按时完成了项目需求，按时上线，及时处理bug，并没有延期，我们为什么要去觉得满不满意，这就是“能力陷阱”。当我们非常优秀完美的完成了上级指派的任务时，表现良好且无可取代，所以我们也会越来越离不开这个岗位，第一、leader觉得我们太厉害了所以离不开，第二自己觉得自己太厉害了所以离不开。<br><br>于是我们就被自己的优势禁锢了。</p>
<p>3）领导者的特征<br><br>首先沟通能力是一件很重要的事情，无论是否为一个领导者，如果连基本的表达能力都不足的话万事皆不能成。<br><br>我们总在说如何正确表达自己是一件能难的事情，需要有良好的思维逻辑和优秀的表达能力。<br><br>我们在周五会有一个例行分享会，可以分享一切自己觉得有趣值得讨论的事情，我之前一直没有明确这个分享会存在的意义是什么，拓展大家的见识？了解不一样的想法？其实更多的是在于学会表达自己，每次说到指定下周分享者的时候，大家都默默低下了头心里默念不要是我不要是我，因为我们不会或者不愿表达，也因为表达是一件很难的事情，比如我在写下这几段话的时候其实我并不知道该用怎样的语言逻辑去表达我想要表达的意思，比如上周的分享，我明明准备了两周，准备了PPT但是我在分享时依旧脑袋一片空白，只能想到什么说什么。我们老大说，几十个人面前讲话的机会是很难得的，有这个表达分享的机会是需要好好把握的，习惯了在几十个人面前说话之后怎么会害怕面试时的那么几个面试官呢。<br></p>
<p>a. 像桥梁一样连接不同的人或组织<br><br>对于领导这个角色来说对内做的完美无瑕是一件重要的事情，他能更好的提高团队效率和凝聚力，但是能够将内外对接起来才是最不容易的事情，需要长于从外部获取想法，给团队带来新的观点，能从大局上看待问题，展望发展方向。<br><br>b. 有远见<br><br>我们在生活工作中总会遇到的一个问题就是未来规划，但是往往我们对于自己的未来规划都是局限于自己的能力，我是一个程序员我以后就要做全栈，就要研究算法等等，其实都是被我们自己的技能局限了。<br><br>我们不要做一个只会工作其他什么也不会的技能者，更多的区分发现生活中的机遇和危险。<br><br>c. 提升影响力<br><br>如何展示我们的想法以及这个过程中的交互都决定了其他人是否愿意采纳自己的想法意见，能被采纳就说明我们是带有一定影响力的，所以不要吝啬于表达，多表达是一件很重要的事情（当然除了抬杠），我上一年的年度报告写得就是我不要沉默我要多多能和别人表达自己的想法意见，而我今年的年度报告就是减少无意义的想法讨论，过犹不及，所以要锻炼自己的表达能力，能更加正确的表述自己的想法。<br><br>d. 提升领导气质<br><br>需要有丰富的人生阅历，良好的交流行为，做到知行合一。<br><br>e. 改变日程安排<br><br>需要将更多的时间精力放在更加有价值的事情上反而能提高自己的做事效率。<br><br>越是忙碌的时候越需要空出一些时间来应对一些意想不到的事情，当然同时不要过多的减少旧工作，当新角色开始发灰效果才会有更多的动力放手以前阻碍我们进步的日常工作。<br><br>同时克服拖延也是一件非常困难的事情，其实拖延的主要原因就是懒，没有动力，没有更多的想法和兴趣，所以分散对日常工作的注意力不妨是一个好的解决方法。<br></p>
]]></content>
      <categories>
        <category>读书&amp;听书</category>
      </categories>
      <tags>
        <tag>樊登读书</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue &amp; React 目录</title>
    <url>/2021/11/19/Stack/</url>
    <content><![CDATA[<ul>
<li><a href="/categories/React/">Categories · React</a></li>
<li><a href="/categories/Vue/">Categories · Vue</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>constructor &amp; prototype</title>
    <url>/2019/01/22/constructor%20&amp;%20prototype/</url>
    <content><![CDATA[<blockquote>
<p>定义：constructor 是一个对象的属性，这个属性存在在此对象的 prototype 中, 指向此对象的构造函数。</p>
</blockquote>
<ul>
<li>constructor 是一个对象属性；</li>
<li>constructor 在 prototype 中；</li>
<li>constructor 指向构造函数；</li>
</ul>
<blockquote>
<p>prototype 是一个函数属性, 此属性同时也是一个对象, 保存着对象实例所共有的属性和方法。</p>
</blockquote>
<ul>
<li>prototype 是函数属性, 只要是函数, 就有 prototype 属性. 而不管是构造函数还是普通函数.</li>
<li>prototype 同时也是对象.</li>
<li>prototype 放的是公共的东西, 包括属性和方法.</li>
</ul>
<p>在 JavaScript 内将使用 function 定义的称为函数：</p>
<pre class="line-numbers language-none"><code class="language-none">function Person(name) &#123;
    this.name &#x3D; name;
    this.showMyName &#x3D; function() &#123;
        alert(this.name);
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而对于 Person 还可以使用 new 操作符进行实例化，<code>var Lilei = new Person(&#39;Lilei&#39;);</code>，于是此时 Person 就类似于类，但是其没有关键字 class，所以就称之为类的构造函数。<br>按照 javascript 的说法，function 定义的这个 Person 就是一个 Object（对象），而使用 function 生成的对象和使用 new 操作符生成的对象是不同的，function 定义的对象有 prototype（原型）属性，而 new 生成的对象没有该属性。<br>prototype 属性是指向一个 prototype 对象的。<br>prototype 对象中又有一个 constructor 属性，这个 constructor 属性同样指向一个 constructor 对象，而这个 constructor 对象恰恰就是这个 function 函数本身。</p>
<pre class="line-numbers language-none"><code class="language-none">function Person(name) &#123;
    this.name &#x3D; name;
    this.showMyName &#x3D; function() &#123;
        alert(this.name);
    &#125;
&#125;
var Lilei &#x3D; new Person(&#39;Lilei&#39;);
console.log(Lilei.prototype); &#x2F;&#x2F; undefined
console.log(typeof Person.prototype); &#x2F;&#x2F; Object
console.log(Person.prototype.constructor);&#x2F;&#x2F; function Person(name) &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; type 1 （所有对象实例共享）
Person.prototype.getName &#x3D; function()&#123;
    alert(this.name);
&#125;
var Meimei &#x3D; new Person(&#39;Meimei&#39;);
alert(obj.constructor &#x3D;&#x3D; Person);&#x2F;&#x2F; true
&#x2F;&#x2F; type 2
Person.prototype &#x3D; &#123;
    getName: function()&#123;
        alert(this.name);
    &#125;
&#125;
var Meimei &#x3D; new Person(&#39;Meimei&#39;);
alert(obj.constructor &#x3D;&#x3D; Person);&#x2F;&#x2F; false
&#x2F;&#x2F; type2情况下就是将Person的prototype进行重写，导致原来的constructor被覆盖
Person.prototype &#x3D; &#123;
    constructor: Person, &#x2F;&#x2F; 强制指回Person
    getName: function()&#123;
        alert(this.name);
    &#125;
&#125;
var Lilei &#x3D; new Person(&#39;Lilei&#39;);
var Meimei &#x3D; new Person(&#39;Meimei&#39;);
Lilei.getName(); &#x2F;&#x2F; &#39;Lilei&#39;
Meimei.getName(); &#x2F;&#x2F; &#39;Meimei&#39;
Lilei.getName() &#x3D;&#x3D; Meimei.getName(); &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>同时说说 this，定义是<code>this</code>就是函数赖以执行的对象：</p>
</blockquote>
<ul>
<li>this 是对象；</li>
<li>this 以来函数执行的上下文环境；</li>
<li>this 存在于函数内；</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">alert(this); &#x2F;&#x2F; 全局环境，此时this指向window
function Person(name) &#123;
    console.log(this);
    this.name &#x3D; name;
    this.showMyName &#x3D; function() &#123;
        alert(this.name);
    &#125;
&#125;
Person(&#39;Lilei&#39;); &#x2F;&#x2F; 全局环境执行Person函数，this指向window
var Lilei &#x3D; new Person(&#39;Lilei&#39;); &#x2F;&#x2F; 将Person作为构造函数实例化对象
                                 &#x2F;&#x2F; 此时this指向Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">function Person2()&#123;
    alert(this.name);
&#125;
Person2(); &#x2F;&#x2F; this指向window，所以输出了也就是window.name，此时未在窗口内定义name，所以为undefined
function Person(name) &#123;
    this.name &#x3D; name;
    alert(this.name);
&#125;
Person(&#39;Lilei&#39;); &#x2F;&#x2F; &#39;Lilei&#39;
Person2(); &#x2F;&#x2F; &#39;Lilei&#39;，两个函数都是对window.name进行操作，所以会互相影响
var person &#x3D; new Person2();
console.log(person); &#x2F;&#x2F; undefined，this.name &#x3D; Object.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 综合例子
var Tinker &#x3D; function()&#123;
    this.elements &#x3D; [];
&#125;;
&#x2F;&#x2F; 对Tinker定义一个对象，动态为对象原型增加方法
Tinker.fn &#x3D; Tinker.prototype &#x3D; &#123;
    constructor: Tinker,
    extend: function(obj)&#123;
        var p;
        for(p in obj)&#123;
            this.constructor.prototype[p] &#x3D; obj[p];
        &#125;
    &#125;
&#125;
&#x2F;&#x2F; 为原型增加了get和each方法
Tinker.fn.extend(&#123;
    get: function()&#123; &#x2F;&#x2F; 查找页面内id元素
        var length &#x3D; arguments.length, i &#x3D; 0;
        for(; i &lt; length; i++)&#123;
            this.elements.push(document.getElementById(arguments[i])); 
        &#125;
        return this;
    &#125;,
    each: function(fn)&#123; &#x2F;&#x2F; 对所查找到的元素绑定方法
        var i &#x3D; 0, length &#x3D; this.elements.length;
        for(; i &lt; length; i++)&#123;
            fn.call(this.elements[i], i, this.elements[i]);
        &#125;
        return this;
    &#125;
&#125;);
&#x2F;&#x2F;假设有id &#x3D; &#39;data&#39;, id &#x3D; &#39;message&#39;
var obj &#x3D; new Tinker();
obj.get(&#39;data&#39;, &#39;message&#39;).each(function(i, item)&#123;
    this.style.color &#x3D; &#39;red&#39;;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Android开发环境</title>
    <url>/2020/03/24/android-dev-env/</url>
    <content><![CDATA[<p>为了配合React Native端开发, 且处于Windows, 所以需要搭建Android开发环境. </p>
<p>需要安装: Node, Watchman, 命令行工具, JDK, Android Studio. </p>
<h3 id="Java-Development-Kit"><a href="#Java-Development-Kit" class="headerlink" title="Java Development Kit"></a>Java Development Kit</h3><blockquote>
<p>React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）. </p>
</blockquote>
<p><a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html">JDK下载地址</a></p>
<h3 id="Android-开发环境"><a href="#Android-开发环境" class="headerlink" title="Android 开发环境"></a>Android 开发环境</h3><blockquote>
<p>国内用户必须必须必须有稳定的翻墙工具, 否则在下载、安装、配置过程中会不断遭遇链接超时或断开, 无法进行开发工作. 若安装过程中出现报错等99%是无法正常翻墙造成. </p>
</blockquote>
<p><a href="./vultr-ss">购买服务并配置可看前一篇文章</a></p>
<ul>
<li><h4 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h4><p>  <a href="https://developer.android.com/studio/index.html">下载安装 Android Studio</a></p>
<p>  安装界面中选择”Custom”选项, 确保选中了以下几项:<br>  1) Android SDK<br>  2) Android SDK Platform<br>  3) Performance (Intel ® HAXM) (<a href="https://android-developers.googleblog.com/2018/07/android-emulator-amd-processor-hyper-v.html">AMD 处理器看这里</a>)<br>  4) Android Virtual Device</p>
<p>  问题:</p>
<p>  1) HAXM installation failed<br>  <img src="/2020/03/24/android-dev-env/HAXM-error.png" alt="HAXM安装失败"><br>  Intel Virtualization Technology（VT-x）没有开启, 所以需要进入bios进行开启Intel Virtualization Technology（VT-x）的操作.<br>  2) Unable to run Intel HAXM installer: Cannot start process, the working directory </p>
<pre><code>  Download HAXM directly from Intel website, [here](https://github.com/intel/haxm/releases/tag/v7.5.6)

  因为在原来的开发中使用到了docker, 所以电脑已安装Hyper-v, 但是vt-x和Hyper-v不能共存所以会导致HAXM安装失败, 所以需要开发Android时需要关闭Hyper-v. [操作方法](https://blog.csdn.net/Coco_chun/article/details/90261678)

  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcdedit /set hypervisorlaunchtype off 

// 之后重启电脑，这时候你再去安装haxm就可以了

// 重启hyper-v 
bcdedit / <span class="token builtin class-name">set</span> hypervisorlaunchtype auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre></li>
</ul>
<ul>
<li><h4 id="安装-Android-SDK"><a href="#安装-Android-SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h4><p>  Android Studio 默认会安装最新版本的 Android SDK. 目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本, RN 目前支持 android 4.1 以上设备）. 可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK. </p>
<p>  可以在 Android Studio 的欢迎界面中找到 SDK Manager. 点击 “Configure”, 然后就能看到 “SDK Manager”. </p>
<p>  <img src="/2020/03/24/android-dev-env/sdk-manager.png" alt="Android Studio欢迎界面"></p>
<blockquote>
<p>SDK Manager 还可以在 Android Studio 的 “Preferences” 菜单中找到. 具体路径是 Appearance &amp; Behavior → System Settings → Android SDK. </p>
</blockquote>
<p>  <img src="/2020/03/24/android-dev-env/Android-6.png" alt="Android 6.0"></p>
<p>  在 SDK Manager 中选择 “SDK Platforms”选项卡, 然后在右下角勾选 “Show Package Details”. 展开 Android 6.0 (Marshmallow) 选项, 确保勾选了下面这些组件（重申你必须使用稳定的翻墙工具, 否则可能都看不到这个界面）: </p>
<ul>
<li>Android SDK Platform 28</li>
<li><p>Intel x86 Atom_64 System Image（官方模拟器镜像文件, 使用非官方模拟器不需要安装此组件）</p>
<p>然后点击”SDK Tools”选项卡, 同样勾中右下角的”Show Package Details”. 展开”Android SDK Build-Tools”选项, 确保选中了 React Native 所必须的 23.0.1 版本. 你可以同时安装多个其他版本, 然后还要勾选最底部的 Android Support Repository. </p>
<p>最后点击”Apply”来下载和安装这些组件. </p>
</li>
</ul>
</li>
<li><h4 id="配置-ANDROID-HOME-环境变量"><a href="#配置-ANDROID-HOME-环境变量" class="headerlink" title="配置 ANDROID_HOME 环境变量"></a>配置 ANDROID_HOME 环境变量</h4><p>  React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径, 从而正常进行编译. </p>
<p>  具体的做法是把下面的命令加入到 ~/.bash_profile 文件中(使用bash在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑): </p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Windows</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ANDROID_HOME</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/AppData/Local/Android/Sdk <span class="token comment"># 在 Android Studio 的 "Preferences" 菜单中查看 SDK 的真实路径, 具体是Appearance &amp; Behavior → System Settings → Android SDK. </span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ANDROID_HOME</span>/build-tools
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ANDROID_HOME</span>/platform-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  保存后:</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.bash_profile <span class="token comment"># 使环境变量设置立即生效</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$ANDROID_HOME</span> <span class="token comment"># 检查此变量是否已正确设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  <img src="/2020/03/24/android-dev-env/SDK-HOME.png" alt=""></p>
</li>
<li><h4 id="最后可以通过Androd真机或者模拟器进行调试"><a href="#最后可以通过Androd真机或者模拟器进行调试" class="headerlink" title="最后可以通过Androd真机或者模拟器进行调试"></a>最后可以通过Androd真机或者模拟器进行调试</h4><p>  1) 将真机用 usb 数据线连接到电脑, 然后遵照<a href="https://reactnative.cn/docs/0.55/running-on-device">在设备上运行</a>这篇文档的说明操作即可.</p>
<p>  2) 在 Android Studi 打开 “AVD Manager” 来查看可用的虚拟设备, 可点击”Create Virtual Device…”, 然后选择所需的设备类型并点击”Next”来创建新的模拟设备</p>
</li>
</ul>
<p><a href="https://nervjs.github.io/taro/docs/react-native.html#%E6%90%AD%E5%BB%BA-android-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">本文教程参考: Taro 搭建Android开发环境</a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas 基础</title>
    <url>/2019/02/19/canvas/</url>
    <content><![CDATA[<h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><ul>
<li><p>画布栅格<br>canvas元素默认被网格所覆盖。通常来说网格中的一个单元相当于canvas元素中的一像素。栅格的起点为左上角（坐标为（0,0））。所有元素的位置都相对于原点定位。<br><img src="https://mdn.mozillademos.org/files/224/Canvas_default_grid.png" alt=""></p>
</li>
<li><p>绘制矩形<br><code>fillRect(x, y, width, height)</code>: 绘制一个填充的矩形;<br><code>strokeRect(x, y, width, height)</code>: 绘制一个矩形的边框;<br><code>clearRect(x, y, width, height)</code>: 清除指定矩形区域，让清除部分完全透明;<br>x与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标，width和height设置矩形的尺寸。</p>
</li>
<li><p>绘制路径<br>需要创建起点，绘制出路径，封闭路径，渲染路径区域。<br><code>beginPath()</code>: 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>: 闭合路径之后图形绘制命令又重新指向到上下文中。<br><code>stroke()</code>: 通过线条来绘制图形轮廓。<br><code>fill()</code>: 通过填充路径的内容区域生成实心的图形。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>「编程训练」 TicTacToe</title>
    <url>/2022/01/14/TicTacToe/</url>
    <content><![CDATA[<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20220114134624.png" alt=""></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TicTacToe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
      <span class="token selector">.item</span> <span class="token punctuation">&#123;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ffffff<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 36px<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
        <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
        <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token comment">&lt;!-- &lt;div class="row" id="row-0">
            &lt;div class="item" id="item-0">&lt;/div>
            &lt;div class="item" id="item-1">&lt;/div>
            &lt;div class="item" id="item-2">&lt;/div>
        &lt;/div>
        &lt;div class="row" id="row-1">
            &lt;div class="item" id="item-3">&lt;/div>
            &lt;div class="item" id="item-4">&lt;/div>
            &lt;div class="item" id="item-5">&lt;/div>
        &lt;/div>
        &lt;div class="row" id="row-2">
            &lt;div class="item" id="item-6">&lt;/div>
            &lt;div class="item" id="item-7">&lt;/div>
            &lt;div class="item" id="item-8">&lt;/div>
        &lt;/div> --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> cur_obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> winner <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">showTicTacToe</span><span class="token punctuation">(</span><span class="token parameter">pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ele<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> status <span class="token operator">=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"❌"</span> <span class="token operator">:</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"⭕️"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> _item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _item<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _item<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> status<span class="token punctuation">;</span>
        _item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">move</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
        ele<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>_item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          ele<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"br"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> winner<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur_obj<span class="token punctuation">;</span>
        <span class="token keyword">let</span> _status <span class="token operator">=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"❌"</span> <span class="token operator">:</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"⭕️"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkTicToe</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>_status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is winner</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            winner <span class="token operator">=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 重刷</span>
        <span class="token function">showTicTacToe</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">willWin</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>_status<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> will win</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        cur_obj <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> cur_obj<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">computeMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> choice <span class="token operator">=</span> <span class="token function">bestChoice</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span>point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pattern<span class="token punctuation">[</span>choice<span class="token punctuation">.</span>point<span class="token punctuation">]</span> <span class="token operator">=</span> cur_obj<span class="token punctuation">;</span>
        <span class="token function">showTicTacToe</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">checkTicToe</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> status <span class="token operator">=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _status <span class="token operator">=</span> status <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"❌"</span> <span class="token operator">:</span> status <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"⭕️"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据当前落子来判断</span>
        <span class="token comment">// 上下左右</span>
        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> col <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> row <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sum3 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">// 纵横</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sum1 <span class="token operator">=</span> sum1 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">===</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum2 <span class="token operator">=</span> sum2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>row <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">===</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 交叉方向，需要先判断中心点只有在中心点才可能成功</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sum3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            sum3 <span class="token operator">=</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        flag <span class="token operator">=</span> sum1 <span class="token operator">||</span> sum2 <span class="token operator">||</span> sum3<span class="token punctuation">;</span>
        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
        <span class="token comment">// 交叉</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 辅助判断</span>
    <span class="token keyword">function</span> <span class="token function">willWin</span><span class="token punctuation">(</span><span class="token parameter">pattern<span class="token punctuation">,</span> cur_obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> cur_obj<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cur_obj<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkTicToe</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> j<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0的特殊情况</span>
            <span class="token punctuation">&#125;</span>
            pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function">willLose</span><span class="token punctuation">(</span><span class="token parameter">pattern<span class="token punctuation">,</span> cur_obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">willWin</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> openings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    openings<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">point</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">bestChoice</span><span class="token punctuation">(</span><span class="token parameter">pattern<span class="token punctuation">,</span> cur_obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>openings<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> openings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>point <span class="token operator">=</span> <span class="token function">willWin</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          point<span class="token punctuation">,</span>
          <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cur_obj<span class="token punctuation">;</span>
        <span class="token keyword">let</span> oppo <span class="token operator">=</span> <span class="token function">bestChoice</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-</span> cur_obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对手状态</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span> oppo<span class="token punctuation">.</span>result <span class="token operator">>=</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
          point <span class="token operator">=</span> j<span class="token punctuation">;</span>
          result <span class="token operator">=</span> <span class="token operator">-</span> oppo<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        point<span class="token punctuation">,</span>
        <span class="token literal-property property">result</span><span class="token operator">:</span> point <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// -1: lose, 1: win, 0: 平手</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">showTicTacToe</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「日本語」 李さんの手紙</title>
    <url>/2021/01/28/jp-article_01/</url>
    <content><![CDATA[<p>小野さん</p>
<p>私は　今　京都に　います。一昨日、新幹線で　来ました。<br>京都は　今　<ruby>紅葉<rt>もみじ</rt></ruby>が　とても　綺麗ですよ。京都の紅葉は　本当に　<ruby>素晴らしい<rt>すばらしい</rt></ruby>ですね。私は　日本の季節の中で　秋が　一番　好きです。小野さんは　どうですか？<br>京都には　<ruby>お寺<rt>おてら</rt></ruby>や　<ruby>神社<rt>じんじゃ</rt></ruby>が　たくさん　ありますね。一昨日は　<ruby>金閣寺<rt>きんかくじ</rt></ruby>や　<ruby>八坂神社<rt>やさかじんじゃ</rt></ruby>など　<ruby>色々<rt>いろいろ</rt></ruby>な　所へ　行きました。天気が　よかったですから、<ruby>観光客<rt>かんこうきゃく</rt></ruby>が　たくさん　いました。どこも　とても　にぎやかでした。<br>昨日は　奈良へ　行きました。奈良も　お寺が　多いですね、でも　京都より　静かでした。昨日は　雨でしたから、観光客が　あまり　いませんでした。<ruby>東大寺<rt>とうだいじ</rt></ruby>で　<ruby>大仏<rt>だいぶつ</rt></ruby>を　見ました、本当に　大きかったです。びっくりしました。<br>小野さんは　京都と　奈良と　どちらが　好きですか？<br>小野さんに　お土産を　買いました。とても　綺麗な　紅葉の絵はがきです。<br>明日の夜　帰ります。<br>でも、また。</p>
<hr>
<p>小野先生.<br>我现在在京都。前天坐新干线来的。<br>京都现在红叶很美。京都的红叶真的很棒。我在日本的季节里最喜欢秋天。小野先生怎么样？<br>京都有很多寺庙和神社。前天去了金阁寺和八坂神社等各种各样的地方。天气很好，所以有很多游客。哪里都很热闹。<br>我昨天去了奈良。奈良也有很多寺庙，但是比京都安静。昨天下雨了，所以没有多少游客。在东大寺看到了大佛，真的很大。吓了我一跳<br>小野先生喜欢京都还是奈良？<br>我给小野买了特产。是一张非常漂亮的红叶明信片。<br>我明天晚上回来。<br>再见。</p>
<hr>
<p>Mr. Ono.<br>I am in Kyoto now. Came here by Shinkansen the day before yesterday.<br>The red leaves in Kyoto are beautiful now. The autumn leaves in Kyoto are really wonderful. The autumn is my favorite season in Japan. How are you?<br>There are many temples and shrines in Kyoto. I went to various places such as Kinkakuji Temple and Yasaka Shrine the day before yesterday. The weather was great, so there were many tourists. Everywhere was lively.<br>I went to Nara yesterday. Nara also has many temples, but it was quieter than Kyoto. It rained yesterday, so there were not many tourists. I saw the Big Buddha at Todaiji Temple, it was really big. Scared me.<br>Which one do you like in Kyoto and Nara?<br>I bought special products for you. It is a very beautiful red leaf postcard.<br>I will be back tomorrow night.<br>Goodbye.</p>
]]></content>
      <categories>
        <category>日本語</category>
      </categories>
      <tags>
        <tag>日本語</tag>
      </tags>
  </entry>
  <entry>
    <title>「日本語」 N5语法汇总</title>
    <url>/2021/07/08/jp_N5/</url>
    <content><![CDATA[<iframe frameborder="0" allowfullscreen src="https://www.yuque.com/office/yuque/0/2021/pdf/250093/1625729014160-a392ac8a-5108-4819-8fba-8fadace50147.pdf?from=https%3A%2F%2Fwww.yuque.com%2Fhttishere%2Fnihonngo%2Frqm2w0&amp;view=doc_embed" style="width:100%;min-height:600px;"></iframe>]]></content>
      <categories>
        <category>日本語</category>
      </categories>
      <tags>
        <tag>日本語</tag>
      </tags>
  </entry>
  <entry>
    <title>「日本語」 卒業文章（N5）</title>
    <url>/2021/06/25/jp-article_02/</url>
    <content><![CDATA[<p style="font-family: serif;">
私はこうていていです、今２５歳です。<br>
私の趣味は旅行と<ruby>小説<rt>しょうせつ</rt></ruby>を読むことです。お金がないので、あまり旅行に行ったことがありません。来年<ruby>海外<rt>かいがい</rt></ruby>へ旅行に行きたいです、たくさん美味しいものを食べて、綺麗な<ruby>風景<rt>ふうけい</rt></ruby>を見て、<ruby>地方<rt>ちほう</rt></ruby>の<ruby>風俗<rt>ふうぞく</rt></ruby>を知りたいです。毎日仕事を終わった後で、<ruby>暇<rt>ひま</rt></ruby>つぶしに小説を読みます。ドラマより小説を読むのが好きです。ところで、私は毎日いつも１２時の後で寝ます。これは私の悪い<ruby>習慣<rt>しゅうかん</rt></ruby>ですから、毎晩母は早く寝ると言いました。<br>
<ruby>健康<rt>けんこう</rt></ruby>のために、毎日<ruby>翌日<rt>よくじつ</rt></ruby>のお弁当を作って、会社に持って行きます。私はいろいろな<ruby>材料<rt>ざいりょう</rt></ruby>と簡単な料理<ruby>方法<rt>ほうほう</rt></ruby>が好きです。<ruby>中華<rt>ちゅうか</rt></ruby>料理、日本料理、韓国料理の中で中華料理が一番好きです。ほとんどの日本料理は中華料理より健康ですから、外で食事する時よく日本料理を<ruby>選<rt>えら</rt></ruby>びます。<br>
私は<ruby>教育<rt>きょういく</rt></ruby>会社の社員です。月曜日から金曜日まで働きます。週に３回ジムへ行きます、そして週末に休んだり　ジムで<ruby>鍛<rt>きた</rt></ruby>えたりします、でも友達とあまり遊びに行きません。それから、友達とたくさん<ruby>連絡<rt>れんらく</rt></ruby>して、よく遊びたいです。私の来年の<ruby>願<rt>ねが</rt></ruby>いは<ruby>水泳<rt>すいえい</rt></ruby>ができて、もっと<ruby>美<rt>うつく</rt></ruby>しくなることです。私の<ruby>同僚<rt>どうりょう</rt></ruby>はとても優しくて親切な人です、彼らと一緒に働いでいて、私もいつも楽しいです。今年は金持ちになりたいです。<br>
私は四人家族です、両親と妹と私です。妹は大学生です、<ruby>明<rt>あか</rt></ruby>るい人です。私は猫が好きですが、母はペットが<ruby>汚<rt>きたな</rt></ruby>いと思いでした。それから自分の家があって、３<ruby>匹<rt>ひき</rt></ruby>ぐらいのねこを飼いたいです。結婚と<ruby>出産<rt>しゅっさん</rt></ruby>はしたくないです、ペットは一緒にいってもいいと思います。<ruby>孤独<rt>こどく</rt></ruby>かもしれませんが、<ruby>一人暮<rt>ひとりぐ</rt></ruby>らしがいいと思います。<br>
以上は私の<ruby>自己<rt>じこ</rt></ruby><ruby>紹介<rt>しょうかい</rt></ruby>です。
</p>

<hr>
]]></content>
      <categories>
        <category>日本語</category>
      </categories>
      <tags>
        <tag>日本語</tag>
      </tags>
  </entry>
  <entry>
    <title>js内proxy检测</title>
    <url>/2019/01/24/js-proxy/</url>
    <content><![CDATA[<blockquote>
<p>let p = new Proxy(target, handler);<br>用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p>
</blockquote>
<p>target：用<code>Proxy</code>包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）；<br>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p>
<p><code>Proxy</code>构造函数获取一个<code>target</code>对象，和一个用来拦截<code>target</code>对象不同行为的<code>handler</code>对象。可以设置下面这些拦截项：</p>
<ul>
<li>has — 拦截 in 操作。比如，你可以用它来隐藏对象上某些属性。</li>
<li>get — 用来拦截读取操作。比如当试图读取不存在的属性时，你可以用它来返回默认值。</li>
<li>set — 用来拦截赋值操作。比如给属性赋值的时候你可以增加验证的逻辑，如果验证不通过可以抛出错误。</li>
<li>apply — 用来拦截函数调用操作。比如，你可以把所有的函数调用都包裹在 try/catch 语句块中。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">const Car &#x3D; &#123;
  maker: &#39;BMW&#39;,
  year: 2018,
&#125;;

&#x2F;&#x2F; 验证属性的赋值（set：用来拦截赋值操作）
const proxyCar &#x3D; new Proxy(Car, &#123;
  set(obj, prop, value) &#123;
    &#x2F;&#x2F; 为maker属性赋值时长度必须大于0
    if (prop &#x3D;&#x3D;&#x3D; &#39;maker&#39; &amp;&amp; value.length &lt; 1) &#123;
      throw new Error(&#39;Invalid maker&#39;);
    &#125;

    &#x2F;&#x2F; 为year赋值时数据类型必须是number
    if (prop &#x3D;&#x3D;&#x3D; &#39;year&#39; &amp;&amp; typeof value !&#x3D;&#x3D; &#39;number&#39;) &#123;
      throw new Error(&#39;Invalid year&#39;);
    &#125;
    obj[prop] &#x3D; value;
    return true;
  &#125;

&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样Proxy就可以来监测对象了，比如：</p>
<ul>
<li>函数执行时间</li>
<li>函数的调用者或属性的访问者</li>
<li>统计每个函数或属性的被访问次数<br>…</li>
</ul>
<p>通过一个新构造函数来扩展一个已有的构造函数：<br><pre class="line-numbers language-none"><code class="language-none">function extend(sup,base) &#123;
  var descriptor &#x3D; Object.getOwnPropertyDescriptor(
    base.prototype,&quot;constructor&quot;
  ); &#x2F;&#x2F; 返回指定对象上一个自有属性对应的属性描述符
  base.prototype &#x3D; Object.create(sup.prototype);
  var handler &#x3D; &#123;
    construct: function(target, args) &#123;
      var obj &#x3D; Object.create(base.prototype);
      this.apply(target,obj,args);
      return obj;
    &#125;,
    apply: function(target, that, args) &#123;
      sup.apply(that,args);
      base.apply(that,args);
    &#125;
  &#125;;
  var proxy &#x3D; new Proxy(base,handler);
  descriptor.value &#x3D; proxy;
  Object.defineProperty(base.prototype, &quot;constructor&quot;, descriptor);
  return proxy;
&#125;

var Person &#x3D; function(name)&#123;
  this.name &#x3D; name
&#125;;

var Boy &#x3D; extend(Person, function(name, age) &#123;
  this.age &#x3D; age;
&#125;);

Boy.prototype.sex &#x3D; &quot;M&quot;;

var Peter &#x3D; new Boy(&quot;Peter&quot;, 13);
console.log(Peter.sex);  &#x2F;&#x2F; &quot;M&quot;
console.log(Peter.name); &#x2F;&#x2F; &quot;Peter&quot;
console.log(Peter.age);  &#x2F;&#x2F; 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy | MDN</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「Notion」 Templates</title>
    <url>/2022/01/15/notion-template/</url>
    <content><![CDATA[<a id="more"></a>
<ul>
<li><a href="https://httishere.notion.site/httishere/1-c1d30e13da6a43bcafb3b1c437c4d132">个人主页</a></li>
<li><a href="https://httishere.notion.site/2022-781bfc0de3b548f3b528f09a20923c74">新存钱计划（含理财周记）</a></li>
<li><a href="https://httishere.notion.site/2022-3847080b7f134e05bbd874a7b034d975">2022健身记录</a></li>
<li><a href="https://httishere.notion.site/435bef8aeafe48c18fdb75672c468abf">周计划模版</a></li>
<li><a href="https://httishere.notion.site/httishere-2550c53775684104a0fdbffdcfeaab47">年度计划</a></li>
</ul>
]]></content>
      <categories>
        <category>手帳</category>
      </categories>
      <tags>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>js绑定call, apply, bind</title>
    <url>/2019/01/23/js%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<blockquote>
<p>在JavaScript内Function有3个自带的方法（call，apply，bind），均是为了改变函数体内的this指向。</p>
</blockquote>
<p>相同：call，apply，bind函数第一个参数都是this要指向的对象，即想指定的上下文。</p>
<p>区别：</p>
<ul>
<li>apply的第二个参数是一个参数数组；</li>
<li>call第二个及以后是多个参数（即参数数组内容全部列举）；</li>
<li>bind会创建一个新函数（绑定函数），返回也是函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind() 方法的第一个参数 作为 this，传入 bind() 方法的 第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数，使用bind不会立即执行，在调用创建的新的函数才会执行。</li>
</ul>
<p>apply和call功能是完全一样的，传参就在于传参的方式。</p>
<p>apply, call用法：</p>
<ol>
<li>数组追加<pre class="line-numbers language-none"><code class="language-none">var array1 &#x3D; [12, &#39;foo&#39;, &#123;name:&#39;Joe&#39;&#125;, -2458];
var array2 &#x3D; [&#39;Doe&#39; , 555 , 100];
Array.prototype.push.call(array1, array2);
&#x2F;&#x2F; [12, &#39;foo&#39;, &#123;name:&#39;Joe&#39;&#125;, -2458, [&#39;Doe&#39; , 555 , 100]]
&#x2F;&#x2F; array1.length &#x3D; 5

Array.prototype.push.apply(array1, array2); &#x2F;&#x2F; 这里用 apply 第二个参数是一个数组
&#x2F;&#x2F; [12, &#39;foo&#39;, &#123;name:&#39;Joe&#39;&#125;, -2458, &#39;Doe&#39; , 555 , 100]
&#x2F;&#x2F; array1.length &#x3D; 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>获得数组内的最大值，最小值<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 由于没有指向，第一个参数传null或本身
var numbers &#x3D; [5, 458, 120, -215]; 
var maxInNumbers &#x3D; Math.max.apply(Math, numbers),   &#x2F;&#x2F; 458
    maxInNumbers &#x3D; Math.max.call(Math,5, 458 , 120 , -215); &#x2F;&#x2F; 458<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>验证是否是数组（前提是toString（）方法没有被重写过）<pre class="line-numbers language-none"><code class="language-none">function isArray(obj)&#123; 
    return Object.prototype.toString.call(obj) &#x3D;&#x3D;&#x3D; &#39;[object Array]&#39; ;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>bind用法：<br><pre class="line-numbers language-none"><code class="language-none">var bar &#x3D; function()&#123;
    console.log(this.x);
&#125;
var foo &#x3D; &#123;
    x:3
&#125;
bar(); &#x2F;&#x2F; undefined
var func &#x3D; bar.bind(foo); &#x2F;&#x2F;此时this已经指向了foo，但是用bind（）方法并不会立即执行，而是创建一个新函数，如果要直接调用的话 可以 bar.bind(foo)（）


func(); &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>重看css 01</title>
    <url>/2020/01/12/re-css_01/</url>
    <content><![CDATA[<p>直到前天同事的技术分享，我才突然觉得我好像并不懂 css，只会实现，不会就 Google，但是从来没有去真正的了解过其中的原理，惭愧。</p>
<p>所以重看 css 和 js 都是必须要做的事。</p>
<h4 id="x-baseline"><a href="#x-baseline" class="headerlink" title="x (baseline)"></a>x (baseline)</h4><p>我之前一直没有了解过的”x”，在各种内联模型中，涉及排版或者对齐时都需要用到基线（baseline），比如<code>line-light</code>行高的定义就是两基线的间距，<code>vertical-align</code>的默认值就是基线。<br>那么最普遍的就是字母基线（<code>x</code>的下边缘线）：</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201506/2015-06-28_105734.png" alt=""></p>
<p><img src="https://image.zhangxinxu.com/image/blog/201506/410px-Typography_Line_Terms.svg.png" alt=""></p>
<ul>
<li>x-height: 小写 x 字母的高度</li>
<li>ascender height: 上下线高度</li>
<li>cap height: 大写字母高度</li>
<li>median: 中线</li>
<li>descender height: 下行线高度</li>
</ul>
<p>在 css 内<code>vertical-align: middle</code>就与<code>x-height</code>有关，其中 middle 与上述 median 并不同，在规范中对<code>middle</code>的解释：</p>
<blockquote>
<p><em>middle</em>: This identifies a baseline that is offset from the alphabetic baseline in the shift-direction by 1/2 the value of the x-height font characteristic. The position of this baseline may be obtained from the font data or, for fonts that have a font characteristic for “x-height”, it may be computed using 1/2 the “x-height”. Lacking either of these pieces of information, the position of this baseline may be approximated by the “central” baseline.</p>
</blockquote>
<p>middle 指的是基线往上 1/2 “x-height”高度。可以近似看做字母 x 交叉点那个位置。<br>所以<code>vertical-align: middle</code>并不是绝对的垂直居中对齐。</p>
<p>css 内的<code>ex</code>单位：一个相对单位，指小写字母 x 的高度。<br>实用：借助<code>ex</code>实现 icon 上下垂直居中的效果（必须为内联元素），优点在于不受字体字号影响。</p>
<pre class="line-numbers language-none"><code class="language-none">.icon-arrow &#123;
    display: inline-block;
    width: 20px;
    height: 1ex;
    background: url(arrow.png) no-repeat center;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://image.zhangxinxu.com/image/blog/201506/2015-06-28_143139.png" alt=""></p>
<p>参考：<a href="https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/">字母’x’在 CSS 世界中的角色和故事</a></p>
<h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><p><em>border-color</em>: 如果设置 border 宽度为 Xpx，那么可以在 border 上适应 X 种颜色，每种颜色显示 1px 的宽度。如果说你的 border 的宽度是 10 个像素，但是只声明了 5 或 6 种颜色，那么最后一个颜色将被添加到剩下的宽度。</p>
<p><em>border-radius</em>：左上角水平圆角半径大小 右上角水平圆角半径大小 右下角水平圆角半径大小 左下角水平圆角半径大小/左上角垂直圆角半径大小 右上角垂直圆角半径大小 右下角垂直圆角半径大小 左下角垂直圆角半径大小。<br>如果忽略垂直圆角值，则等于水平圆角值即此时圆角为 1/4 圆，水平/垂直半径有一个小于等于 0，则这个角是矩形不会是圆的。</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201511/2015-11-01_191017-highlight.png" alt=""></p>
<p><em>border-image</em>：&lt; image &gt; &lt; number &gt; &lt; percentage &gt;</p>
<p>[ stretch | repeat | round ]：拉伸 | 重复 | 平铺 (其中 stretch 是默认值)。</p>
<p>图片裁剪位置&lt; number &gt;：无单位，默认单位 px，支持百分比。<br>在设置<code>border-image</code>时实际是将图片进行裁剪形成九个分离区域，然后进行边角设置。</p>
<p><img src="http://image.zhangxinxu.com/image/blog/201001/jiugong.gif" alt=""></p>
<p>即有了 border-top-image , border-right-image , border-bottom-image , border-left-image, border-top-left-image , border-top-right-image , border-bottom-left-image , border-bottom-right-image 以及中间内容区域。</p>
<p>比如当前边框背景图资源为 81px*81px。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 边框平铺
div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 20px solid transparent<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">-moz-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 round<span class="token punctuation">;</span> <span class="token comment">/* Old Firefox */</span>
  <span class="token property">-webkit-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 round<span class="token punctuation">;</span> <span class="token comment">/* Safari and Chrome */</span>
  <span class="token property">-o-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 round<span class="token punctuation">;</span> <span class="token comment">/* Opera */</span>
  <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 round<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://image.zhangxinxu.com/image/blog/201001/2010-01-08_164725.png" alt=""></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 边框拉伸
div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 20px solid transparent<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">-moz-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 stretch<span class="token punctuation">;</span> <span class="token comment">/* Old Firefox */</span>
  <span class="token property">-webkit-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 stretch<span class="token punctuation">;</span> <span class="token comment">/* Safari and Chrome */</span>
  <span class="token property">-o-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 stretch<span class="token punctuation">;</span> <span class="token comment">/* Opera */</span>
  <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 stretch<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="http://image.zhangxinxu.com/image/blog/201001/2010-01-08_140351.png" alt=""></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 边框重复
div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 20px solid transparent<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">-moz-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 repeat<span class="token punctuation">;</span> <span class="token comment">/* Old Firefox */</span>
  <span class="token property">-webkit-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 repeat<span class="token punctuation">;</span> <span class="token comment">/* Safari and Chrome */</span>
  <span class="token property">-o-border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 repeat<span class="token punctuation">;</span> <span class="token comment">/* Opera */</span>
  <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27 repeat<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://image.zhangxinxu.com/image/blog/201001/2010-01-08_170850.png" alt=""></p>
<p>round 会压缩（或伸展）图片大小使其正好在区域内显示，而 repeat 是不管三七二十一直接重复的，而且是居中重复。</p>
<p>边框图片被切割成 9 部分，以一一对应的关系放到 div 边框的九宫格中，然后再压缩（或拉伸）至边框（border-width 或 border-image-width）的宽度大小。</p>
<p>设置<code>border-image-width</code>：优先以边框图片宽度。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
  <span class="token property">border-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/i/border.png<span class="token punctuation">)</span></span> 27/10px stretch<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="Text-effects"><a href="#Text-effects" class="headerlink" title="Text effects"></a>Text effects</h4><p><em>text-stroke</em>：文字描边属性，宽度+颜色，目前只能实现描边，也无法指定是外描边，内描边还是居中描边，目前指的是剧中描边。</p>
<p>本质上让真实文本的字重削弱了，例如文字在页面上渲染时候，线条粗细大概是 1 像素，这时候我们设置个 1 像素宽的描边，则真实显示粗细岂不是只剩下 0.5 像素，如果真是这样，我们其实可以模拟 font-weight 属性的不同字重效果。但是对于某些字体，由于字重的缺失，font-weight:100 和 font-weight:400 粗细都是一样的，都是正常粗细。</p>
<p><img src="https://image.zhangxinxu.com/image/blog/201706/2017-06-04_175554.png" alt=""></p>
<p>实现外描边可以使用<code>text-shadow</code>：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.strok-outside</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 1px red<span class="token punctuation">,</span> 1px 0 red<span class="token punctuation">,</span> -1px 0 red<span class="token punctuation">,</span> 0 -1px red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://image.zhangxinxu.com/image/blog/201706/2017-06-04_205440.png" alt=""></p>
<p>多重描边：</p>
<p><code>text-shadow</code> 属性值可以不断累加，但是 <code>text-stroke</code> 属性却不行，如果想要实现多重描边效果，可以借助伪元素多层叠加模拟。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">data-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多重描边<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>多重描边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-text-stroke</span><span class="token punctuation">:</span> 1px #fff<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p::before,
p::after</span> <span class="token punctuation">&#123;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p::before</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-text-stroke</span><span class="token punctuation">:</span> 7px yellow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p::after</span> <span class="token punctuation">&#123;</span>
  <span class="token property">-webkit-text-stroke</span><span class="token punctuation">:</span> 4px red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://image.zhangxinxu.com/image/blog/201706/2017-06-04_211947.png" alt=""></p>
<p><em>text-fill-color</em>：文字颜色填充，实现效果基本与<code>color</code>一致，目前仅<code>webkit</code>核心浏览器下支持该属性，会覆盖<code>color</code>属性，主要可实现渐变字体和镂空字体。</p>
<p>渐变字体：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>渐变色字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.font1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>
    bottom<span class="token punctuation">,</span>
    <span class="token function">rgb</span><span class="token punctuation">(</span>201<span class="token punctuation">,</span> 21<span class="token punctuation">,</span> 134<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">rgb</span><span class="token punctuation">(</span>20<span class="token punctuation">,</span> 11<span class="token punctuation">,</span> 255<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>
  <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/6080416-d411cc5334e83b22.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/135/format/webp" alt=""></p>
<p>镂空字体（配合<code>text-stroke</code>）：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>font1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的镂空字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.font1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>
  <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
  <span class="token property">-webkit-text-stroke</span><span class="token punctuation">:</span> 1px #000<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/6080416-57515b6a4b0c68f4.PNG?imageMogr2/auto-orient/strip|imageView2/2/w/245/format/webp" alt=""></p>
<p><em>word-wrap</em>：文字换行。</p>
<p>经常在渲染文本时由于连续英文字符串过长导致文本溢出（比如 url 链接等），此时可对文本设置强制边界换行。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.word_wrap</span> <span class="token punctuation">&#123;</span>
  <span class="token property">word-wrap</span><span class="token punctuation">:</span> break-word<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="http://image.zhangxinxu.com/image/web/css3/2010-03-08_012239.png" alt=""></p>
<p>参考：<a href="https://www.zhangxinxu.com/">张鑫旭大神博客</a></p>
]]></content>
      <categories>
        <category>css/Less</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」 前端训练目录</title>
    <url>/2021/11/19/my-f-training/</url>
    <content><![CDATA[<ul>
<li><a href="/2021/03/08/yuque/snyrx5/">知识框架</a></li>
<li><a href="/2021/08/16/yuque/genpz2/">编程语言通识与JavaScript语言设计</a><ul>
<li><a href="/2021/08/19/yuque/whqse7/">词法类型</a></li>
<li><a href="/2021/08/20/yuque/dpsto8/">表达式与类型转换</a></li>
<li><a href="/2021/08/27/yuque/wkuzg2/">语句</a></li>
<li><a href="/2021/08/27/yuque/arrmd9/">对象</a></li>
<li><a href="/2021/09/01/yuque/un7o7p/">结构化程序设计</a></li>
</ul>
</li>
<li><a href="/2021/09/27/yuque/yoo7gw/">浏览器原理</a><ul>
<li><a href="/2021/09/27/yuque/hr55oy/">浏览器原理-HTML解析</a></li>
<li><a href="/2021/09/28/yuque/ur0kri/">浏览器原理-CSS计算</a></li>
<li><a href="/2021/10/12/yuque/ir6rqt/">浏览器原理-排版 &amp; 渲染</a></li>
</ul>
</li>
<li>重学CSS<ul>
<li><a href="/2021/12/13/yuque/gh2gze/">重学CSS-知识体系</a></li>
<li><a href="/2021/12/13/yuque/nmonw0/">重学CSS-语法知识</a></li>
<li><a href="/2021/12/14/yuque/vzq7do/">重学CSS-CSS排版</a></li>
<li><a href="/2021/12/17/yuque/qvtbgk/">重学CSS-CSS动画</a></li>
</ul>
</li>
<li><a href="/2021/12/20/yuque/iclyhn/">重学HTML</a></li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>roughViz.js 手绘风格的网页图表js库</title>
    <url>/2020/01/05/roughViz/</url>
    <content><![CDATA[<p><img src="https://assets-cdn.lanqb.com/manual-box/normal/roughViz_cover.PNG" alt="cover"></p>
<p>是一个非常个性化的图标插件，且可以根据自己喜好变换出很多不同的显示样式。<br>推荐：★★★★☆</p>
<h4 id="支持图表类型"><a href="#支持图表类型" class="headerlink" title="支持图表类型"></a>支持图表类型</h4><ul>
<li>Bar (roughViz.Bar) 条形图</li>
<li>Horizontal Bar (roughViz.BarH) 水平条形图</li>
<li>Donut (roughViz.Donut) 圆环图</li>
<li>Line (roughViz.Line) 折线图</li>
<li>Pie (roughViz.Pie) 饼图</li>
<li>Scatter (roughViz.Scatter) 散点图</li>
<li>Stacked Bar (roughViz.StackedBar) 堆积条形图</li>
</ul>
<h4 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h4><p><code>&lt;script src=&quot;https://unpkg.com/rough-viz@1.0.5&quot;&gt;&lt;/script&gt;</code></p>
<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install rough<span class="token operator">-</span>viz
npm install react<span class="token operator">-</span>roughviz
npm install vue<span class="token operator">-</span>roughviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><p>data 处理有三种方式：</p>
<ul>
<li>csv 文件</li>
<li>tsv 文件</li>
<li>data object</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// add this to abstract base</span>
  <span class="token function">resolveData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'.csv'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">csv</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// console.log(d);</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> d<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'.tsv'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">tsv</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> d<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawFromObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>How to use<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- container --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vis0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bar chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>Bar</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis0"</span><span class="token punctuation">,</span> <span class="token comment">// container selection</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">flavor</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"North"</span><span class="token punctuation">,</span> <span class="token string">"South"</span><span class="token punctuation">,</span> <span class="token string">"East"</span><span class="token punctuation">,</span> <span class="token string">"West"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token string">"flavor"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token string">"price"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Horizontal Bar Chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>BarH</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis2"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Vehicles I've Had"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"1992 Ford Aerostar Van"</span><span class="token punctuation">,</span>
      <span class="token string">"2013 Kia Rio"</span><span class="token punctuation">,</span>
      <span class="token string">"1980 Honda CB 125s"</span><span class="token punctuation">,</span>
      <span class="token string">"1992 Toyota Tercel"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">xLabel</span><span class="token operator">:</span> <span class="token string">"Time Owned (Years)"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Donut chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>Donut</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis1"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"North"</span><span class="token punctuation">,</span> <span class="token string">"South"</span><span class="token punctuation">,</span> <span class="token string">"East"</span><span class="token punctuation">,</span> <span class="token string">"West"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// line chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>Line</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis3"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span>
    <span class="token string">"https://raw.githubusercontent.com/jwilber/random_data/master/tweets.csv"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Line Chart"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">"favorites"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y2</span><span class="token operator">:</span> <span class="token string">"retweets"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y3</span><span class="token operator">:</span> <span class="token string">"tweets"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">yLabel</span><span class="token operator">:</span> <span class="token string">"hey"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// pie chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>Pie</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis4"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">titleFontSize</span><span class="token operator">:</span> <span class="token string">"1.5rem"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"lol idk man"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">values</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"'Yarn Plot': Useful?"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Scatter chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>Scatter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis5"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span>
    <span class="token string">"https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Iris Scatter Plot"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">"sepal_width"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">"petal_length"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">colorVar</span><span class="token operator">:</span> <span class="token string">"species"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highlightLabel</span><span class="token operator">:</span> <span class="token string">"species"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fillWeight</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"coral"</span><span class="token punctuation">,</span> <span class="token string">"skyblue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">strokeWidth</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>
  <span class="token literal-property property">roughness</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">450</span><span class="token punctuation">,</span>
  <span class="token literal-property property">font</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">xLabel</span><span class="token operator">:</span> <span class="token string">"sepal width"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">yLabel</span><span class="token operator">:</span> <span class="token string">"petal length"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">curbZero</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Stacked Bar chart</span>
<span class="token keyword">new</span> <span class="token class-name">roughViz<span class="token punctuation">.</span>StackedBar</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token string">"#vis6"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">"Jan"</span><span class="token punctuation">,</span>
      <span class="token constant">A</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
      <span class="token constant">B</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
      <span class="token constant">C</span><span class="token operator">:</span> <span class="token number">10</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">"Feb"</span><span class="token punctuation">,</span>
      <span class="token constant">A</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
      <span class="token constant">B</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token constant">C</span><span class="token operator">:</span> <span class="token number">20</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">"March"</span><span class="token punctuation">,</span>
      <span class="token constant">A</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
      <span class="token constant">B</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
      <span class="token constant">C</span><span class="token operator">:</span> <span class="token number">10</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">labels</span><span class="token operator">:</span> <span class="token string">"month"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Monthly Revenue"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">roughness</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"#f996ae"</span><span class="token punctuation">,</span> <span class="token string">"skyblue"</span><span class="token punctuation">,</span> <span class="token string">"#9ff4df"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fillWeight</span><span class="token operator">:</span> <span class="token number">0.35</span><span class="token punctuation">,</span>
  <span class="token literal-property property">strokeWidth</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fillStyle</span><span class="token operator">:</span> <span class="token string">"cross-hatch"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token string">"black"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在原本基础的图形表现上，还可以自定义图表显示样式，从而使图表更具独特风格。</p>
<ul>
<li>axisFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 坐标轴字体大小</li>
<li>axisRoughness [number]: Roughness for x &amp; y axes. Default: 0.5. 坐标轴粗糙程度</li>
<li>axisStrokeWidth [number]: Stroke-width for x &amp; y axes. Default: 0.5. 坐标轴线宽</li>
<li>bowing [number]: Chart bowing. Default: 0. 弯曲程度</li>
<li>color [string]: Color for each bar. Default: ‘skyblue’. 填色</li>
<li>fillStyle [string]: Bar fill-style. Should be one of fillStyles shown above. 填充风格</li>
<li>fillWeight [number]: Weight of inner paths’ color. Default: 0.5. 填充饱和度</li>
<li>font: Font-family to use. You can use 0 or gaegu to use Gaegu, or 1 or indie flower to use Indie Flower. Or feed it something else. Default: Gaegu. 字体类型</li>
<li>highlight [string]: Color for each bar on hover. Default: ‘coral’. 高亮</li>
<li>innerStrokeWidth [number]: Stroke-width for paths inside bars. Default: 1. 内部绘线宽度</li>
<li>interactive [boolean]: Whether or not chart is interactive. Default: true. 可交互性，鼠标 hover 操作等</li>
<li>labelFontSize [string]: Font-size for axes’ labels. Default: ‘1rem’. 标签字体大小</li>
<li>margin [object]: Margin object. Default: {top: 50, right: 20, bottom: 70, left: 100} 外边距</li>
<li>padding [number]: Padding between bars. Default: 0.1. 内边距</li>
<li>roughness [number]: Roughness level of chart. Default: 1. 粗糙程度</li>
<li>simplification [number]: Chart simplification. Default 0.2. 简化</li>
<li>stroke [string]: Color of bars’ stroke. Default: black. 绘线颜色</li>
<li>strokeWidth [number]: Size of bars’ stroke. Default: 1. 绘线宽度</li>
<li>title [string]: Chart title. Optional. 图表标题</li>
<li>titleFontSize [string]: Font-size for chart title. Default: ‘1rem’. 标题字体大小</li>
<li>tooltipFontSize [string]: Font-size for tooltip. Default: ‘0.95rem’. 提示字体大小</li>
<li>xLabel [string]: Label for x-axis. x 轴标签</li>
<li>yLabel [string]: Label for y-axis. y 轴标签</li>
<li>legend [boolean]: Whether or not to add legend. Default: ‘true’. 图例</li>
<li>legendPosition [string]: Position of legend. Should be either ‘left’ or ‘right’. Default: ‘right’. 图例位置</li>
<li>circle [boolean]: Whether or not to add circles to chart. Default: true. 圆形</li>
<li>circleRadius [number]: Radius of circles. Default: 10. 圆型半径</li>
<li>circleRoughness [number]: Roughness of circles. Default: 2. 圆形粗糙程度</li>
</ul>
<p>fillStyle<br><img src="https://raw.githubusercontent.com/jwilber/random_data/master/rough_fillStyles.png" alt=""></p>
<p>roughness<br><img src="https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_roughnessbars.png" alt=""></p>
<p>fillWeight<br><img src="https://raw.githubusercontent.com/jwilber/random_data/master/roughViz_fillweight.png" alt=""></p>
<p>传送门 <a href="https://github.com/jwilber/roughViz">roughViz github</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>工具/插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Taro 多端开发</title>
    <url>/2020/03/24/taro-mult-dev/</url>
    <content><![CDATA[<blockquote>
<p>背景: 原先使用 Taro 开发了微信小程序, 现需要打包 App 应用.</p>
</blockquote>
<h3 id="跨平台开发"><a href="#跨平台开发" class="headerlink" title="跨平台开发"></a>跨平台开发</h3><p>在编译时, 遇到不同的框架、组件、API 差异时, 可使用内置的环境变量来做一些特殊处理.</p>
<ul>
<li><h4 id="process-env-TARO-ENV"><a href="#process-env-TARO-ENV" class="headerlink" title="process.env.TARO_ENV"></a>process.env.TARO_ENV</h4><p>用于判断当前编译类型，目前有<code>weapp / swan / alipay / h5 / rn / tt / qq / quickapp</code>, 可在代码内进行类型区分.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARO_ENV</span> <span class="token operator">===</span> <span class="token string">"weapp"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path/to/weapp/name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARO_ENV</span> <span class="token operator">===</span> <span class="token string">"h5"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path/to/h5/name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><h4 id="样式文件中跨平台支持"><a href="#样式文件中跨平台支持" class="headerlink" title="样式文件中跨平台支持"></a>样式文件中跨平台支持</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/**指定平台保留样式：*/</span>

<span class="token comment">/*  #ifdef  %PLATFORM%  */</span>
样式代码
<span class="token comment">/*  #endif  */</span>

<span class="token comment">/**指定平台剔除样式：*/</span>

<span class="token comment">/*  #ifndef  %PLATFORM%  */</span>
样式代码
<span class="token comment">/*  #endif  */</span>

<span class="token comment">/**比如需要只在小程序内生效*/</span>

<span class="token comment">/*  #ifdef weapp  */</span>
样式代码
<span class="token comment">/*  #endif  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><h4 id="多端文件"><a href="#多端文件" class="headerlink" title="多端文件"></a>多端文件</h4><p>多端组件, 假如有一个 Test 组件存在微信小程序、百度小程序和 H5 三个不同版本，那么就可以像如下组织代码</p>
<p>test.js 文件，这是 Test 组件默认的形式，编译到微信小程序、百度小程序和 H5 三端之外的端使用的版本</p>
<p>test.h5.js 文件，这是 Test 组件的 H5 版本</p>
<p>test.weapp.js 文件，这是 Test 组件的 微信小程序 版本</p>
<p>test.swan.js 文件，这是 Test 组件的 百度小程序 版本</p>
<p>四个文件，对外暴露的是统一的接口，它们接受一致的参数，只是内部有针对各自平台的代码实现</p>
<p>而我们使用 Test 组件的时候，引用的方式依然和之前保持一致，import 的是不带端类型的文件名，在编译的时候会自动识别并添加端类型后缀.</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> Test <span class="token keyword">from</span> <span class="token string">"../../components/test"</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span></span> <span class="token attr-name">argA</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">argA</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>多端脚本, 例如微信小程序上使用 Taro.setNavigationBarTitle 来设置页面标题，H5 使用 document.title，那么可以封装一个 setTitle 方法来抹平两个平台的差异。</p>
<p>增加 set_title.h5.js，代码如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>增加 set_title.weapp.js，代码如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">"@tarojs/taro"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Taro<span class="token punctuation">.</span><span class="token function">setNavigationBarTitle</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    title
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用的时候，如下使用</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> setTitle <span class="token keyword">from</span> <span class="token string">"../utils/set_title"</span><span class="token punctuation">;</span>

<span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"页面标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="多端同步调试"><a href="#多端同步调试" class="headerlink" title="多端同步调试"></a>多端同步调试</h3><p>从 1.3.5 版本开始，可以在 dist 目录下创建一个与编译的目标平台名同名的目录，例如编译到微信小程序，最终结果是在 dist/weapp 目录下，使各个平台使用独立的目录互不影响，从而达到多端同步调试的目的，在 config/index.js 配置如下：<br><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outputRoot</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARO_ENV</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<h3 id="Windows编译开发"><a href="#Windows编译开发" class="headerlink" title="Windows编译开发"></a>Windows编译开发</h3><ul>
<li><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><pre class="line-numbers language-none"><code class="language-none"># yarn
$ yarn dev:rn
# npm script
$ npm run dev:rn
# 仅限全局安装
$ taro build --type rn --watch
# npx 用户也可以使用
$ npx taro build --type rn --watch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译成功后的代码在根目录的<code>rn_temp</code>下, 其中关键文件及目录如下：</p>
<ul>
<li>index.js：React Native 入口文件</li>
<li>app.json：React Native 应用的配置，从 config.rn.appJson 中获取</li>
</ul>
</li>
<li><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>打开终端在项目根目录下运行: <code>react-native start</code>, 会在 8081 端口启动 Metro Bundler 负责打包 jsbundle.</p>
<p>在浏览器输入(<a href="http://127.0.0.1:8081)，可以看到如下页面：">http://127.0.0.1:8081)，可以看到如下页面：</a></p>
<p><img src="https://user-images.githubusercontent.com/9441951/55865494-13245d00-5bb1-11e9-9a97-8a785a83b584.png" alt=""></p>
<p>之后打开(<a href="http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true">http://127.0.0.1:8081/rn_temp/index.bundle?platform=android&amp;dev=true</a>) 会触发对应终端平台的 js bundle 构建.</p>
<p><img src="https://user-images.githubusercontent.com/9441951/55865039-37336e80-5bb0-11e9-8aca-c121be4542f6.png" alt=""></p>
</li>
<li><h4 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h4><p>clone Taro提供的React Native iOS/Android 空应用的壳子, 然后在该项目内安装依赖, 使用react-native命令启动</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:NervJS/taro-native-shell.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Android启动(保证AVD处于开启状态):</p>
<pre class="line-numbers language-none"><code class="language-none">react-native run-android<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
        <category>Taro</category>
      </categories>
      <tags>
        <tag>React Native</tag>
        <tag>Taro</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>「手帳」todolist模版</title>
    <url>/2020/12/26/todolist-template/</url>
    <content><![CDATA[<blockquote>
<p>部分计划表模版</p>
</blockquote>
<h3 id="日计划表"><a href="#日计划表" class="headerlink" title="日计划表"></a>日计划表</h3><h4 id="Daily-TODO-01"><a href="#Daily-TODO-01" class="headerlink" title="Daily TODO 01"></a>Daily TODO 01</h4><p><img src="/2020/12/26/todolist-template/Daily-TODO.png" alt=""></p>
<ul>
<li>Tasks：今日任务</li>
<li>Date：本日日期</li>
<li>Target：本日目标</li>
<li>Time Tracker：本日日程时间表（10分钟为单位）</li>
<li>Summary：今日总结</li>
<li>Graph：今日日程时间安排分布</li>
</ul>
<p><a href="Daily-TODO.pdf">Weekly List Pdf Download</a></p>
<h3 id="周计划表"><a href="#周计划表" class="headerlink" title="周计划表"></a>周计划表</h3><h4 id="Weekly-list-01"><a href="#Weekly-list-01" class="headerlink" title="Weekly list 01"></a>Weekly list 01</h4><p><img src="/2020/12/26/todolist-template/Weekly-List.png" alt=""></p>
<ul>
<li>Weekly plan：一周总计划</li>
<li>Others：计划之外的行程安排或者学习内容等</li>
<li>Circle：每周任务的时间规划分配</li>
<li>Summary：一周总结，可以记录任务完成度等等</li>
<li>Remarks：标记，可以根据自己的规划标记一些重点部分</li>
<li>Weekday：当日计划</li>
</ul>
<p><a href="Weekly-List.pdf">Weekly List Pdf Download</a></p>
<h4 id="Weekly-List-02"><a href="#Weekly-List-02" class="headerlink" title="Weekly List 02"></a>Weekly List 02</h4><p><img src="/2020/12/26/todolist-template/Weekly-Points2.png" alt=""><br><img src="/2020/12/26/todolist-template/Weekly-Points_dashed_1.png" alt=""></p>
<ul>
<li>Points：记录本周重点内容</li>
<li>Date：本周日期，如：2020/12/21-2020/12/25</li>
<li>Weekday：列了当日24小时段，每一小时段分为6小段（10分钟为时间颗粒），星期下方为当日完成度，可填写百分比等</li>
<li>Summary：本周总结</li>
</ul>
<p><a href="Weekly-Points2.pdf">Weekly Points Pdf Download</a></p>
<h3 id="月计划表"><a href="#月计划表" class="headerlink" title="月计划表"></a>月计划表</h3>]]></content>
      <categories>
        <category>手帳</category>
      </categories>
      <tags>
        <tag>手帳</tag>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>vue source code 1.0</title>
    <url>/2019/01/22/vue1.0/</url>
    <content><![CDATA[<ul>
<li><p>前置准备<br><img src="https://upload-images.jianshu.io/upload_images/14447586-b4092d45e1f254ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp" alt=""></p>
<ul>
<li><p>Flow基本语法<br>对类型的限制，检测。</p>
<pre class="line-numbers language-none"><code class="language-none">function sum(a: number, b:number) &#123;
    return a + b;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; vue源码内的一个函数
export function renderList (
    val: any, &#x2F;&#x2F; any表示传入的类型可以是任何类型
    render: (
        val: any,
        keyOrIndex: string | number, &#x2F;&#x2F; 表示需要是字符串或者数字
        index?: number &#x2F;&#x2F; ?代表index可以不传，但是传的话一定要传入数字类型；
                       &#x2F;&#x2F; 如果问号是在冒号后面，则这个参数必须要传，但可以是数字类型也可以是空
    ) &#x3D;&gt; VNode
): ?Array&lt;VNode&gt;&#123;
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>原型和原型继承<br>Vue代码中是使用原型继承的方式实现父子组件共享初始化代码的。</p>
<pre class="line-numbers language-none"><code class="language-none">function Student(props) &#123;
    this.name &#x3D; props.name || &#39;Unnamed&#39;;
&#125;

Student.prototype.hello &#x3D; function () &#123;
    alert(&#39;Hello, &#39; + this.name + &#39;!&#39;);
&#125;

&#x2F;&#x2F; 基于Student拓展出PrimaryStudent
function PrimaryStudent(props) &#123;
    &#x2F;&#x2F; 调用Student构造函数，绑定this变量:
    Student.call(this, props);
    this.grade &#x3D; props.grade || 1;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时PrimaryStudent并没有继承Student，其原型链还是：</p>
<pre class="line-numbers language-none"><code class="language-none">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若是继承则原型链：</p>
<pre class="line-numbers language-none"><code class="language-none">new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时需要一个中间对象来实现，将中间对象的原型要指向<code>Student.prototype</code>，不能直接<code>PrimaryStudent.prototype = Student.prototype;</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 空函数F:
function F() &#123;&#125;

&#x2F;&#x2F; 把F的原型指向Student.prototype:
F.prototype &#x3D; Student.prototype;

&#x2F;&#x2F; 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:
PrimaryStudent.prototype &#x3D; new F();

&#x2F;&#x2F; 把PrimaryStudent原型的构造函数修复为PrimaryStudent:
PrimaryStudent.prototype.constructor &#x3D; PrimaryStudent;

&#x2F;&#x2F; 在PrimaryStudent原型（就是new F()对象）上定义方法：
PrimaryStudent.prototype.getGrade &#x3D; function () &#123;
    return this.grade;
&#125;;

var Lilei &#x3D; new PrimaryStudent(&#123;
    name: &#39;李雷&#39;,
    grade: 2
&#125;);
&#x2F;&#x2F; 验证原型:
Lilei.__proto__ &#x3D;&#x3D;&#x3D; PrimaryStudent.prototype; &#x2F;&#x2F; true
Lilei.__proto__.__proto__ &#x3D;&#x3D;&#x3D; Student.prototype; &#x2F;&#x2F; true

&#x2F;&#x2F; 验证继承关系:
Lilei instanceof PrimaryStudent; &#x2F;&#x2F; true
Lilei instanceof Student; &#x2F;&#x2F; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原来的原型链：<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872136313496e60e07ed143bda40a0200b12d8cc3000/l" alt=""><br>新的原型链：<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001439872160923ca15925ec79f4692a98404ddb2ed5503000/l" alt=""></p>
<p>封装这个继承过程：</p>
<pre class="line-numbers language-none"><code class="language-none">function inherits(Child, Parent) &#123;
    var F &#x3D; function () &#123;&#125;;
    F.prototype &#x3D; Parent.prototype;
    Child.prototype &#x3D; new F();
    Child.prototype.constructor &#x3D; Child;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后JavaScript的原型继承实现方式就是：<br>  定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；<br>  借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；<br>  继续在新的构造函数的原型上定义新方法。<br>参考（还需要深入研究）：<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000">廖雪峰js教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></p>
</li>
<li><p>Object.defineProperty<br>使用它实现响应式数据功能（数据绑定）。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; vue 内定义响应式数据
export function defineReactive (
    obj: Object,
    key: string,
    val: any,
    customSetter?: ?Function,
    shallow?: boolean
) &#123;
    .....
    Object.defineProperty(obj, key, &#123;
        enumerable: true, &#x2F;&#x2F; 是否可以遍历该key
        configurable: true, &#x2F;&#x2F; 是否可以删除该key或者重新配置该key
        get: function reactiveGetter () &#123;
            const value &#x3D; getter ? getter.call(obj) : val
            if (Dep.target) &#123;
                dep.depend()
                if (childOb) &#123;
                    childOb.dep.depend()
                    if (Array.isArray(value)) &#123;
                        dependArray(value)
                    &#125;
                &#125;
            &#125;
            return value
        &#125;,
        set: function reactiveSetter (newVal) &#123;
            const value &#x3D; getter ? getter.call(obj) : val
            &#x2F;* eslint-disable no-self-compare *&#x2F;
            if (newVal &#x3D;&#x3D;&#x3D; value || (newVal !&#x3D;&#x3D; newVal &amp;&amp; value !&#x3D;&#x3D; value)) &#123;
                return
            &#125;
            &#x2F;* eslint-enable no-self-compare *&#x2F;
            if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp; customSetter) &#123;
                customSetter()
            &#125;
            if (setter) &#123;
                setter.call(obj, newVal)
            &#125; else &#123;
                val &#x3D; newVal
            &#125;
            childOb &#x3D; !shallow &amp;&amp; observe(newVal)
            dep.notify()
        &#125;
    &#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Object.defineProperty</code>这个函数有三个参数，第一个参数即为需要设置的对象，第二个参数为要设置的键值，第三个参数是一个配置对象，里面可以有：<br>value: 对应key的值<br>configurable：是否可以删除该key或者重新配置该key<br>enumerable：是否可以遍历该key<br>writable：是否可以修改该key<br>get: 获取该key值时调用的函数<br>set: 设置该key值时调用的函数</p>
<pre class="line-numbers language-none"><code class="language-none">let x &#x3D; &#123;&#125;
x[&#39;name&#39;] &#x3D; &#39;vue&#39;
console.log(Object.getOwnPropertyDescriptor(x,&#39;name&#39;))
&#x2F;&#x2F; Object.getOwnPropertyDescriptor可以获取对象某个key的描述对象
&#x2F;*
 * &#123;
 *  value: &quot;vue&quot;,
 *  writable: true, 
 *  enumerable: true, 
 *  configurable: true
 *  &#125;
*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时对其进行操作：</p>
<pre class="line-numbers language-none"><code class="language-none">Object.defineProperty(x, &#39;name&#39;, &#123;
  configurable: false
&#125;)
&#x2F;&#x2F; 结果
delete x[&quot;name&quot;]; &#x2F;&#x2F; false

Object.defineProperty(x, 0, &#123;
    enumerable: false
&#125;)
&#x2F;&#x2F; 不能使用for等循环对x进行遍历<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在vue的Observer类中有下面一行代码：</p>
<pre class="line-numbers language-none"><code class="language-none">def(value, &#39;__ob__&#39;, this);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里def是个工具函数，目的是想给value添加一个key为<strong>ob</strong>，值为this，程序下面要遍历value对其子内容进行递归设置，如果直接用value.<strong>ob</strong>这种方式，在遍历时又会取到造成，这显然不是本意，所以def函数是利用Object.defineProperty给value添加的属性，同时enumerable设置为false。<br><code>set</code>和<code>get</code>类似于在获取对象值和设置对象值时加了一个代理。</p>
<pre class="line-numbers language-none"><code class="language-none">Object.defineProperty(x, &#39;name&#39;, &#123;
    get: function()&#123;
       console.log(&quot;getter called!&quot;)
    &#125;,
    set: function(newVal)&#123;
        console.log(&quot;setter called! newVal is:&quot; + newVal)
    &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以在访问x[‘name’]时回打印getter called，在设置x[‘name’] = ‘httishere’时会打印setter called! newVal is:httishere，正是通过这种方式实现了访问属性时收集依赖，设置属性时源码有一句dep.notify，里面便是通知视图更新的相关操作。</p>
</li>
<li><p>Vnode<br>virtual node，虚拟节点，原生dom节点对象非常大，若直接操作dom，性能代价会比较大。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; vue 内对vnode的定义
export default class VNode &#123;
    tag: string | void;
    data: VNodeData | void;
    children: ?Array&lt;VNode&gt;;
    text: string | void;
    elm: Node | void;
    ns: string | void;
    context: Component | void; &#x2F;&#x2F; rendered in this component&#39;s scope
    key: string | number | void;
    componentOptions: VNodeComponentOptions | void;
    componentInstance: Component | void; &#x2F;&#x2F; component instance
    parent: VNode | void; &#x2F;&#x2F; component placeholder node

    &#x2F;&#x2F; strictly internal
    raw: boolean; &#x2F;&#x2F; contains raw HTML? (server only)
    isStatic: boolean; &#x2F;&#x2F; hoisted static node
    isRootInsert: boolean; &#x2F;&#x2F; necessary for enter transition check
    isComment: boolean; &#x2F;&#x2F; empty comment placeholder?
    isCloned: boolean; &#x2F;&#x2F; is a cloned node?
    isOnce: boolean; &#x2F;&#x2F; is a v-once node?
    asyncFactory: Function | void; &#x2F;&#x2F; async component factory function
    asyncMeta: Object | void;
    isAsyncPlaceholder: boolean;
    ssrContext: Object | void;
    fnContext: Component | void; &#x2F;&#x2F; real context vm for functional nodes
    fnOptions: ?ComponentOptions; &#x2F;&#x2F; for SSR caching
    fnScopeId: ?string;
    ....
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发生修改时，从全局看问题的方式就是异步，先把修改放到队列中，然后整成一批去修改，做diff：</p>
<pre class="line-numbers language-none"><code class="language-none">queueWatcher(this);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>函数柯里化<br>将多参数的函数化作多个部分函数去调用。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 例子 一个需要两个参数的函数
function getSum(a,b)&#123;
    return a+b;
&#125;
&#x2F;&#x2F; 有时候可能参数的获得是异步的，其他参数会在另一个时间点再传入
function getSum(a)&#123;
    return function(b)&#123;
        return a+b;
    &#125;
&#125;
let f &#x3D; getSum(2)
console.log(f(3))
console.log(getSum(2)(3)) &#x2F;&#x2F; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样参数就可以在不同的时间点传入，Vue源码中有一个platform目录，专门存放和平台相关的源码，对函数进行柯里化就可以不用每次运行就进行平台判断。</p>
<pre class="line-numbers language-none"><code class="language-none">function ...(平台相关参数)&#123;
    return function(平台不相关参数)&#123;
      处理逻辑
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Vue的patch以及编译环节都应用了这种方式。</p>
</li>
<li><p>Macrotask与Microtask<br>与js的事件循环机制息息相关，Vue更新不是数据一改马上同步更新视图，而是将更改都放入到队列中，同一个watcher不会重复，然后异步处理更新逻辑。在实现异步的方式时，js实际提供了两种task—Macrotask与Microtask。</p>
<pre class="line-numbers language-none"><code class="language-none">console.log(&#39;script start&#39;);
setTimeout(function() &#123;
    console.log(&#39;setTimeout&#39;);
    Promise.resolve().then(function() &#123;
        console.log(&#39;promise3&#39;);
    &#125;).then(function() &#123;
        console.log(&#39;promise4&#39;);
    &#125;);
&#125;, 0);
Promise.resolve().then(function() &#123;
    console.log(&#39;promise1&#39;);
&#125;).then(function() &#123;
    console.log(&#39;promise2&#39;);
&#125;);
console.log(&#39;script end&#39;);
&#x2F;&#x2F; 结果
script start
script end
promise1
promise2
setTimeout
promise3
promise4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>js事件循环中有两个队列，一个叫MacroTask，一个MircroTask，大任务队列（MacroTask）跑大任务，比如主流程程序、事件处理函数、setTimeout等等，小任务队列（MircroTask）跑小任务，比如Promise，js总是先从大任务队列拿一个执行，然后再把所有小任务队列全部执行再循环往复。<br>上述代码整体的代码段就是一个大任务在执行，执行完毕再执行同级所有小任务，执行完之后再取一个大任务执行，此时就是取setTimeout，之后再是这里面的小任务。<br>重点是<strong>上面程序本身也是一个大任务</strong>，<br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">Macrotask Vs Microtask</a><br><a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff">理解js中Macrotask和Microtask</a><br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">阮一峰 Eventloop理解</a></p>
</li>
<li><p>递归编程算法<br>Vue源码中大量使用了递归算法—比如dom diff算法、ast的优化、目标代码的生成等等。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 经典dom diff算法
while (oldStartIdx &lt;&#x3D; oldEndIdx &amp;&amp; newStartIdx &lt;&#x3D; newEndIdx) &#123;
  if (isUndef(oldStartVnode)) &#123;
    oldStartVnode &#x3D; oldCh[++oldStartIdx]; &#x2F;&#x2F; Vnode has been moved left
  &#125; else if (isUndef(oldEndVnode)) &#123;
    oldEndVnode &#x3D; oldCh[--oldEndIdx];
  &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123;
    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
    oldStartVnode &#x3D; oldCh[++oldStartIdx];
    newStartVnode &#x3D; newCh[++newStartIdx];
  &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123;
    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
    oldEndVnode &#x3D; oldCh[--oldEndIdx];
    newEndVnode &#x3D; newCh[--newEndIdx];
  &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; &#x2F;&#x2F; Vnode moved right
    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
    oldStartVnode &#x3D; oldCh[++oldStartIdx];
    newEndVnode &#x3D; newCh[--newEndIdx];
  &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; &#x2F;&#x2F; Vnode moved left
    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
    canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
    oldEndVnode &#x3D; oldCh[--oldEndIdx];
    newStartVnode &#x3D; newCh[++newStartIdx];
  &#125; else &#123;
    if (isUndef(oldKeyToIdx)) &#123; oldKeyToIdx &#x3D; createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); &#125;
    idxInOld &#x3D; isDef(newStartVnode.key)
      ? oldKeyToIdx[newStartVnode.key]
      : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
    if (isUndef(idxInOld)) &#123; &#x2F;&#x2F; New element
      createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
    &#125; else &#123;
      vnodeToMove &#x3D; oldCh[idxInOld];
      if (sameVnode(vnodeToMove, newStartVnode)) &#123;
        patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
        oldCh[idxInOld] &#x3D; undefined;
        canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
      &#125; else &#123;
        &#x2F;&#x2F; same key but different element. treat as new element
        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
      &#125;
    &#125;
    newStartVnode &#x3D; newCh[++newStartIdx];
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>主要是用于比较新旧Vnode节点然后更新子节点，调用者是patchVnode函数，我们发现这部分函数中又会调用会patchVnode，调用链条为:patchVnode-&gt;updateChildren-&gt;patchVnode。同时，即便没有直接应用递归，在将模板编译成AST（抽象语法树）的过程中，其使用了栈去模拟了递归的思想，由此可见递归算法的重要性。不管是真实dom还是vnode，其实本质都是树状结构，本来就是递归定义的东西。</p>
</li>
<li><p>编译原理基础知识</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; vue内
const ast &#x3D; parse(template.trim(), options)
if (options.optimize !&#x3D;&#x3D; false) &#123;
    optimize(ast, options)
&#125;
const code &#x3D; generate(ast, options)
return &#123;
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先通过parse函数将template编译为抽象语法树ast，然后对ast进行代码优化，最后生成render函数。就是将模板html编译为render函数。<br>AST（抽象语法树），就是一种表现大家共同点的结构，得到ast是翻译的基础。</p>
</li>
</ul>
</li>
</ul>
<p>参考文章：<a href="https://www.jianshu.com/p/c914ccd498e7">Vue源码解析准备篇 from 海洋之木</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>从入门到放弃</tag>
      </tags>
  </entry>
  <entry>
    <title>vultr搭建shadowsock</title>
    <url>/2020/03/24/vultr-ss/</url>
    <content><![CDATA[<h4 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h4><ul>
<li>注册vultr, <a href="https://www.vultr.com/">vultr官网</a>;</li>
<li>测试速度选择节点;</li>
<li>充值, 最低充值为10刀;</li>
</ul>
<p><img src="/2020/03/24/vultr-ss/vultr.png" alt="国内用户可以选择alipay"></p>
<ul>
<li>搭建服务器, 点击右侧加号, 依次选择Server Location, Server Type(CentOS 7*64), Server Size($5/mon), 然后点击Deploy Now, 等待安装完成;</li>
</ul>
<p><img src="/2020/03/24/vultr-ss/running.png" alt="安装成功"></p>
<p>点击可查看服务器详情:</p>
<p><img src="/2020/03/24/vultr-ss/server-detail.png" alt=""></p>
<h4 id="远程服务器配置"><a href="#远程服务器配置" class="headerlink" title="远程服务器配置"></a>远程服务器配置</h4>]]></content>
      <tags>
        <tag>实用</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vue source code 2.0</title>
    <url>/2019/01/23/vue2.0/</url>
    <content><![CDATA[<h2 id="Vue-options"><a href="#Vue-options" class="headerlink" title="Vue options"></a>Vue options</h2><p>核心代码-&gt;core/index，暴露一个Vue类（core/instance/index），在该文件内发现初始定义了一个Vue：<br><pre class="line-numbers language-none"><code class="language-none">function Vue (options) &#123;
  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp;
    !(this instanceof Vue)
  ) &#123;
    warn(&#39;Vue is a constructor and should be called with the &#96;new&#96; keyword&#39;)
  &#125;
  this._init(options)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>其中传入的参数options，即我妈实例化Vue对象时传入的：<br><pre class="line-numbers language-none"><code class="language-none">&#123;
    el: &#39;#data&#39;,
    data: &#123;
        ...
    &#125;,
    methods: &#123;
        ...
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>再定义完这个Vue类之后执行了5个方法：</p>
<ul>
<li>initMixin(Vue)<br>主要为Vue原型定义了<code>_init</code>方法，再实例化过程中会执行<code>_init</code>方法，其中先对options进行了判断，若非组件则会进入<code>mergeOptions</code>方法，该方法是将<code>resolveConstructorOptions(vm.constructor)</code>和<code>options</code>合在一起。<br>那<code>resolveConstructorOptions</code>时干嘛的呢，<code>Ctor.super</code>可想而知是上级，所以主要是来判断该类是否为Vue的子类，进而判断父类中的options有没有发生变化，当Vue混入一些options时<code>superOptions</code>会发生变化，之后就会更新子类的<code>superOptions</code>，Vue混入options的情况：<pre class="line-numbers language-none"><code class="language-none">Vue.extend(options)
Vue.mixin(options)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
在<code>mergeOptions</code>根据不同的key采用不同的merge策略，ue提供了一个strats对象，其本身就是一个hook，如果strats有提供特殊的逻辑，就走strats，否则走默认merge逻辑，能很好的区分对待公共处理逻辑与特殊处理逻辑。<br><code>initMixin</code>就是把业务逻辑以及组件的一些特性全都放到了vm.$options中了，后续的操作我们都可以从vm.$options拿到可用的信息，后续动态添加任何东西都可以规范的收入到<code>vm.$options</code>内。<br>后续的执行：<pre class="line-numbers language-none"><code class="language-none">initLifecycle(vm)
initEvents(vm)
initRender(vm)
callHook(vm, &#39;beforeCreate&#39;)
initInjections(vm)
initState(vm)
initProvide(vm)
callHook(vm, &#39;created&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
需要先了解响应式数据原理（订阅-发布模式）：<br><img src="https://camo.githubusercontent.com/f60a57d4d89744f5947ca53c6ce80d3105171185/687474703a2f2f696d672e736f756368652e636f6d2f6632652f38613963383033353763623834626161653532383564653437663461656165622e706e67" alt=""></li>
</ul>
<h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><pre class="line-numbers language-none"><code class="language-none">export class Observer &#123;
  value: any;
  dep: Dep;
  vmCount: number; &#x2F;&#x2F; number of vms that have this object as root $data

  constructor (value: any) &#123;
    this.value &#x3D; value
    this.dep &#x3D; new Dep()
    this.vmCount &#x3D; 0
    def(value, &#39;__ob__&#39;, this)
    if (Array.isArray(value)) &#123;
      if (hasProto) &#123;
        protoAugment(value, arrayMethods)
      &#125; else &#123;
        copyAugment(value, arrayMethods, arrayKeys)
      &#125;
      this.observeArray(value)
    &#125; else &#123;
      this.walk(value)
    &#125;
  &#125;

  &#x2F;**
   * Walk through all properties and convert them into
   * getter&#x2F;setters. This method should only be called when
   * value type is Object.
   *&#x2F;
  walk (obj: Object) &#123;
    const keys &#x3D; Object.keys(obj)
    for (let i &#x3D; 0; i &lt; keys.length; i++) &#123;
      defineReactive(obj, keys[i])
    &#125;
  &#125;

  &#x2F;**
   * Observe a list of Array items.
   *&#x2F;
  observeArray (items: Array&lt;any&gt;) &#123;
    for (let i &#x3D; 0, l &#x3D; items.length; i &lt; l; i++) &#123;
      observe(items[i])
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当实例化Observer对象时，会执行<code>walk</code>这个方法, 主要是遍历obj属性, 然后通过<code>Object.defineProperty</code>来定义响应式数据。<br>defineReactive:<br><pre class="line-numbers language-none"><code class="language-none">export function defineReactive (
 obj: Object,
 key: string,
 val: any,
 customSetter?: ?Function,
 shallow?: boolean
) &#123;
  const dep &#x3D; new Dep() &#x2F;&#x2F; 订阅器
  ...
  Object.defineProperty(obj, key, &#123;
      ...
      get: function reactiveGetter () &#123;
        ...
        dep.depend()
        ...
        return value
      &#125;,
      set: function reactiveSetter (newVal) &#123;
        ...
        dep.notify()
      &#125;
    &#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>主要是做了Dep的两个操作:<br><pre class="line-numbers language-none"><code class="language-none">dep.depend()
dep.notify()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Dom上通过指令或者双大括号绑定的数据, 会添加观察者<code>watcher</code>, 当实例化Watcher的时候 会触发属性的getter方法，此时会调用dep.depend()。<br><pre class="line-numbers language-none"><code class="language-none">depend () &#123;
  if (Dep.target) &#123;
    Dep.target.addDep(this)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在进行Watcher实例化时会调用内部get函数, 为其初始化:<br><pre class="line-numbers language-none"><code class="language-none">get () &#123;
  pushTarget(this) &#x2F;&#x2F; 就是为Dep.target绑定此watcher实例
  ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>当更新data的时候, 会触发set方法, 执行dep.notify()函数:<br><pre class="line-numbers language-none"><code class="language-none">notify () &#123;
  &#x2F;&#x2F; stabilize the subscriber list first
  const subs &#x3D; this.subs.slice()
  for (let i &#x3D; 0, l &#x3D; subs.length; i &lt; l; i++) &#123;
    subs[i].update()
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>就是遍历dep中收集到的watcher实例，进行update()。也就是进行数据更新操作。这也就是简单的数据响应式。<br>其实还需要注意的是： 当数据的getter触发后，会收集依赖，但也不是所有的触发方式都会收集依赖，只有通过watcher触发的getter会收集依赖：<code>if (Dep.target) &#123; dep.depend() &#125;</code>，而所谓的被收集的依赖就是当前watcher，DOM中的数据必须通过watcher来绑定，只通过watcher来读取。</p>
<h4 id="initLifecycle"><a href="#initLifecycle" class="headerlink" title="initLifecycle"></a>initLifecycle</h4><pre class="line-numbers language-none"><code class="language-none">export function initLifecycle (vm: Component) &#123;
  const options &#x3D; vm.$options
  &#x2F;**
   * 这里判断是否存在父示例，如果存在，则通过 while 循环，建立所有组建的父子关系
   *&#x2F;
  let parent &#x3D; options.parent
  if (parent &amp;&amp; !options.abstract) &#123;
    while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;
      parent &#x3D; parent.$parent
    &#125;
    parent.$children.push(vm)
  &#125;
  &#x2F;**
   * 为组件实例挂载相应属性，并初始化
   *&#x2F;
  vm.$parent &#x3D; parent
  vm.$root &#x3D; parent ? parent.$root : vm

  vm.$children &#x3D; []
  vm.$refs &#x3D; &#123;&#125;

  vm._watcher &#x3D; null
  vm._inactive &#x3D; null
  vm._directInactive &#x3D; false
  vm._isMounted &#x3D; false
  vm._isDestroyed &#x3D; false
  vm._isBeingDestroyed &#x3D; false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h4><pre class="line-numbers language-none"><code class="language-none">export function initEvents (vm: Component) &#123;
  &#x2F;**
   * 创建事件对象，用于存储事件
   *&#x2F;
  vm._events &#x3D; Object.create(null)
  &#x2F;**
   * 这里应该是系统事件标识位
   *&#x2F;
  vm._hasHookEvent &#x3D; false
  &#x2F;&#x2F; init parent attached events
  &#x2F;&#x2F; _parentListeners其实是父组件模板中写的v-on
  &#x2F;&#x2F; 所以下面这段就是将父组件模板中注册的事件放到当前组件实例的listeners里面
  const listeners &#x3D; vm.$options._parentListeners
  if (listeners) &#123;
    updateComponentListeners(vm, listeners)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="initRender"><a href="#initRender" class="headerlink" title="initRender"></a>initRender</h4><p>主要是为组件实例，初始化一些渲染属性，比如$slots和$createElement等。<br><pre class="line-numbers language-none"><code class="language-none">export function initRender (vm: Component) &#123;
  vm._vnode &#x3D; null &#x2F;&#x2F; the root of the child tree
  const options &#x3D; vm.$options
  const parentVnode &#x3D; vm.$vnode &#x3D; options._parentVnode &#x2F;&#x2F; the placeholder node in parent tree
  const renderContext &#x3D; parentVnode &amp;&amp; parentVnode.context

  &#x2F;&#x2F; 处理组件slot，返回slot插槽对象

  vm.$slots &#x3D; resolveSlots(options._renderChildren, renderContext)
  vm.$scopedSlots &#x3D; emptyObject

  vm._c &#x3D; (a, b, c, d) &#x3D;&gt; createElement(vm, a, b, c, d, false)

  vm.$createElement &#x3D; (a, b, c, d) &#x3D;&gt; createElement(vm, a, b, c, d, true)


  &#x2F;**
   * 定义v2.4中新增的$attrs及$listeners属性，需要为其绑定响应式数据更新
   *&#x2F;
   
  const parentData &#x3D; parentVnode &amp;&amp; parentVnode.data

  &#x2F;* istanbul ignore else *&#x2F;
  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;
    defineReactive(vm, &#39;$attrs&#39;, parentData &amp;&amp; parentData.attrs || emptyObject, () &#x3D;&gt; &#123;
      !isUpdatingChildComponent &amp;&amp; warn(&#96;$attrs is readonly.&#96;, vm)
    &#125;, true)
    defineReactive(vm, &#39;$listeners&#39;, options._parentListeners || emptyObject, () &#x3D;&gt; &#123;
      !isUpdatingChildComponent &amp;&amp; warn(&#96;$listeners is readonly.&#96;, vm)
    &#125;, true)
  &#125; else &#123;
    defineReactive(vm, &#39;$attrs&#39;, parentData &amp;&amp; parentData.attrs || emptyObject, null, true)
    defineReactive(vm, &#39;$listeners&#39;, options._parentListeners || emptyObject, null, true)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="callHook"><a href="#callHook" class="headerlink" title="callHook"></a>callHook</h4><p>调用钩子函数的方法，即触发之前options中定义的相应的生命周期函数。<br>进行到此处便开始调用了beforeCreate钩子函数。<br><pre class="line-numbers language-none"><code class="language-none">export function callHook (vm: Component, hook: string) &#123;
  const handlers &#x3D; vm.$options[hook]
  if (handlers) &#123;
    for (let i &#x3D; 0, j &#x3D; handlers.length; i &lt; j; i++) &#123;
      try &#123;
        handlers[i].call(vm)
      &#125; catch (e) &#123;
        handleError(e, vm, &#96;$&#123;hook&#125; hook&#96;)
      &#125;
    &#125;
  &#125;
  if (vm._hasHookEvent) &#123;
    vm.$emit(&#39;hook:&#39; + hook)
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="initInjections-和-initProvide"><a href="#initInjections-和-initProvide" class="headerlink" title="initInjections 和 initProvide"></a>initInjections 和 initProvide</h4><pre class="line-numbers language-none"><code class="language-none">export function initInjections (vm: Component) &#123;
  &#x2F;&#x2F; 因为并没有vm._provided此时result 返回的是个 null，也就没有进行defineReactive
  const result &#x3D; resolveInject(vm.$options.inject, vm)
  if (result) &#123;
    observerState.shouldConvert &#x3D; false
    Object.keys(result).forEach(key &#x3D;&gt; &#123;
      &#x2F;* istanbul ignore else *&#x2F;
      if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;
        defineReactive(vm, key, result[key], () &#x3D;&gt; &#123;
          warn(
            &#96;Avoid mutating an injected value directly since the changes will be &#96; +
            &#96;overwritten whenever the provided component re-renders. &#96; +
            &#96;injection being mutated: &quot;$&#123;key&#125;&quot;&#96;,
            vm
          )
        &#125;)
      &#125; else &#123;
        defineReactive(vm, key, result[key])
      &#125;
    &#125;)
    observerState.shouldConvert &#x3D; true
  &#125;
&#125;
export function initProvide (vm: Component) &#123;
  const provide &#x3D; vm.$options.provide
  if (provide) &#123;
    vm._provided &#x3D; typeof provide &#x3D;&#x3D;&#x3D; &#39;function&#39;
      ? provide.call(vm)
      : provide
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h4><p>主要是定义的数据进行defineReactive。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>从入门到放弃</tag>
      </tags>
  </entry>
  <entry>
    <title>底部input获得焦点, 页面弹出软键盘时页面上移问题处理</title>
    <url>/2020/01/15/wx-input/</url>
    <content><![CDATA[<p>在开发时经常会遇到底部输入框的需求, 比如聊天界面, 评论, 直播弹幕等等, 但是在微信小程序内存在一个问题, 在底部<code>input</code>获得焦点时页面弹出软键盘页面会整体上移, 不管页面元素是否为<code>fixed</code>等.</p>
<p>正常未获得焦点情况:<br><img src="https://upload-images.jianshu.io/upload_images/6080416-965e7d9b93fea702.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="normal"></p>
<p>获取焦点后：<br><img src="https://upload-images.jianshu.io/upload_images/6080416-bbb25ecc107a5c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="focus"></p>
<p>微信官方提供了一个<code>adjustPosition</code>属性, 键盘弹起时，是否自动上推页面.</p>
<p>将<code>input</code>的<code>adjust-position</code>设为<code>false</code>之后, 弹出软键盘后页面不会上移, 但是会导致输入框被软键盘覆盖.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barrage-input<span class="token punctuation">"</span></span> <span class="token attr-name">adjustPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;false&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/6080416-55f0fa43775a3ffd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="adjust-position"></p>
<p>所以需要通过输入框获得焦点, 失去焦点以及软键盘高度变化时获取软键盘高度对<code>input</code>位置进行手动设置.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;View
  className=&#123;["barrage-bar", keyboard_height ? "untouch-bottom" : ""]&#125;
  style=&#123;&#123; bottom: keyboard_height + "px" &#125;&#125;
>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barrage-bar-inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>barrage-input<span class="token punctuation">"</span></span>
      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;input_msg&#125;</span>
      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>有疑问？弹幕问老师...<span class="token punctuation">"</span></span>
      <span class="token attr-name">placeholderStyle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color:#999999;<span class="token punctuation">"</span></span>
      <span class="token attr-name">adjustPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;false&#125;</span>
      <span class="token attr-name">onInput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;this.inputMsgChange.bind(this)&#125;</span>
      <span class="token special-attr"><span class="token attr-name">onFocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inputFocus</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span></span>
      <span class="token special-attr"><span class="token attr-name">onBlur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inputBlur</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span></span>
      <span class="token attr-name">onKeyboardHeightChange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;this.keyboardHeightChange.bind(this)&#125;</span>
    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Input</span><span class="token punctuation">></span></span>
    &lt;View
      className=&#123;["btn btn-send", input_msg.length ? "btn-can-send" : ""]&#125;
      onClick=&#123;this.sendMessageOnPage.bind(this)&#125;
    >
      发送
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">inputFocus</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 输入框获取焦点, 通过软键盘高度设置输入框位置</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">keyboard_height</span><span class="token operator">:</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>height
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">inputBlur</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">keyboard_height</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">keyboardHeightChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">keyboard_height</span><span class="token operator">:</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>height
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终:<br><img src="https://upload-images.jianshu.io/upload_images/6080416-7ee8dca6ada06335.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/6080416-f921dac1f7f705dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>wx</tag>
        <tag>微信开发</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 2 - React基本概念 &amp; Hooks的理解</title>
    <url>/2023/01/30/notion/052b00d24389450/</url>
    <content><![CDATA[<h2 id="在-React-之前"><a href="#在-React-之前" class="headerlink" title="在 React 之前"></a>在 React 之前</h2><p>需要调用 DOM 的 API 来修改 DOM 树的结构从而改变 UI 的展示方式。</p>
<h2 id="React-之后"><a href="#React-之后" class="headerlink" title="React 之后"></a>React 之后</h2><p>需要要在业务状态和 UI 状态之间建立一个绑定的关系。</p>
<hr>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="用组件的方式描述-UI"><a href="#用组件的方式描述-UI" class="headerlink" title="用组件的方式描述 UI"></a>用组件的方式描述 UI</h3><p>在 React 内所有的 UI 都是通过<strong>组件</strong>去描述和组织的，React 组件是以<strong>树状结构</strong>组织到一起的，通常会有一个根组件：</p>
<ul>
<li>内置组件：映射到 HTML 节点的组件</li>
<li>自定义组件：自己创建的组件，使用时必须以大写字母开头</li>
</ul>
<h3 id="使用-state-和-props-管理状态"><a href="#使用-state-和-props-管理状态" class="headerlink" title="使用 state 和 props 管理状态"></a>使用 state 和 props 管理状态</h3><ul>
<li>state：保存状态的机制</li>
<li>props：父子组件之间传递状态的方式</li>
</ul>
<p>在函数组件内可以使用<code>useState</code>这个 Hook 来保存状态，内置组件和自定义组件都可以在使用时把接收的属性 props 作为参数，当这个参数变化时组件也会自动重新渲染。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">CountLabel</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> count <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"red"</span> <span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">userState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>CountLabel count<span class="token operator">=</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JSX-语法的本质"><a href="#JSX-语法的本质" class="headerlink" title="JSX 语法的本质"></a>JSX 语法的本质</h3><p>JSX 并不是新的模版语言而是一个<strong>语法糖</strong>，不用 JSX 语法的话也可以使用 React.createElement 来实现。</p>
<ol>
<li>JSX 的表达能力等价于 JavaScript；</li>
<li>无需学习；</li>
</ol>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run create-react-app my-app
<span class="token builtin class-name">cd</span> my-app
<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="在组件内执行异步请求"><a href="#在组件内执行异步请求" class="headerlink" title="在组件内执行异步请求"></a>在组件内执行异步请求</h3><p>需要有数据状态，loading 状态以及错误处理。</p>
<blockquote>
<p><strong>在 React 组件中，任何一个 state 发生变化，整个函数组件都会被完全执行一遍。</strong></p>
</blockquote>
<ul>
<li>为了避免在组件内重复定义很多函数，可以使用 useCallback 这个 Hook 来缓存回调函数；</li>
<li>异步请求逻辑的重用可以利用 Redux 这个全局状态管理框架；</li>
</ul>
<h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><h3 id="React-最打动人的特性是什么？或者说它的最大优点。"><a href="#React-最打动人的特性是什么？或者说它的最大优点。" class="headerlink" title="React 最打动人的特性是什么？或者说它的最大优点。"></a>React 最打动人的特性是什么？或者说它的最大优点。</h3><ul>
<li>灵活的 jsx</li>
<li>生态强大，核心简单，写法灵活</li>
</ul>
<h2 id="Hooks（-gt-16-8"><a href="#Hooks（-gt-16-8" class="headerlink" title="Hooks（&gt;16.8)"></a>Hooks（&gt;16.8)</h2><blockquote>
<p>原来的基于 class 的组件完全可以继续使用。</p>
</blockquote>
<h3 id="React-组件的本质"><a href="#React-组件的本质" class="headerlink" title="React 组件的本质"></a>React 组件的本质</h3><p>就是从 Model 到 View 的映射，这里的 Model 对应的是 state 和 props。</p>
<p><strong>数据绑定</strong>：当 Model 发生改变时，函数会重新执行，并且生成新的 DOM 树，然后 React 再将新的 DOM 树以最优的方式更新到浏览器。</p>
<p>为什么会出现 Hooks，原来的 Class 组件有哪些问题？</p>
<ul>
<li>React 组件之间不会互相继承，所以没有利用到 Class 的继承特性；</li>
<li>UI 是由状态驱动的，很少会在外部调用一个类实例，组件的所有方法都是内部调用；</li>
</ul>
<p>所以这两个 Class 最重要的特性都未使用到，所以用函数去描述<strong><code>State ⇒ View</code></strong>这样的映射才是最合适的，但是函数组件有没有 State 和生命周期，于是就有了 Hooks。</p>
<h3 id="Hooks-的诞生"><a href="#Hooks-的诞生" class="headerlink" title="Hooks 的诞生"></a>Hooks 的诞生</h3><p>函数和对象不同，实例对象不能够在多次执行之间保存状态，所以我们需要一个能够把外部的数据绑定到函数的执行机制。</p>
<p>这个机制就是<strong>Hooks，Hooks 就是把某个目标结果钩到某个可能会变化的数据源或者事件源上，那么当被钩到的数据或者事件发生变化时，产生这个目标结果的代码会重新执行，产生更新后的结果。</strong></p>
<p>对于函数组件，这个结果就是最终的 DOM 树；对于<code>useCallback</code>，<code>useMemo</code>这样的雨缓存相关的组件则是在依赖项发生变化时去更新缓存。Hooks 的结构：</p>
<p><img src="https://i.hd-r.cn/a6e410883f0975e888ea749be99e35cf.jpg" alt="a6e410883f0975e888ea749be99e35cf.jpg"></p>
<p>‼️ Hooks 中被钩的对象可以是某个独立的数据源也可以是另一个 Hook 执行的结果，这样就可以达成<strong>逻辑复用</strong>的效果。</p>
<h3 id="Hooks-带来的最大的好处：逻辑复用"><a href="#Hooks-带来的最大的好处：逻辑复用" class="headerlink" title="Hooks 带来的最大的好处：逻辑复用"></a>Hooks 带来的最大的好处：逻辑复用</h3><p>在之前的 React 使用中必须借助高阶组件等设计模式来实现逻辑复用，但告诫组件会产生荣誉的组件节点，所有 Hooks 也大大的<strong>简化了逻辑复用</strong>。</p>
<p>比如说实现窗口大小的监听，窗口大小是一个外部数据状态，我们可以通过 Hooks 的方式对其进行封装，将其变成一个可绑定的数据源，这样代码会更加简洁直观。</p>
<h3 id="Hooks-的另一个好处：有助于关注分离"><a href="#Hooks-的另一个好处：有助于关注分离" class="headerlink" title="Hooks 的另一个好处：有助于关注分离"></a>Hooks 的另一个好处：有助于关注分离</h3><p>能够针对同一个业务逻辑的代码尽可能聚合在一起，在过去的 React 内需要把同一个业务逻辑的代码分散在组件的不同生命周期内。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>React 的开发思想：从 State⇒View 的函数式映射；</li>
<li>Hooks 解决了 Class 组件存在的代码冗余，难以逻辑复用的问题；</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪周刊 002期：如何保持稳定输出</title>
    <url>/2023/02/06/notion/06e490bd52654fc/</url>
    <content><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/0889d968-052a-4039-8def-343395a7beca/41DE8900-07B8-458A-ABE5-FF511EFED51D.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055225Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=9d99106c2f8a4630d22b60be3cd4c2110b34ffa4c3dd75c6611e92fdfe3152c9&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="41DE8900-07B8-458A-ABE5-FF511EFED51D.jpeg"></p>
<h3 id="Hello，大家好，这里是阿汪同学。"><a href="#Hello，大家好，这里是阿汪同学。" class="headerlink" title="Hello，大家好，这里是阿汪同学。"></a>Hello，大家好，这里是阿汪同学。</h3><h3 id="本期关键词：-锡兰牛乳茶"><a href="#本期关键词：-锡兰牛乳茶" class="headerlink" title="本期关键词： 锡兰牛乳茶"></a>本期关键词： 锡兰牛乳茶</h3><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>我今年的打算是可以有稳定的输入输出，不要再三分热度，但是如何保持稳定的输入输出是一个问题。</p>
<p>还有很多人正常输入是没问题的但是不会输入，就像我知识在脑子里但是需要去传达给别人的时候不会组织语言，这都是我今年想要训练自己的方面。</p>
<p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><ul>
<li>谷歌将推出 ChatGPT 竞争对手 Bard，Bard 是建立在谷歌现有的大型语言模型 Lamda 的基础上。</li>
<li>技术写作坚持不下去怎么办，可以看张鑫旭大佬的这篇文章<a href="https://juejin.cn/book/7184663814950879270/section/7184824069563351043">《执行：坚持不下去，怎么办？》</a>，他还有<a href="https://juejin.cn/book/7184663814950879270"><strong>技术写作指南</strong></a>这个专栏，等有时间可以购买看一下。</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><p><a href="https://www.galmoe.com/">https://www.galmoe.com/</a>：提取 B 站封面的网站，输入视频的 bv 号就可以下载视频封面</p>
<pre><code>    ![%E6%88%AA%E5%B1%8F2023-02-09_18.40.45.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/c0f46c85-be26-4bf5-b706-ec286aacf8e7/%E6%88%AA%E5%B1%8F2023-02-09_18.40.45.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055226Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=14ab05f6aa84ef075e80c84337fa740af4270f158f50f0deaaf1bb57bd0997f9&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre></li>
<li><p><a href="https://notion2charts.com/">https://notion2charts.com/</a>：可以关联 Notion 数据库制作图表，但是非会员只能创建一个</p>
<pre><code>    ![notion2charts-hero-image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/38705b7d-ae75-4821-866d-15bf86d6c320/notion2charts-hero-image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055227Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=4e508b12415b91daf61a9cc2aa7b1ef448c426c351bf01bf94e96ed0804b52e3&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre></li>
</ul>
<h1 id="专业技术领域"><a href="#专业技术领域" class="headerlink" title="专业技术领域"></a>专业技术领域</h1><ul>
<li><code>英文</code>尤雨溪大大的 2022 年终复盘：<a href="https://blog.vuejs.org/posts/2022-year-in-review.html">https://blog.vuejs.org/posts/2022-year-in-review.html</a> - 之前上学和刚毕业的时候接触的技术栈都是 Vue，自从换了公司换成 React 了之后很久没关注过 Vue 的更新了，之前好像是刚更新 Vue3 的时候使用了一下，当初可是很热衷于研究 Vue 源码，后面还得找时间研究研究。</li>
<li><code>英文</code>10 Web Development Trends in 2023（2023 年 10 大 Web 发展趋势）：<a href="https://www.robinwieruch.de/web-development-trends/">https://www.robinwieruch.de/web-development-trends/</a></li>
</ul>
<h1 id="Widverse-·-汪汪汪世界"><a href="#Widverse-·-汪汪汪世界" class="headerlink" title="Widverse · 汪汪汪世界"></a>Widverse · 汪汪汪世界</h1><blockquote>
<p>Widverse 是我开发的组件库，支持嵌入 Notion，FlowUs，Wolai，github 等。</p>
</blockquote>
<ul>
<li>目前只更新了几个组件，但是还没有正式开放分享，这周尽量完成并公开分享</li>
<li>本周更新一个模版——记账本，下周还会再更新一个——减肥计划模版</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><ul>
<li>02/06，没想到土耳其一天内发生了 2 次 7.8 级的地震，也看到了大唐哥被埋在酒店的新闻，我真的很爱非正式会谈，他的<code>in my room, on my bed, with my partner</code>这个梗真的很好笑，有种身边的人发生意外的感觉 😭。非正式会谈真的很好看，没有看过的同学可以看一下也是在 B 站。</li>
<li><p>终于排到<code>Notion AI</code>了，接下去就让它给你讲个故事和回答一下本周的话题吧 - 这是一个关于一只小猪的故事，这只小猪有三个兄弟，他们一起住在一个小屋里，每天都很开心快乐。但是有一天，有一只大灰狼来了，想要吃掉这三只小猪，所以他们三兄弟就开始挖穴，把小猪们藏起来，这就是他们的安全之所。大灰狼看到小猪们挖穴，就渐渐地失去信心，然后就再也没有出现过。最后，小猪们平安无事，每天都很开心快乐。 - 有时候，学习的热情会渐渐减弱，这是很正常的。但是有一些方法可以帮助我们保持下去，比如： - 寻找激励：学习需要有激励，找到自己喜欢的东西，比如一个梦想，一个目标，或者一个崇拜的人物，然后把它作为学习的动力，去向它努力奋斗，这样就可以保持热情。 - 找到适合自己的学习方法：每个人都有自己适合的学习方法，要找到自己最适合的学习方法，比如有的人比较适合用看书的方式来学习，有的人比较适合用视频的方式来学习，有的人比较适合用练习的方式来学习，找到自己最适合的学习方法，就可以让学习的热情持续下去。 - 分享学习心得：分享学习心得是一个很好的方式，它可以让我们及时发现自己的不足之处，及时补充，也可以让我们更加深入地理解自己学习的内容，有助于提高学习能力，也可以让我们在学习的过程中得到更多的收获，从而提高学习的热情。</p>
<pre><code>        通过以上几点，我们可以保持良好的学习热情，更好地完成学习任务。
</code></pre></li>
<li><p>02/10，凌晨觉得很不安睡不着，每天都在搜索唐大哥的消息，一直刷实时的微博就希望能有好消息，可是没想到等来的却是坏消息，真的很难过，就像身边的朋友离开了一样。</p>
</li>
</ul>
<h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><p>你平时会通过什么方式保持学习和分享热情？</p>
<p><img src="https://i.hd-r.cn/9f144b95fa5e7e2b4105f7bbd6a511e4.jpg" alt="9f144b95fa5e7e2b4105f7bbd6a511e4.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 5 - 函数组件的生命周期</title>
    <url>/2023/02/26/notion/1866340e4e7a40d/</url>
    <content><![CDATA[<h1 id="忘记-Class-组件的生命周期"><a href="#忘记-Class-组件的生命周期" class="headerlink" title="忘记 Class 组件的生命周期"></a>忘记 Class 组件的生命周期</h1><p>Class 组件和函数组件是两种实现 React 应用的方式，需要忘记 Class 组件的生命周期概念。</p>
<p>React 的本质：<strong>从 Model 到 View 的映射</strong>。</p>
<p>改变组件状态的场景：</p>
<ul>
<li>用户操作</li>
<li>请求返回</li>
</ul>
<p>在函数组件要思考的是当某个状态发生改变时要做什么，而不是在某个生命周期内要做什么。</p>
<h1 id="重新思考组件的生命周期"><a href="#重新思考组件的生命周期" class="headerlink" title="重新思考组件的生命周期"></a>重新思考组件的生命周期</h1><h2 id="构造函数：constructor"><a href="#构造函数：constructor" class="headerlink" title="构造函数：constructor"></a>构造函数：constructor</h2><p>在所有其他代码执行前的一次性初始化工作。</p>
<p>函数组件基本上没有统一的初始化需要，因为 Hooks 自己会负责自己的初始化，然后可以使用 useRef 来标记是否执行过（useRef 的数据在组件渲染过程中不被重置）。</p>
<h2 id="三种常用生命周期方法"><a href="#三种常用生命周期方法" class="headerlink" title="三种常用生命周期方法"></a>三种常用生命周期方法</h2><p>componentDidMount，componentWillUnmount 和 componentDidUpdate 这几个生命周期方法都可以统一到 useEffect 这个 Hook 上（触发一个副作用，在每次 render 之后执行）。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentDidMount + componentDidUpdat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentWillUnmount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>useEffect 接收一个 callback 参数（deps），可以返回一个用于清理资源的函数。</p>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol>
<li>useEffect(callback)接收的这个 callback 函数只在依赖项（deps）改变时执行，而 componentDidUpdate 在 state 发生改变时一定会执行，此时需要手动去判断某个状态是否发生改变。</li>
<li><p>callback 返回的清理函数在下一次依赖项发生变化以及组件销毁之前执行，而 componentWillUnmount 只在组件销毁时执行。</p>
<p>PS：每次 Effect 执行之前都会执行用于清理上一次 Effect 的执行结果。</p>
</li>
</ol>
<h2 id="实际项目使用"><a href="#实际项目使用" class="headerlink" title="实际项目使用"></a>实际项目使用</h2><ol>
<li>类组件和函数组件可以相互引用。</li>
<li>Hooks 很容易转换成高阶组件，并供类组件使用。</li>
</ol>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>如果想在函数组件内实现严格的 componentWillUnmount 即只在销毁时执行，应该如何实现。</p>
<p>我的思路：就是使用空依赖项的 useEffect（✅ 正确）</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 17 - 单元测试 &amp; 常用的第三方工具库</title>
    <url>/2023/08/12/notion/17368c143e824ed/</url>
    <content><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="使用-Jest-和-React-Testing-Library-进行单元测试"><a href="#使用-Jest-和-React-Testing-Library-进行单元测试" class="headerlink" title="使用 Jest 和 React Testing Library 进行单元测试"></a>使用 Jest 和 React Testing Library 进行单元测试</h2><h3 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h3><p>Facebook 推出的 js 但愿测试框架，零配置就能提供并发测试，测试覆盖率，Mock 工具，断言 API 等。</p>
<ul>
<li>Jest 从哪里寻找测试文件</li>
<li>如何创建一个测试用例，并用断言验证测试结果</li>
<li>如何运行测试</li>
</ul>
<p>比如在 src 下有一个 add.js 的文件：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再在 src 目录下创建一个<code>add.test.js</code>文件，Jest 会寻找 src 目录下以<code>.test.js(ts, jsx, tsx)</code>结尾的文件，以及 tests 文件夹内的文件，并将其作为测试文件。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// add.test.js</span>

<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">"./add"</span><span class="token punctuation">;</span>

<span class="token comment">// 使用test函数创建一个测试用例</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"renders learn react link"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Jest提供的expect函数断言结果等于3</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>创建完测试用例之后可以在项目根目录通过命令**</strong><code>npx jest —coverage</code>*<strong>*来运行测试。</strong></p>
<p>但是这仅仅是纯 js 的逻辑测试，对于 React 应用需要浏览器环境的组件需要引入 Test Library 了。</p>
<h3 id="React-Testing-Library"><a href="#React-Testing-Library" class="headerlink" title="React Testing Library"></a>React Testing Library</h3><ol>
<li><strong>需要有一个浏览器运行环境：</strong>主要通过 jsdom 这样一个 npm 模块去实现，可以在 nodejs 环境中提供一个虚拟的浏览器环境。</li>
<li><strong>需要能够解析 JSX</strong></li>
<li><strong>需要能够方便地渲染一个 React 组件，并对结果进行验证</strong></li>
</ol>
<p>项目中自带的 App.test.js：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">,</span> screen <span class="token punctuation">&#125;</span> from ‘<span class="token decorator"><span class="token at operator">@</span><span class="token function">testing</span></span><span class="token operator">-</span>library<span class="token operator">/</span>react’

<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'renders learn react link'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> linkele <span class="token operator">=</span> screen<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">learn react</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>linkele<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTheDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>三个 React 相关的测试 API：</p>
<ul>
<li>render：用于在内存中 render 一个 React 组件</li>
<li>screen：提供工具方法用于获取视频上的元素</li>
<li>expect 扩展：以方便对 UI 元素进行断言判断</li>
</ul>
<h2 id="对自定义-Hooks-进行单元测试"><a href="#对自定义-Hooks-进行单元测试" class="headerlink" title="对自定义 Hooks 进行单元测试"></a>对自定义 Hooks 进行单元测试</h2><p><strong>Hooks 只能在函数组件或者自定义 Hooks 中调用</strong>，所以要对 Hooks 进行单元测试，还是需要借助函数组件。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 对计数器useCounter进行测试</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> fireEvent <span class="token punctuation">&#125;</span> from ‘<span class="token decorator"><span class="token at operator">@</span><span class="token function">testing</span></span><span class="token operator">-</span>library<span class="token operator">/</span>react’

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'useCounter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">testComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> decrement <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token punctuation">(</span>
			<span class="token operator">&lt;</span><span class="token operator">></span>
				<span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn-dec"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>decrement<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
				<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
				<span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn-inc"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>increment<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
			<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
		<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>testComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>

	<span class="token keyword">const</span> btnDec <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn-dec'</span><span class="token punctuation">)</span>
	<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span>

	fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>btnDec<span class="token punctuation">)</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span><span class="token string">'-1'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如何更直接操锁 Hooks 的 API 呢，可以将 Hook 的返回值暴露道函数组件外：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 对计数器useCounter进行测试</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> fireEvent <span class="token punctuation">&#125;</span> from ‘<span class="token decorator"><span class="token at operator">@</span><span class="token function">testing</span></span><span class="token operator">-</span>library<span class="token operator">/</span>react’

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'useCounter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> hookResult <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">testComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		Objext<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>hookResult<span class="token punctuation">,</span> <span class="token function">useCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token keyword">null</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>testComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>

	<span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		hookResult<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token function">expect</span><span class="token punctuation">(</span>hookResult<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Testinfg Library 也提供了 Hooks 测试包：<code>@testing-library/react-hooks</code></p>
<p>该测试包提供了 renderHook 和 act 等方法，能够更加语义化地去创建自定义 Hooks 的单元测试。</p>
<h1 id="常用的第三方工具库"><a href="#常用的第三方工具库" class="headerlink" title="常用的第三方工具库"></a>常用的第三方工具库</h1><h2 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h2><p>它提供了非常多的工具函数，可以大大提高开发效率。</p>
<h3 id="使用-keyBy-将数组快速转换成对象"><a href="#使用-keyBy-将数组快速转换成对象" class="headerlink" title="使用 keyBy 将数组快速转换成对象"></a>使用 keyBy 将数组快速转换成对象</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"Ken"</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span> <span class="token string">"Hangzhou"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">"Kenny"</span><span class="token punctuation">,</span>
    city<span class="token operator">:</span> <span class="token string">"Guangzhou"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 将其变成一个以name为key的map结构</span>
<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span>
<span class="token keyword">const</span> byName <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="使用-debounce-函数，实现输入防抖"><a href="#使用-debounce-函数，实现输入防抖" class="headerlink" title="使用 debounce 函数，实现输入防抖"></a>使用 debounce 函数，实现输入防抖</h3><p>可以实现只有在用户停止输入后一个很短的时间内才进行 change 操作，以保证更好的用户体验。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>_<span class="token punctuation">.</span><span class="token function">dobounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setSearch</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用-template-实现简单的模版引擎"><a href="#使用-template-实现简单的模版引擎" class="headerlink" title="使用 template 实现简单的模版引擎"></a>使用 template 实现简单的模版引擎</h3><p>可以方便地实现一些复杂的字符串生成。</p>
<p>可以参考相关的<a href="https://www.lodashjs.com/">官方文档</a>。</p>
<h2 id="UI-库：Ant-Design-和-Material-UI"><a href="#UI-库：Ant-Design-和-Material-UI" class="headerlink" title="UI 库：Ant Design 和 Material UI"></a>UI 库：Ant Design 和 Material UI</h2><ul>
<li>Material UI：采用了 Google 的 Material Design 的设计语言，但是它的<strong>组件库缺少一些高级的功能</strong>。</li>
<li>Ant Design：主打企业级应用的场景，提供了各种高级组件，可以满足企业级的复杂交互应用场景。</li>
</ul>
<h2 id="react-use"><a href="#react-use" class="headerlink" title="react-use"></a>react-use</h2><h3 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h3><p>获取 URL 中的查询字符串。</p>
<h3 id="useEvent"><a href="#useEvent" class="headerlink" title="useEvent"></a>useEvent</h3><p>如果用 DOM 的原生 API 去绑定事件，通常需要在组件创建时去监听，再在销毁时取消监听。useEvent 封装了这个逻辑：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">useEvent</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> onHashChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="useCookie"><a href="#useCookie" class="headerlink" title="useCookie"></a>useCookie</h3><p>它可以方便地去读取，更新或者删除某个 Cookie。</p>
<h3 id="usePrevious"><a href="#usePrevious" class="headerlink" title="usePrevious"></a>usePrevious</h3><p>获取某个 state 的上一个值。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 7 - 全局状态管理 Redux</title>
    <url>/2023/07/15/notion/29fcc85925db44c/</url>
    <content><![CDATA[<p><strong>Redux 是状态管理框架，基于不可变数据的机制。</strong></p>
<h1 id="Redux-的出现背景"><a href="#Redux-的出现背景" class="headerlink" title="Redux 的出现背景"></a>Redux 的出现背景</h1><p>原先的数据传递：组件级别的 state，从上而下的 props 两个状态机制。</p>
<p>但是无法满足类似跨层级的组件数据共享和传递。</p>
<h2 id="Redux-Store-的特点"><a href="#Redux-Store-的特点" class="headerlink" title="Redux Store 的特点"></a>Redux Store 的特点</h2><ul>
<li><strong>Redux Store 是全局唯一的。</strong></li>
<li><strong>Redux Store 是树状结构。</strong></li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>跨组件的状态共享</li>
<li>同组件多个实例的状态共享</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul>
<li>State：即 Store</li>
<li>Action：用于描述发生的动作</li>
<li>Reducer：接受 Action 和 State 作为参数通过计算得到新的 Store</li>
</ul>
<h2 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h2><ul>
<li>保证数据的不可变性：<strong>在 Reducer 内每次必须返回一个新的对象</strong></li>
<li>可预测性</li>
<li>易于调试：可以跟踪 Store 中数据的变化</li>
</ul>
<h2 id="Redux-逻辑步骤"><a href="#Redux-逻辑步骤" class="headerlink" title="Redux 逻辑步骤"></a>Redux 逻辑步骤</h2><ul>
<li>创建 store</li>
<li>利用 Action 和 Reducer 修改 Store</li>
<li>利用 subscribe 监听 store 变化</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initStore<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"counter/incremented"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"counter/decremented"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> incrementAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"counter/incremented"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> decrementAction <span class="token operator">=</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"counter/decremented"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>incrementAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>incrementAction<span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>decrementAction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul>
<li>React 组件能在依赖的 Store 的数据发生变化时重新 render</li>
<li>在 React 组件中，能够在某些时机去 dispatch 一个 action，从而出发 store 的更新</li>
</ul>
<p><strong>需要在 React 内引入 react-redux 工具库，让 React 和 Redux 实现互通。</strong></p>
<p>为了确保需要绑定的组件能够访问到全局唯一的 Redux Store，需要利用 React 的 Context 机制去存放 Store 信息。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>
  rootElement
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>然后就可以利用 react-redux 提供的**</strong><code>useSelector</code>*<strong>*和**</strong><code>useDispatch</code>*<strong>*两个 Hooks 来使用 Redux 了。</strong></p>
<ul>
<li><code>useSelector</code>：让组件在 Store 的某些数据发生变化时重新 render</li>
</ul>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD
  Reducer <span class="token arrow operator">--></span> Store
	Store <span class="token arrow operator">--></span> View
	View <span class="token arrow operator">--></span> Action
	Action <span class="token arrow operator">--></span> Reducer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="利用-Redux-处理异步逻辑（异步-Action）"><a href="#利用-Redux-处理异步逻辑（异步-Action）" class="headerlink" title="利用 Redux 处理异步逻辑（异步 Action）"></a>利用 Redux 处理异步逻辑（异步 Action）</h1><p>在 Store 内我们不仅维护着业务数据同时维护着应用程序的状态。</p>
<p>store 的主要变化：</p>
<ul>
<li>请求发送时：设置<code>state.pending = true</code> → 用于 UI 显示加载中状态</li>
<li>请求发送成功：设置<code>state.pending = false, state.data = result</code> → 取消加载状态同时将获取的数据展示在 UI 上</li>
<li>请求发送失败：设置<code>state.pending = false, state.error = error</code> → 取消加载状态，设置错误状态和信息，用于在 UI 上显示错误内容</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">DataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_START"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_SUCCESS"</span><span class="token punctuation">,</span> data<span class="token operator">:</span> res <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_ERROR"</span><span class="token punctuation">,</span> error<span class="token operator">:</span> err <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> pending <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> pending<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=></span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Error"</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pending<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Table data<span class="token operator">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上述代码中使用三个同步 Action 完成这个异步请求的场景，这里将 store 完全作为一个存放数据的地方。</p>
<p>发送请求获取数据并进行错误处理的逻辑是不可重用的，如果在另一个组件中也使用同样的请求就需要在组件内重新实现一遍。</p>
<p>因此 Redux 提供了<strong>middleware</strong>机制可以巧妙地实现异步 Action 的概念。</p>
<p>middleware 可以让你提供一个拦截器在 reducer 处理 action 之前被调用，在拦截器内可以自由地处理获得的 action。</p>
<p><strong>Action → Middleware → Reducer</strong></p>
<p>然后 Redux 提供了 react-thunk 的中间件，它如果发现接收到的 action 是一个函数，那么就不会传递给 reducer 而是执行这个函数，并把 dispatch 作为参数传给这个函数。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> thunkMiddleware <span class="token keyword">from</span> <span class="token string">"redux-thunk"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> composedEnhancer <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunkMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> composeEnhancer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_START"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_SUCCESS"</span><span class="token punctuation">,</span> data<span class="token operator">:</span> res <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">"FETCH_ERROR"</span><span class="token punctuation">,</span> error<span class="token operator">:</span> err <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">DataList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>通过这种方式就可以实现异步请求的重用，这一套结合 redux-thunk 中间件的机制称之为异步 Action（更像是 Redux 的使用模式，通过组合使用同步 Action 用一致的方式提供处理异步逻辑的方案）。</strong></p>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>只考虑 Redux，如何在计数器内实现指定的变量值。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 6 - 典型的使用场景</title>
    <url>/2023/07/10/notion/3666e4e0a1f04db/</url>
    <content><![CDATA[<p>在开发前需要思考：<strong>这个功能的哪些逻辑可以抽出成为独立的 Hooks</strong>。</p>
<p>Hooks 核心优点：</p>
<ol>
<li>方便进行逻辑复用</li>
<li>帮助关注分离</li>
</ol>
<h1 id="自定义-Hooks"><a href="#自定义-Hooks" class="headerlink" title="自定义 Hooks"></a>自定义 Hooks</h1><p>方法：声明一个名字<strong>以 use 开头</strong>的函数，且在函数内使用到了其他 Hooks，如果没有使用到其他 Hooks 那它就是一个普通函数。</p>
<p><strong>一方面可以实现逻辑复用，另一方便可以使代码更加语义化。</strong></p>
<h1 id="三个典型的业务场景"><a href="#三个典型的业务场景" class="headerlink" title="三个典型的业务场景"></a>三个典型的业务场景</h1><h2 id="封装通用逻辑：useAsync"><a href="#封装通用逻辑：useAsync" class="headerlink" title="封装通用逻辑：useAsync"></a>封装通用逻辑：useAsync</h2><p>发起异步请求获取数据并显示在界面上，data，loading，error 三个状态逻辑可以作为通用逻辑。</p>
<p>可以自己写一下</p>
<p>优点：在 Hooks 中可以管理当前组件的 state，从而使更多的逻辑写在可重用的 Hooks 内，而普通的工具类是无法修改组件 state 地，那么就无法在数据改变时触发组件的重新渲染。</p>
<h2 id="监听浏览器状态：useScroll"><a href="#监听浏览器状态：useScroll" class="headerlink" title="监听浏览器状态：useScroll"></a>监听浏览器状态：useScroll</h2><p>如：界面需要根据窗口大小变化重新布局 / 页面滚动时根据滚动位置显示「返回顶部」的按钮。</p>
<p><strong>可以让 React 的组件绑定在任何可能的数据源上，这样当数据源发生变化时，组件能够重新渲染。</strong></p>
<h2 id="拆分复杂组件"><a href="#拆分复杂组件" class="headerlink" title="拆分复杂组件"></a>拆分复杂组件</h2><p>目的：保持每个函数的短小不一定是为了逻辑复用，仅仅为了业务逻辑的隔离。</p>
<p><strong>尽量将相关的逻辑做成独立的 Hook，然后在函数组件中使用这个 Hooks，通过参数的传递和返回值让 Hooks 之间完成交互。</strong></p>
<p>PS：所以此类 Hooks 可以和函数组件写在一个文件内。</p>
<p>可以仔细研究一下这里的例子代码</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>四个使用场景</p>
<ol>
<li>抽取业务逻辑</li>
<li>封装通用逻辑</li>
<li>监听浏览器状态</li>
<li>拆分复杂组件</li>
</ol>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>将 useCounter 转换为更灵活的自定义增加或减少数字，如何实现？</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">useCounter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> step<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> increment <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>▪️ Notion公式2.0扫盲教程vol.01 - 基本数据类型（一）</title>
    <url>/2024/04/19/notion/4460b8e226bf4f3/</url>
    <content><![CDATA[<blockquote>
<p><strong>该系列将会持续更新，我会整理以及和大家分享我平时的常用公式</strong></p>
<p>Notion 公式是 Database 数据库最重要的功能之一，在 Notion 数据库中，我们可以通过添加一个公式属性，来基于其他属性进行运行各种计算和函数，来操作现有数据并得出许多其他有用的值，是<strong>计算，状态展示，数据汇总</strong>的最重要的用法。</p>
<p>本文章希望能通过简洁，通俗的介绍 Notion 基本使用方法，以及通过多例子给大家以 Notion 公式参考，帮助大家了解 Formula 相关的<strong>术语</strong>和<strong>函数</strong>解释以及用法。</p>
</blockquote>
<hr>
<p><strong>❗️ 官方介绍文档</strong><br><a href="https://www.notion.so/help/guides/new-formulas-whats-changed" title="Formulas 2.0-bookmark">Formulas 2.0: How to use Notion’s new and improved formulas with your existing setups</a></p>
<h1 id="添加公式属性"><a href="#添加公式属性" class="headerlink" title="添加公式属性"></a>添加公式属性</h1><p>如果想要给 Database 编写公式，我们需要先添加一个公式属性到我们的目标 Database：</p>
<ul>
<li>单击数据库上的 ••• 菜单</li>
<li>选择“Property”，然后单击“+ Add Property”</li>
<li>选择 Formula</li>
<li>单击“Edit”，然后开始编写公式</li>
</ul>
<h1 id="公式编辑器"><a href="#公式编辑器" class="headerlink" title="公式编辑器"></a>公式编辑器</h1><p>当我们添加了公式属性之后，点击公式区域就可以打开我们的公式编辑器，我们的公式编辑器是由 4 部分组成：</p>
<ul>
<li>公式编辑框：我们可以在编辑框输入我们的公式，在这里输入的公式一旦超过编辑器的宽度公式就会换行，但也可以使用 Shift + Enter 创建一个新行！</li>
<li>公式功能目录：该模块包含了公式的 4 种元素，点击对应的元素就会自动在公式编辑框添加该元素 - 属性（Properties）：即我们在 database 内添加的属性列； - 常量（Constants）：即我们的数学常量，如 e，π（在公式内使用 pi 进行表示）； - 操作符（Operators）：即加减乘除类的运算符号等； - 函数/方法（Functions）：即一些已经设定好的运算形式；</li>
<li>公式示例区：当鼠标悬浮或者选择在某个元素之上时，编辑框右侧就会出现该元素的使用介绍以及示例；</li>
<li>公式预览区：打开公式编辑器，如果存在公式内容，则会看到该行公式结果的实时预览，如果公式不正确该区域也会显示错误并突出显示错误的代码，以便我们识别问题的根源。</li>
</ul>
<h1 id="公式数据"><a href="#公式数据" class="headerlink" title="公式数据"></a>公式数据</h1><blockquote>
<p>公式可以操作和返回不同的数据类型，比如如果最后返回的是布尔值则会以勾选框的形式进行显示，如果最后返回的是页面则会直接显示页面引用链接。</p>
</blockquote>
<h2 id="⤵️-公式可返回的-7-种数据类型："><a href="#⤵️-公式可返回的-7-种数据类型：" class="headerlink" title="⤵️  公式可返回的 7 种数据类型："></a>⤵️  公式可返回的 7 种数据类型：</h2><ul>
<li>String（字符串文本）：就是我们的文本内容</li>
<li>Number（数字）：就是数字结果，比如两个数值的和，差等，可用于数学运算</li>
<li>Boolean（布尔值）：即是非（true/false），比如<code>2&gt;1</code>这个公式输出的结果就是 false</li>
<li>Date（日期）：日期格式，可用于日期计算，格式化等等</li>
</ul>
<p><strong><code>- 以下为公式2.0新增返回格式 -</code></strong></p>
<ul>
<li><strong>Page（页面）：即 Notion 页面，显示为带有页面图标的页面链接</strong></li>
<li><strong>People（人员）：即在 Notion 内注册的用户，显示为带有头像的人的名字。</strong></li>
<li><strong>Array/List（数组/列表）：表示一个集合，比如 relations 就是一个关联页面集合，默认在公式内会以逗号分隔显示</strong></li>
</ul>
<p>PS：在原来的 Notion 内公式只能处理同一类型的数据，比如文本拼接，数字运算等，如果需要对不同类型进行操作则需要使用 format 或者 toNumber 这类方法进行类型的强制转换，但是<strong>在公式 2.0 内若存在多种数据类型则会自动进行强制转换为文本</strong>。</p>
<h2 id="🔢-常量"><a href="#🔢-常量" class="headerlink" title="🔢 常量"></a>🔢 常量</h2><ul>
<li>e（自然常数）：是一个无限不循环小数，且为超越数，其值约为2.718281828459045（在公式中使用<code>e()</code>表示）。</li>
<li>π（圆周率）：约等于3.141592654，是代表圆周长和直径的比值（在公式中使用<code>pi()</code>进行表示）。</li>
<li>true（真）：常用于逻辑运算表示成立，checkbox被勾选后的状态就是true，若使用toNumber()转换为数字的话，true会被转换为1（在公式中直接使用<code>true</code>进行表示）。</li>
<li>false（假）：与true相反，表示不成立，checkbox未勾选的状态就是false，若使用toNumber()转换为数字的话，false会被转换为0（在公式中直接使用<code>false</code>进行表示）。</li>
</ul>
<h2 id="➕-运算符-包括算术运算符，逻辑运算符等"><a href="#➕-运算符-包括算术运算符，逻辑运算符等" class="headerlink" title="➕ 运算符(包括算术运算符，逻辑运算符等)"></a>➕ 运算符(包括算术运算符，逻辑运算符等)</h2><p><strong>❗️符号全为半角英文符号。</strong></p>
<ul>
<li>算术运算符<ul>
<li>+（<code>add()</code>）：加号，用于数字相加运算或者字符串拼接，如<code>”Hello ”+”world”</code> 的结果就是<code>”Hello world”</code></li>
<li>-（<code>subtract()</code>）：减号，用于数字相减计算</li>
<li>*（<code>multiply()</code>）：乘号，用于数字相乘计算</li>
<li>/（<code>divide()</code>）：除号，用于数字相除</li>
<li>%（<code>mod()</code>）：取余，<code>18%4</code>表示18对4进行取余数，结果为2</li>
<li>^（<code>pow()</code>）：乘方，幂运算表示几次方，如<code>2^8</code>，即表示2的8次方</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>!（<code>not</code>）：表示取反操作，<code>!true</code>结果为<code>false</code></li>
<li>&amp;&amp;（<code>and()</code>）：表示与运算，当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false，比如<code>123&amp;&amp;0</code>那么结果就是false，因为我上面有讲到在计算机中0就代表false。</li>
<li>||（<code>or()</code>）：表示或运算，当运算符两边的表达式的有true时，整个运算结果就为true</li>
<li>==（<code>equal()</code>）：表示等于比较</li>
<li>!=（<code>unequal()</code>）：表示不等于比较</li>
<li>>，&lt;，&gt;=，&lt;=：表示大于，小于，大于等于，小于等于比较</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Notion</category>
      </categories>
      <tags>
        <tag>Notion</tag>
        <tag>Notion Formula</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪周刊 004期：怎么停止精神内耗</title>
    <url>/2023/02/20/notion/365de9a2d274438/</url>
    <content><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/560bd117-80ad-4b0e-bac7-73a9319fe47e/IMG_5974.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055227Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=bba78a5062040155b93c525e58ef021e9885b9070c76b293b1a5d0879661f999&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="IMG_5974.jpg"></p>
<h3 id="Hello，大家好，这里是阿汪同学。"><a href="#Hello，大家好，这里是阿汪同学。" class="headerlink" title="Hello，大家好，这里是阿汪同学。"></a>Hello，大家好，这里是阿汪同学。</h3><h3 id="本期关键词：-焦糖布丁"><a href="#本期关键词：-焦糖布丁" class="headerlink" title="本期关键词： 焦糖布丁"></a>本期关键词： 焦糖布丁</h3><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>每天晚上睡觉前总会</p>
<p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h1 id="专业技术领域"><a href="#专业技术领域" class="headerlink" title="专业技术领域"></a>专业技术领域</h1><h1 id="Widverse-·-汪汪汪世界"><a href="#Widverse-·-汪汪汪世界" class="headerlink" title="Widverse · 汪汪汪世界"></a>Widverse · 汪汪汪世界</h1><blockquote>
<p>Widverse 是我开发的组件库，支持嵌入 Notion，FlowUs，Wolai，github 等。</p>
</blockquote>
<ul>
<li>开放倒计时组件分享</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><p><img src="https://i.hd-r.cn/9f144b95fa5e7e2b4105f7bbd6a511e4.jpg" alt="9f144b95fa5e7e2b4105f7bbd6a511e4.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>▪️ 用Notion Collector快捷摘录网页内容到自己的Notion吧！</title>
    <url>/2024/04/12/notion/4d54c7a3a5144ce/</url>
    <content><![CDATA[<blockquote>
<p>‼️ <strong>本插件目前仅支持 Chrome（谷歌浏览器）v115 以上使用！</strong></p>
</blockquote>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote>
<p>因为在日常的工作学习中经常需要看一些技术文章，官方文档或者 Bug 解决方法文章，原来也一直在使用 Notion 出的 Notion Web Clipper 进行文章摘录。</p>
<p>但是有时候觉得收录整篇文章不太适合我整理知识点，所以就想自己开发一个可以摘录网页文字段落到 Notion Database 的插件——Notion Collector。</p>
</blockquote>
<h1 id="版本功能说明"><a href="#版本功能说明" class="headerlink" title="版本功能说明"></a>版本功能说明</h1><blockquote>
<p>Notion Collector <code>v1.0</code> 2023-08-15T14:53:00.000+08:00</p>
<ul>
<li><p>支持绑定多个数据库（最多 3 个）</p>
</li>
<li><p><strong>支持网页选中文字自动摘录</strong></p>
</li>
<li><p>支持摘录时设置标签等信息</p>
</li>
</ul>
</blockquote>
<pre><code>- 支持绑定多个数据库（最多3个）
- **支持网页选中文字自动摘录**
- 支持摘录时设置标签等信息
</code></pre><h1 id="下载并安装-Notion-Collector"><a href="#下载并安装-Notion-Collector" class="headerlink" title="下载并安装 Notion Collector"></a>下载并安装 Notion Collector</h1><h2 id="1-下载地址（更新中…）"><a href="#1-下载地址（更新中…）" class="headerlink" title="1. 下载地址（更新中…）"></a>1. 下载地址（更新中…）</h2><ul>
<li><a href="https://github.com/httIsHere/Notion-Collector-v3/releases/tag/v1.0.3">Notion-Collector-1.0.3</a> <code>最新</code> ：修复保存来源网址不正确问题</li>
<li><a href="https://github.com/httIsHere/Notion-Collector-v3/releases/tag/v1.0.2">Notion-Collector-1.0.2</a>：优化了部分问题</li>
<li><a href="https://github.com/httIsHere/Notion-Collector-v3/releases/tag/v1.0.1">Notion-Collector-1.0.1</a>：修复绑定数据库失败的问题</li>
<li><a href="https://github.com/httIsHere/Notion-Collector-v3/releases/tag/Alpha-1.0.0">Notion-Collector-1.0.0</a></li>
</ul>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/03043803-d012-4a17-abdb-269195174f2d/%E6%88%AA%E5%B1%8F2023-08-17_17.31.59.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=7acee4698f24701cea9c7e129f2f44741cfde60352ead590005f50508ba2331c&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="请选择其中一个文件进行下载并解压！"></p>
<h2 id="2-打开浏览器的扩展程序"><a href="#2-打开浏览器的扩展程序" class="headerlink" title="2. 打开浏览器的扩展程序"></a>2. 打开浏览器的扩展程序</h2><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/80989688-660f-478c-bc90-5bf11843403d/%E6%88%AA%E5%B1%8F2023-08-14_21.39.06.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=a48929c700dd2c4bd33be1a732b5a5185ee0089812b72c38e56b5b98384e69a2&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-14_21.39.06.png"></p>
<h2 id="3-点击左上角的「加载已解压的扩展程序」按钮选择下载并解压了的插件包"><a href="#3-点击左上角的「加载已解压的扩展程序」按钮选择下载并解压了的插件包" class="headerlink" title="3. 点击左上角的「加载已解压的扩展程序」按钮选择下载并解压了的插件包"></a>3. 点击左上角的「加载已解压的扩展程序」按钮选择下载并解压了的插件包</h2><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/2e14dbfc-df3d-40a5-a7ae-56d08e3ad38d/%E6%88%AA%E5%B1%8F2023-08-17_10.26.44.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=b80c72dd892e214d4f5449dc306f4751023cd6627a48d073be1fb3ce94c894a5&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-17_10.26.44.png"></p>
<p>加载成功后会出现：</p>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/d1ae8b0f-9f5c-413f-a435-c87b596f90f9/%E6%88%AA%E5%B1%8F2023-08-17_10.26.51.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=b0ece6a6a5f11b89a1f38de1b6f0c9ea6c0884859e2fc3ef29e7627c9db2a09b&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-17_10.26.51.png"></p>
<h2 id="4-将插件展示的工具栏"><a href="#4-将插件展示的工具栏" class="headerlink" title="4. 将插件展示的工具栏"></a>4. 将插件展示的工具栏</h2><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/e7030253-8bc9-486b-b2af-93fc59cdb16b/%E6%88%AA%E5%B1%8F2023-08-17_10.28.18.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=6695a91643146b747a5e3d1d89e30411c8ed8d28f2acbfed42a0402f8b56b009&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-17_10.28.18.png"></p>
<p>然后可以直接点击扩展图标打开扩展面板！</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="第一步：创建自己的Integration"><a href="#第一步：创建自己的Integration" class="headerlink" title="第一步：创建自己的Integration"></a>第一步：创建自己的<strong>Integration</strong></h2><h3 id="1-打开Integration网页"><a href="#1-打开Integration网页" class="headerlink" title="1. 打开Integration网页"></a>1. 打开<a href="https://www.notion.so/my-integrations">Integration</a>网页</h3><h3 id="2-点击左侧的「-New-integration」按钮"><a href="#2-点击左侧的「-New-integration」按钮" class="headerlink" title="2. 点击左侧的「+ New integration」按钮"></a>2. 点击左侧的「+ New integration」按钮</h3><h3 id="3-填写Integration-名称以及对应的工作区，然后点击-submit-按钮进行提交"><a href="#3-填写Integration-名称以及对应的工作区，然后点击-submit-按钮进行提交" class="headerlink" title="3. 填写Integration 名称以及对应的工作区，然后点击 submit 按钮进行提交"></a>3. 填写<strong>Integration 名称以及对应的工作区，然后点击 submit 按钮进行提交</strong></h3><h3 id="4-然后可以看到创建的-integration，如下图"><a href="#4-然后可以看到创建的-integration，如下图" class="headerlink" title="4. 然后可以看到创建的 integration，如下图"></a>4. 然后可以看到创建的 integration，如下图</h3><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/61b1300a-d594-4bfe-8843-71227e99adf4/%E6%88%AA%E5%B1%8F2023-08-14_21.08.46.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=cf54632d8c8c864e1e1fdc4dc108d59baa0e63c73a3414e5c7074bede42bc160&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-14_21.08.46.png"></p>
<h3 id="5-复制-“Internal-Integration-Token”填入插件的「绑定-Notion」内的-Integration-Token-输入框内"><a href="#5-复制-“Internal-Integration-Token”填入插件的「绑定-Notion」内的-Integration-Token-输入框内" class="headerlink" title="5. 复制 “Internal Integration Token”填入插件的「绑定 Notion」内的 Integration Token 输入框内"></a>5. 复制 “Internal Integration Token”填入插件的「绑定 Notion」内的 Integration Token 输入框内</h3><h2 id="第二步：将你的-Database-分享给这个-Integration"><a href="#第二步：将你的-Database-分享给这个-Integration" class="headerlink" title="第二步：将你的 Database 分享给这个 Integration"></a>第二步：将你的 Database 分享给这个 Integration</h2><p>进入你的目标 database，点击右上角的三点打开菜单，滚动至底部，点击「+ Add Connections」，并选择你刚刚创建的 Integration。</p>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/c7e6a1af-a484-4653-b237-38ac6b1db73e/%E6%88%AA%E5%B1%8F2023-08-14_21.14.45.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=beb9be91c15ac949d473fc2dd37ccfadb3fbfdbc47ad0398685baffd492f3072&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-14_21.14.45.png"></p>
<p><strong>然后现在就可以通过你新增的集成直接访问你的数据库啦～</strong></p>
<h2 id="第三步：获取-Database-ID-绑定到-Notion-Collector"><a href="#第三步：获取-Database-ID-绑定到-Notion-Collector" class="headerlink" title="第三步：获取 Database ID 绑定到 Notion Collector"></a>第三步：获取 Database ID 绑定到 Notion Collector</h2><p>也是同样的<strong>进入你的目标 database</strong>，点击右上角的三点打开菜单，点击 Copy link 复制你的数据库连接，然后输入到插件内的 Database ID 输入框（会自动解析你的数据库 id）。</p>
<p><strong>使用这个**</strong><code>open as full page</code>*<strong>*进入你的目标 Database。</strong></p>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/be809372-d714-4f1c-8a95-3fdc64320fe7/%E6%88%AA%E5%B1%8F2023-08-18_15.37.56.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=a560e2c1df7732e7bfee0d370304fc92efecba375257e34ccc4880a492251557&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-18_15.37.56.png"></p>
<p>⚠️ 请保证你的数据库有这 4 个字段：</p>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/9b23c215-2580-4a06-8f15-d5770df0cd62/%E6%88%AA%E5%B1%8F2023-08-18_15.50.52.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=fe99b33faa91cb30f2c077737063fc8a0a74fe58a9b4ac0159af3a70477ba40d&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-18_15.50.52.png"></p>
<h2 id="第四步：绑定数据开始使用"><a href="#第四步：绑定数据开始使用" class="headerlink" title="第四步：绑定数据开始使用"></a>第四步：绑定数据开始使用</h2><p><strong>输入 Integration token 和 Database ID 后就可以点击保存，现在就可以直接在网页上摘录你的内容到你的 database 啦～</strong></p>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/82ad468a-c72c-4cb4-9127-4b9357aff32d/%E6%88%AA%E5%B1%8F2023-08-14_21.21.39.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055223Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=6520600575b5f77d72b9bcea6045df3e59568b40a44647bc18c9c81fb1a6509a&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="%E6%88%AA%E5%B1%8F2023-08-14_21.21.39.png"></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Notion</tag>
        <tag>浏览器插件</tag>
      </tags>
  </entry>
  <entry>
    <title>▪️ 【Notion】同步博客图片过期？！阿里云OSS+PicGo搭建自己的高性能图床</title>
    <url>/2024/04/17/notion/5684d5528edd49c/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我一直是以 Notion 作为我写博客的编辑器，然后为了防止由于 notion 访问状态不佳导致无法查看，所以我通过 Notion API 将我的文章内容拉取到本地直接同步推送到我的个人博客站点，但是一直有一个问题就是 Notion 上上传的图片是携带签名的防盗链，在一定时间会过期而导致博客站点所有图片全部失效。</p>
<p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.00.31.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.00.31.png"></p>
<h1 id="图床外链"><a href="#图床外链" class="headerlink" title="图床外链"></a>图床外链</h1><p>所以接下去我将使用其他的资源服务作为我的图床，通过添加外链图片实现图片有效访问，我这里使用的是阿里云 OSS，当然也可以选择其他资源。</p>
<p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.05.51.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.05.51.png"></p>
<h1 id="阿里云-OSS-PicGo-搭建图床"><a href="#阿里云-OSS-PicGo-搭建图床" class="headerlink" title="阿里云 OSS+PicGo 搭建图床"></a>阿里云 OSS+PicGo 搭建图床</h1><h2 id="阿里云-OSS-对象存储-OSS-资源包"><a href="#阿里云-OSS-对象存储-OSS-资源包" class="headerlink" title="阿里云 OSS - 对象存储 OSS 资源包"></a>阿里云 OSS - 对象存储 OSS 资源包</h2><h3 id="1-对于日常博客书写使用的话-40G-足矣，所以我直接购买-5-年。"><a href="#1-对于日常博客书写使用的话-40G-足矣，所以我直接购买-5-年。" class="headerlink" title="1. 对于日常博客书写使用的话 40G 足矣，所以我直接购买 5 年。"></a>1. 对于日常博客书写使用的话 40G 足矣，所以我直接购买 5 年。</h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.09.01.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.09.01.png"></p>
<h3 id="2-购买完成后进入控制台就可以进行Bucket-创建"><a href="#2-购买完成后进入控制台就可以进行Bucket-创建" class="headerlink" title="2. 购买完成后进入控制台就可以进行Bucket 创建"></a>2. 购买完成后进入<a href="https://oss.console.aliyun.com/overview"><strong>控制台</strong></a>就可以进行<a href="https://oss.console.aliyun.com/bucket"><strong>Bucket 创建</strong></a></h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.13.18.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.13.18.png"></p>
<h3 id="3-在控制台创建-AccessKey-ID-和-AccessKey-Secret，保存好自己的-key"><a href="#3-在控制台创建-AccessKey-ID-和-AccessKey-Secret，保存好自己的-key" class="headerlink" title="3. 在控制台创建 AccessKey ID 和 AccessKey Secret，保存好自己的 key"></a>3. 在<a href="https://ram.console.aliyun.com/manage/ak">控制台创建 AccessKey ID 和 AccessKey Secret</a>，保存好自己的 key</h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.18.56.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.18.56.png"></p>
<h2 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h2><h3 id="1-下载PicGo并安装"><a href="#1-下载PicGo并安装" class="headerlink" title="1. 下载PicGo并安装"></a>1. 下载<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>并安装</h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.22.36.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.22.36.png"></p>
<h3 id="2-进入阿里云-OSS-进行配置"><a href="#2-进入阿里云-OSS-进行配置" class="headerlink" title="2. 进入阿里云 OSS 进行配置"></a>2. 进入阿里云 OSS 进行配置</h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.24.39.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.24.39.png"></p>
<h3 id="3-最后在上传区上传图片"><a href="#3-最后在上传区上传图片" class="headerlink" title="3. 最后在上传区上传图片"></a>3. 最后在上传区上传图片</h3><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.27.27.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.27.27.png"></p>
<p>上传图片之后生成的图片链接或者其他格式会直接到我们的剪贴板，然后我们就可以直接到 Notion 内进行插入。</p>
<h1 id="Notion-图片同步我们的图床链接"><a href="#Notion-图片同步我们的图床链接" class="headerlink" title="Notion 图片同步我们的图床链接"></a>Notion 图片同步我们的图床链接</h1><p>最后我们在同步文章内容的时候图片使用的就是我们的图床图片链接，再也不用担心会过期，完美！</p>
<p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.29.22.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.29.22.png"></p>
<p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F2024-04-17%2012.31.58.png" alt="%E6%88%AA%E5%B1%8F2024-04-17%2012.31.58.png"></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Notion</tag>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 1 - 用Hooks的角度去转变开发思路</title>
    <url>/2023/01/30/notion/6ed49a2adc864d8/</url>
    <content><![CDATA[<h2 id="React-两个颠覆性创新点"><a href="#React-两个颠覆性创新点" class="headerlink" title="React 两个颠覆性创新点"></a>React 两个颠覆性创新点</h2><ul>
<li>虚拟 DOM 机制</li>
<li>JSX 语法</li>
</ul>
<h2 id="Hooks-出现之前的业务逻辑复用方式"><a href="#Hooks-出现之前的业务逻辑复用方式" class="headerlink" title="Hooks 出现之前的业务逻辑复用方式"></a>Hooks 出现之前的业务逻辑复用方式</h2><p>在组件内的不同生命周期中做时间监听的绑定和解绑。</p>
<h2 id="引入-Hooks-之后"><a href="#引入-Hooks-之后" class="headerlink" title="引入 Hooks 之后"></a>引入 Hooks 之后</h2><p>只需要通过 Hooks 的方式进行封装，将其变成一个可绑定的数据源，这样函数组件就具备了状态管理，生命周期管理等能力。</p>
<h2 id="Hooks-的学习路径"><a href="#Hooks-的学习路径" class="headerlink" title="Hooks 的学习路径"></a>Hooks 的学习路径</h2><ol>
<li>全局认知：Hooks 的功能边界，什么功能要用 Hooks 去做</li>
<li>核心概念和原理：应对实际复杂业务问题的关键能力</li>
<li>实战：把原理和实际业务场景结合起来，掌握 Hooks 的思考方式</li>
</ol>
<p><img src="https://i.hd-r.cn/fa23b9c56bc62fe4a0bbd40777b6a67a.jpg" alt="fa23b9c56bc62fe4a0bbd40777b6a67a.jpg"></p>
<h2 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h2><h3 id="基础篇：抓住问题本质，提高解决复杂问题的能力"><a href="#基础篇：抓住问题本质，提高解决复杂问题的能力" class="headerlink" title="基础篇：抓住问题本质，提高解决复杂问题的能力"></a>基础篇：抓住问题本质，提高解决复杂问题的能力</h3><h3 id="实战篇：业务场景驱动，掌握解决实际问题的思考能力"><a href="#实战篇：业务场景驱动，掌握解决实际问题的思考能力" class="headerlink" title="实战篇：业务场景驱动，掌握解决实际问题的思考能力"></a>实战篇：业务场景驱动，掌握解决实际问题的思考能力</h3><h3 id="扩展篇：了解工具。生态和未来，开拓技术视野"><a href="#扩展篇：了解工具。生态和未来，开拓技术视野" class="headerlink" title="扩展篇：了解工具。生态和未来，开拓技术视野"></a>扩展篇：了解工具。生态和未来，开拓技术视野</h3>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>▪️ Slack App开发记录</title>
    <url>/2024/01/17/notion/4dd1644cb9064e4/</url>
    <content><![CDATA[<ol>
<li>使用 <a href="https://ngrok.com/download">ngrok</a>，它可为在计算机上本地打开的端口创建外部可寻址 URL。</li>
<li><p>在 Slack 内创建 Ap</p>
<ul>
<li>创建 Slack 工作区</li>
<li><p><strong>创建一个新的</strong><a href="https://api.slack.com/apps"><strong>Slack 应用程序</strong></a>：「Create New Ap」，选择 From scratch。</p>
<pre><code>    ![%E6%88%AA%E5%B1%8F2024-02-26_15.51.48.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/db4af0d3-e94a-46be-9cff-379ac9db813e/%E6%88%AA%E5%B1%8F2024-02-26_15.51.48.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035835Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=9b672eb0903b7a3fddb3478ff1645402252dc6ecb909649835bfe419c81d3367&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre></li>
<li><p>设置应用程序的<strong>OAuth 和权限</strong>，点击左侧目录的「 OAuth &amp; Permissions」 - 在<strong>Redirect URLs</strong>内添加新的重定向 url 用于应用安装和授权，重定向的 url 需要使用到你的 ngrok domain，如<code>puma-rational-rapidly.ngrok-free.app</code> 。</p>
<pre><code>        ![%E6%88%AA%E5%B1%8F2024-02-26_16.11.24.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/94e302df-b0cc-4b7f-a852-bd0a43fee050/%E6%88%AA%E5%B1%8F2024-02-26_16.11.24.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035837Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=1cd93eb40522e033757601535df56bfc0e85d48bd900a5e49aa0291af8f73c29&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)

    - 在**Scopes**内设置应用程序的应用域

        ![%E6%88%AA%E5%B1%8F2024-02-26_16.19.09.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/232da410-5c16-4a27-8ea9-801f9524a458/%E6%88%AA%E5%B1%8F2024-02-26_16.19.09.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035838Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=6a724c48de64982155e82fd9247a23b678e6b52c74f811a7a50678bf630d5a4e&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre></li>
<li><p>通过「Install Ap」→ 「Install to Workspace」将应用程序安装到我们的工作区，安装成功后获取到了<strong>SLACK_BOT_TOKEN（v1），</strong>后面会用到。</p>
<pre><code>    ![%E6%88%AA%E5%B1%8F2024-02-26_16.34.34.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/7b928644-e0b7-470a-bf23-72f568db806f/%E6%88%AA%E5%B1%8F2024-02-26_16.34.34.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035839Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=f65bf70bfc151050bd2b95990bb6e8dfea2d1f9fdfec8c683ee2d86b2681bb31&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre></li>
</ul>
</li>
</ol>
<pre><code>    ![%E6%88%AA%E5%B1%8F2024-02-26_16.40.03.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/4e2bb3fd-645f-42a9-bf86-b640b7aa8de6/%E6%88%AA%E5%B1%8F2024-02-26_16.40.03.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035839Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=63ed7393f31a9f09fe1898cda5fb334998232060a5696bbafd0b951843258bde&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)

- 进入应用程序的基本信息内获取基本的应用程序凭证：「Settings」→ 「**Basic Information」**，后续需要配置进环境变量

    ![%E6%88%AA%E5%B1%8F2024-02-26_16.52.06.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/a1b40867-90bd-4931-b610-c50e4de91521/%E6%88%AA%E5%B1%8F2024-02-26_16.52.06.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035839Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=755ffa691dd1918174f009a2852094572d873af6a75bc5ec5dcc43560019b098&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)

- 创建应用程序的斜杠命令，用于机器人监听对应的命令，创建时这里的**Request URL**要填你的`&#123;ngrok domain&#125;/slack/events` 。

    ![%E6%88%AA%E5%B1%8F2024-02-26_17.11.13.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/047dd59b-5b61-4c72-8d49-119a33f11f96/%E6%88%AA%E5%B1%8F2024-02-26_17.11.13.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240417%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240417T035841Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=13f4d93a089f683b04302655e125b38ff066c50753d29f5b16971ef225ea00d9&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject)
</code></pre>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>Slack</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 4 - 内置Hooks（二）回调函数</title>
    <url>/2023/02/17/notion/75f0d7d86b5b4a5/</url>
    <content><![CDATA[<h1 id="useCallback，useMemo，useRef，useContext"><a href="#useCallback，useMemo，useRef，useContext" class="headerlink" title="useCallback，useMemo，useRef，useContext"></a>useCallback，useMemo，useRef，useContext</h1><h2 id="useCallback：缓存回调函数"><a href="#useCallback：缓存回调函数" class="headerlink" title="useCallback：缓存回调函数"></a>useCallback：缓存回调函数</h2><p>函数组件中并没有一个直接的方式在多次渲染之间维持一个状态，所以一些定义在函数组件内的函数在多次渲染之间无法重用，每次都需要创建一个新的。<strong>这样也会导致每次创建新函数的方式会让接收事件处理函数的组件，需要重新渲染。</strong></p>
<p>思路：只有当函数参数或调用变量发生变化时，才需要重新定义一个回调函数。</p>
<p>于是就有了 useCallback 这个 Hook。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useCallback</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fn: 回调函数, deps: 依赖项</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> handleIncrement <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以减少不必要的渲染，主要体现在将回调函数作为属性传给某个组件，因为如果函数被重新创建，那么组件的 props 就会发生变化也会导致子组件的重新渲染。</p>
<p>useMemo 也是为了缓存而设计的，useCallback 缓存的是一个函数，而 useMemo 缓存的是计算结果。</p>
<h2 id="useMemo：缓存计算结果"><a href="#useMemo：缓存计算结果" class="headerlink" title="useMemo：缓存计算结果"></a>useMemo：缓存计算结果</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useMemo</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fn: 计算函数, deps: 依赖项</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>如果某个数据是通过其他数据计算得到，那么只有当用到的变量（依赖项）发生变化时才会重新计算。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SearchUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>users<span class="token punctuation">,</span> setUsers<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>searchKey<span class="token punctuation">,</span> setSearchKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">doFetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 组件首次加载时发请求获取用户数据</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://reqres.in/api/users/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setUsers</span><span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">doFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> usersToShow <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>users<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> users<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> user<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>users<span class="token punctuation">,</span> searchKey<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>input
        type<span class="token operator">=</span><span class="token string">"text"</span>
        value<span class="token operator">=</span><span class="token punctuation">&#123;</span>searchKey<span class="token punctuation">&#125;</span>
        onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setSearchKey</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token punctuation">&#123;</span>usersToShow <span class="token operator">&amp;&amp;</span>
          usersToShow<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
          usersToShow<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>first_name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以避免一些重复计算，还可以<strong>避免子组件的重复渲染</strong>！</p>
<p>♦️  其实 useCallback 的功能其实可以用 useMemo 来实现。</p>
<h2 id="useRef：在多次渲染之间共享数据"><a href="#useRef：在多次渲染之间共享数据" class="headerlink" title="useRef：在多次渲染之间共享数据"></a>useRef：在多次渲染之间共享数据</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> refCon <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以把 useRef 看作是在函数组件之外创建的一个容器空间，在这个容器上，这样就可以通过唯一的 current 属设置的一个值，从而在函数组件的多次渲染之间共享这个值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 定义 time state 用于保存计时的累积时间</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> setTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义 timer 这样一个容器用于在跨组件渲染之间保存一个变量</span>
  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 开始计时的事件处理函数</span>
  <span class="token keyword">const</span> handleStart <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 current 属性设置 ref 的值</span>
    timer<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 暂停计时的事件处理函数</span>
  <span class="token keyword">const</span> handlePause <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 clearInterval 来停止计时</span>
    window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token punctuation">&#123;</span>time <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">&#125;</span> seconds<span class="token punctuation">.</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleStart<span class="token punctuation">&#125;</span><span class="token operator">></span>Start<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handlePause<span class="token punctuation">&#125;</span><span class="token operator">></span>Pause<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 useRef 保存的数据一般是和 UI 渲染无关的，因此当 ref 的值发生变化时是不会触发组件的重新渲染的。</p>
<h3 id="保存某个-DOM-节点的引用"><a href="#保存某个-DOM-节点的引用" class="headerlink" title="保存某个 DOM 节点的引用"></a>保存某个 DOM 节点的引用</h3><p>就可以利用这个保存功能，就可以在渲染界面上访问到真实的 DOM 节点。</p>
<h2 id="useContext：定义全局状态"><a href="#useContext：定义全局状态" class="headerlink" title="useContext：定义全局状态"></a>useContext：定义全局状态</h2><p>能够让所有组件在某个组件开始的组件树上创建一个 Context，这样这个组件树上的所有组件都能访问和修改这个 Context。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>context 具有一个 Provider 的属性，一般作为组件树的根组件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">light</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">foreground</span><span class="token operator">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#eeeeee"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dark</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">foreground</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#222222"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个 Theme 的 Context</span>
<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>themes<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 Toolbar 组件中使用一个会使用 Theme 的 Button</span>
<span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>ThemedButton <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 在 Theme Button 中使用 useContext 来获取当前的主题</span>
<span class="token keyword">function</span> <span class="token function">ThemedButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button
      style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">background</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> theme<span class="token punctuation">.</span>foreground<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token operator">></span>
      <span class="token constant">I</span> am styled by theme context<span class="token operator">!</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 在 Toolbar 组件中使用一个会使用 Theme 的 Button</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 使用 state 来保存 theme 从而可以动态修改</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>theme<span class="token punctuation">,</span> setTheme<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 切换 theme 的回调函数</span>
  <span class="token keyword">const</span> toggleTheme <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>theme <span class="token operator">===</span> <span class="token string">"light"</span> <span class="token operator">?</span> <span class="token string">"dark"</span> <span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 使用 theme state 作为当前 Context</span>
    <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span>themes<span class="token punctuation">[</span>theme<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>toggleTheme<span class="token punctuation">&#125;</span><span class="token operator">></span>Toggle Theme<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>

      <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>♦️  缺点</p>
<ul>
<li>让调试变得困难</li>
<li>让组件复用变得困难</li>
</ul>
<hr>
<p>思考：</p>
<p>useState 也能够在组件的多次渲染之间共享数据，那个那个 timer 计时器是否能用 state 去保存 window.setInterval()？</p>
<ul>
<li>可以但没必要，用 useState 保存的话会触发组件的重新渲染？</li>
<li>useRef 结果的改变不会触发重新渲染</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 3 - 内置Hooks（一）组件状态</title>
    <url>/2023/02/02/notion/704688e75f5a4f0/</url>
    <content><![CDATA[<blockquote>
<p>遇到需求时，直接考虑在 Hooks 内如何实现。</p>
</blockquote>
<h1 id="内置-Hooks"><a href="#内置-Hooks" class="headerlink" title="内置 Hooks"></a>内置 Hooks</h1><h2 id="常用-Hooks"><a href="#常用-Hooks" class="headerlink" title="常用 Hooks"></a>常用 Hooks</h2><ul>
<li>useState</li>
<li>useEffect</li>
<li>useCallback</li>
<li>useMemo</li>
<li>useRef</li>
<li>useContext</li>
<li>…</li>
</ul>
<h2 id="useState：让函数组件具备维持状态的能力"><a href="#useState：让函数组件具备维持状态的能力" class="headerlink" title="useState：让函数组件具备维持状态的能力"></a>useState：让函数组件具备维持状态的能力</h2><p>在一个函数组件的多次渲染之间，这个 state 是共享的。</p>
<p>用法：</p>
<ol>
<li><code>useState(initialState)</code>：传入创建 state 的初始值，可以是任意类型</li>
<li><code>useState()</code>的返回值<code>[xx, setXx]</code>是有两个元素的数组，第一个用于读取，第二个用于设置</li>
</ol>
<p>state 是 React 组件非常重要的一个机制，需要遵循一个原则：<strong>state 中永远不要保存通过计算能够得到的值</strong>：</p>
<ol>
<li>从 props 传递过来的值；</li>
<li>从 URL 中读取的值；</li>
<li>从 cookie，localStorage 中读取的值；</li>
</ol>
<p>‼️ ：<strong>一旦组件有自己的状态，意味着组件如果重新创建就需要有恢复状态的能力，这通常会让组件变得复杂</strong>。</p>
<h2 id="useEffect：执行副作用"><a href="#useEffect：执行副作用" class="headerlink" title="useEffect：执行副作用"></a>useEffect：执行副作用</h2><p>副作用：<strong>一段和当前执行结果无关的代码</strong>，比如修改函数外部变量，发起请求等，在函数组建的当次执行过程中，useEffect 内执行的代码不影响渲染出来的 UI。</p>
<p><strong>useEffect 是每次组件 render 完后判断以来并执行。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果不指定依赖项那么 callback 在每次函数组件执行完后都会执行，如果指定那么只有依赖项中的值发生改变才会执行。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">BlogView</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> id <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 设置一个本地 state 用于保存 blog 内容</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>blogContent<span class="token punctuation">,</span> setBlogContent<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// useEffect 的 callback 要避免直接的 async 函数</span>
    <span class="token comment">// 需要封装一下</span>
    <span class="token keyword">const</span> <span class="token function-variable function">doAsync</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 当 id 发生变化时，将当前内容清除以保持一致性</span>
      <span class="token function">setBlogContent</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 发起请求获取数据</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/blog-content/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将获取的数据放入 state</span>
      <span class="token function">setBlogContent</span><span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">doAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 id 作为依赖项，变化时则执行副作用</span>

  <span class="token comment">// 如果没有 blogContent 则认为是在 loading 状态</span>
  <span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token operator">!</span>blogContent<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">?</span> <span class="token string">"Loading..."</span> <span class="token operator">:</span> blogContent<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>特殊用法：</p>
<ol>
<li><strong>没有依赖项</strong>：每次 render 完一定会执行；</li>
<li><strong>依赖项为空数组</strong>：只在首次渲染执行时触发；</li>
<li>useEffect 允许<strong>返回一个函数，用于在组件销毁时做一些清理操作</strong>；</li>
</ol>
<h2 id="Hooks-的依赖"><a href="#Hooks-的依赖" class="headerlink" title="Hooks 的依赖"></a>Hooks 的依赖</h2><p>依赖项不是内置 Hooks 的特殊机制而是一种设计模式，有类似需求的 Hooks 都可以用这个模式去实现。</p>
<p>⚠️ 注意：</p>
<ol>
<li>依赖项内定义的变量要一定会在回调函数内使用到；</li>
<li>依赖项一般是一个常量数组；</li>
<li>React 是使用浅比较来对比依赖项是否发生变化，所以需要注意数组或者对象类型；</li>
</ol>
<h2 id="Hooks-的使用规则"><a href="#Hooks-的使用规则" class="headerlink" title="Hooks 的使用规则"></a>Hooks 的使用规则</h2><h3 id="只能在函数组建的顶级作用域内使用"><a href="#只能在函数组建的顶级作用域内使用" class="headerlink" title="只能在函数组建的顶级作用域内使用"></a>只能在函数组建的顶级作用域内使用</h3><blockquote>
<p>Hooks 不能在循环，条件判断或者嵌套函数内执行，而必须是在顶层。同时<strong>Hooks 在组件的多次渲染之间，必须按顺序执行。</strong></p>
</blockquote>
<ul>
<li>所有 Hook 必须要被执行到</li>
<li>必须按顺序执行</li>
</ul>
<h3 id="只能在函数组件或者其他-Hooks-中使用"><a href="#只能在函数组件或者其他-Hooks-中使用" class="headerlink" title="只能在函数组件或者其他 Hooks 中使用"></a>只能在函数组件或者其他 Hooks 中使用</h3><p>如何在 class 组件内通过 Hooks 实现逻辑重用 → 利用高阶组件的模式，将 Hooks 封装成高阶组件，从而让类组件使用。</p>
<p>♦️  总结：</p>
<ul>
<li>在<code>useEffect</code>的毁掉函数中使用的变量，都必须在依赖项中声明；</li>
<li>Hooks 不能出现在条件语句或循环内，也不能出现在 return 之后；</li>
<li>Hooks 只能在函数组件或自定义 Hooks 中使用；</li>
</ul>
<p>→→ React 官方提供专门用来检查 Hooks 是否正确被使用，<code>eslint-plugin-react-hooks</code></p>
<hr>
<p>问题：</p>
<ul>
<li>如果 useEffect 用的某些变量没有在依赖向内指定，会发生什么</li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 12 - 项目结构：按领域组织文件夹结构</title>
    <url>/2023/08/06/notion/77392cbf81de473/</url>
    <content><![CDATA[<p><strong>在实际开发中，关键在于：每增加一个新的功能，整个应用程序的复杂度不应该明显上升，这样才能保证应用程序始终可扩展，可维护。</strong></p>
<h1 id="软件复杂度的根源：复杂的依赖关系"><a href="#软件复杂度的根源：复杂的依赖关系" class="headerlink" title="软件复杂度的根源：复杂的依赖关系"></a>软件复杂度的根源：复杂的依赖关系</h1><h2 id="按领域组织文件夹结构"><a href="#按领域组织文件夹结构" class="headerlink" title="按领域组织文件夹结构"></a>按领域组织文件夹结构</h2><p>通常在开发中会从技术角度对文件夹进行拆分，而不是按照业务功能组织在一起，这样会导致无法直观的知道一个功能的相关代码在哪些文件夹，还有开发一个功能时需要频繁切换源代码目录。</p>
<p>我们可以从领域角度出发组织源代码，自身就包含需要的所有技术模块。</p>
<p>并且需要尽量扁平化地组织所有代码，而不要按小功能去增加嵌套的文件夹。</p>
<h2 id="处理模块间的依赖：模块间的交互"><a href="#处理模块间的依赖：模块间的交互" class="headerlink" title="处理模块间的依赖：模块间的交互"></a>处理模块间的依赖：模块间的交互</h2><p><strong>把依赖从技术层面提升到业务层面。</strong></p>
<ul>
<li>硬依赖：功能 A 地实现必须基于功能 B</li>
<li>软依赖：功能 B 扩展了功能 A</li>
</ul>
<p>开发需要达到的目标是：<strong>删除一个功能像删除一个文件夹那么简单</strong>，这才是真正的松耦合的系统。</p>
<p>所以需要做的就是让模块之间的交互不在通过硬依赖。</p>
<h3 id="扩展点机制：在任何可能产生单点复杂度的模块中，通过扩展点的方式允许其他模块为其增加功能。"><a href="#扩展点机制：在任何可能产生单点复杂度的模块中，通过扩展点的方式允许其他模块为其增加功能。" class="headerlink" title="扩展点机制：在任何可能产生单点复杂度的模块中，通过扩展点的方式允许其他模块为其增加功能。"></a>扩展点机制：在任何可能产生单点复杂度的模块中，通过扩展点的方式允许其他模块为其增加功能。</h3><p><a href="http://github.com/rekit/js-plugin">http://github.com/rekit/js-plugin</a></p>
<p>利用类似事件的订阅和发布模型去建立这样一个机制。</p>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>如果使用了 Redux，如何在采用按领域组织时让业务功能的 Redux 在各自的文件夹下呢？</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 14 - 浮动层的使用 &amp; 路由管理</title>
    <url>/2023/08/08/notion/8f2c2dc346234e5/</url>
    <content><![CDATA[<h1 id="浮动层的使用"><a href="#浮动层的使用" class="headerlink" title="浮动层的使用"></a>浮动层的使用</h1><p>通常的对话框使用：</p>
<ul>
<li>对话框需要在父组件中声明，才能在子组件中控制是否显示。</li>
<li>给对话框传递参数智能由 props 传入，意味着所有状态管理需要在更高级别的组件上。</li>
</ul>
<h2 id="处理对话框的误区"><a href="#处理对话框的误区" class="headerlink" title="处理对话框的误区"></a>处理对话框的误区</h2><p>当这里是一个左右分栏布局的页面，在左侧的菜单栏由右侧列表的操作按钮，此时左侧组件和右侧组件共享一个对话框，那么此时就需要在 layout 这个层级上去设置对话框。</p>
<p>但是这种处理方式会有以下两个问题：</p>
<ul>
<li>语义隔离不明确：是两个本不相关的功能产生依赖</li>
<li>难以扩展</li>
</ul>
<p>需要思考的问题就是：<strong>一个实现业务逻辑的 Modal 究竟应该在哪个组件中去声明？又该如何进行交互？从而使让对话框相关的业务逻辑能够更加模块化</strong>。</p>
<h2 id="思路：使用全局状态管理所有对话框"><a href="#思路：使用全局状态管理所有对话框" class="headerlink" title="思路：使用全局状态管理所有对话框"></a>思路：使用全局状态管理所有对话框</h2><p>对话框本质：独立于其他界面的独立功能。</p>
<p>所以我们可以给对话框定义一个全局唯一的 ID，通过 ID 去显示/隐藏对话框并为之传递参数。</p>
<p>预期的操作方式：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token function">useNiceModal</span><span class="token punctuation">(</span><span class="token string">"user-info-modal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="实现：创建组件和相关-API"><a href="#实现：创建组件和相关-API" class="headerlink" title="实现：创建组件和相关 API"></a>实现：创建组件和相关 API</h2><h3 id="首先是全局状态的管理（以-Redux-为例）"><a href="#首先是全局状态的管理（以-Redux-为例）" class="headerlink" title="首先是全局状态的管理（以 Redux 为例）"></a>首先是全局状态的管理（以 Redux 为例）</h3><p>创建一个可以处理所有对话框状态的 reducer。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">modalReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> hiding<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"nice-modal/show"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>modalId<span class="token punctuation">]</span><span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>args <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        hiding<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token operator">...</span>state<span class="token punctuation">.</span>hiding<span class="token punctuation">,</span>
          <span class="token punctuation">[</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>modalId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"nice-modal/hide"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>force
        <span class="token operator">?</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">...</span>state<span class="token punctuation">,</span>
            <span class="token punctuation">[</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>modalId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            hiding<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>modalId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span>
        <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hiding<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>modalId<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// action creators</span>
<span class="token keyword">function</span> <span class="token function">showModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">"nice-modal/show"</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      modalId<span class="token punctuation">,</span>
      args<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">hideModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> force<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    type<span class="token operator">:</span> <span class="token string">"nice-modal/hide"</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      modalId<span class="token punctuation">,</span>
      force<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>创建一个 Hook，保证逻辑重用：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> modalCallbacks <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">useNiceModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>modalId<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span> <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">showModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>dispatch<span class="token punctuation">,</span> modalId<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>modalId<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> hide <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>force<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">hideModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> force<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span> modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>dispatch<span class="token punctuation">,</span> modalId<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> hiding <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span>hiding<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> args<span class="token punctuation">,</span> hiding<span class="token punctuation">,</span> visible<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>args<span class="token punctuation">,</span> show<span class="token punctuation">,</span> hide<span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>args<span class="token punctuation">,</span> hide<span class="token punctuation">,</span> show<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> hiding<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 封装一个通用对话框</span>
<span class="token keyword">function</span> <span class="token function">NiceModal</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token function">useNiceModal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Modal
      onCancel<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      onOk<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      afterClose<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      visible<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">!</span>modal<span class="token punctuation">.</span>hiding<span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span>
    <span class="token operator">></span>
      <span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后可以使用容器模式，在对话框关闭时直接返回 null 从而以保证性能。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createNiceModal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> Comp<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> visible<span class="token punctuation">,</span> args <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useNiceModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visible<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Comp <span class="token punctuation">&#123;</span><span class="token operator">...</span>args<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是调用操作：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> NiceModal<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  createNiceModal<span class="token punctuation">,</span>
  useNiceModal<span class="token punctuation">,</span>
  modalReducer<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./NiceModal"</span><span class="token punctuation">;</span>

<span class="token comment">// redux store</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>modalReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> MyModal <span class="token operator">=</span> <span class="token function">createNiceModal</span><span class="token punctuation">(</span><span class="token string">"my-modal"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>NiceModal id<span class="token operator">=</span><span class="token string">"my-modal"</span> title<span class="token operator">=</span><span class="token string">"Nice Modal"</span><span class="token operator">></span>
      Hello NiceModal<span class="token operator">!</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>NiceModal<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyModalExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token function">useNiceModal</span><span class="token punctuation">(</span><span class="token string">"my-modal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
        Show Modal
      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
      <span class="token operator">&lt;</span>MyModal <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Nice Modal<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span>MyModalExample <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="处理对话框的返回值"><a href="#处理对话框的返回值" class="headerlink" title="处理对话框的返回值"></a>处理对话框的返回值</h3><ul>
<li>对话框可能需要返回值给调用者</li>
</ul>
<p>所以可以利用 Promise 来完成：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token function">useNiceModal</span><span class="token punctuation">(</span><span class="token string">"my-modal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在useNiceModal内</span>
<span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span> <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">showModal</span><span class="token punctuation">(</span>modalId<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>dispatch<span class="token punctuation">,</span> modalId<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span> modalCallbacks<span class="token punctuation">[</span>modalId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>modalId<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>如果是基于 Context 该如何实现 NiceModal？</p>
<h1 id="路由管理"><a href="#路由管理" class="headerlink" title="路由管理"></a>路由管理</h1><ul>
<li>路由提供了按页面去组织整个应用程序的能力</li>
<li>URL（Uniform Resource Locator），表明 URL 是用于唯一的定位某个资源的</li>
</ul>
<h2 id="路由的工作原理：实现一个简单的路由机制"><a href="#路由的工作原理：实现一个简单的路由机制" class="headerlink" title="路由的工作原理：实现一个简单的路由机制"></a>路由的工作原理：实现一个简单的路由机制</h2><p>所谓的页面切换就是一个页面局部内容的组件切换。</p>
<ul>
<li>在服务器渲染的页面，URL 的变化都是全部页面内容的切换</li>
<li>前段路由管理中，则一般只是主内容区域的变化</li>
</ul>
<p>实现路由机制的核心逻辑<strong>：根据 URL 路径这个状态来决定内容区域显示什么组件</strong>。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">MyRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> routes <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>
    children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=></span> c<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">"path"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Page <span class="token operator">=</span> routes<span class="token punctuation">[</span>hash<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">?.</span>component<span class="token punctuation">;</span>
  <span class="token keyword">return</span> Page <span class="token operator">?</span> <span class="token operator">&lt;</span>Page <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">:</span> <span class="token string">"Not found."</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Route</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中空组件 Route 可以接收路由的具体参数 path 和 component 从而以声明式的方式去定义路由。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>MyRouter<span class="token operator">></span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"page1"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page1<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"page2"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page2<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"page3"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page3<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"page4"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Page4<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>MyRouter<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用-React-Router"><a href="#使用-React-Router" class="headerlink" title="使用 React Router"></a>使用 React Router</h2><p>实际项目中需要考虑：路由嵌套，URL 模式匹配，参数提取等。</p>
<p>React Router 不仅支持浏览器还支持 React Native 以及一些用 Web 实现的移动 App。</p>
<p>通常在开发中使用的 react-router-dom 是支持浏览器的模块。</p>
<h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><p>表示用标准的 URL 路径去管理路由。</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p>定义一个导航链接，可以无刷新地改变页面 URL。</p>
<h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h3><p>定义一条路由规则，可以指定匹配路径和渲染内容。</p>
<h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><p>可以保证只有第一个匹配到的路由才会被渲染。</p>
<h2 id="使用嵌套路由：实现二级导航"><a href="#使用嵌套路由：实现二级导航" class="headerlink" title="使用嵌套路由：实现二级导航"></a>使用嵌套路由：实现二级导航</h2><ul>
<li>能够模糊匹配</li>
<li>Route 能够嵌套使用</li>
</ul>
<h2 id="在-URL-中保存页面状态"><a href="#在-URL-中保存页面状态" class="headerlink" title="在 URL 中保存页面状态"></a>在 URL 中保存页面状态</h2><p>利用 React Router 的参数功能来定义一条路由。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/tabs/:activeTab"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>TabsPage<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="路由层面实现权限控制"><a href="#路由层面实现权限控制" class="headerlink" title="路由层面实现权限控制"></a>路由层面实现权限控制</h2><p>利用前端路由的动态性。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Page1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"Page 1"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Page2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"Page 2"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">UnauthedPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>Unauthorized<span class="token punctuation">,</span> please log <span class="token keyword">in</span> first<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loggedIn<span class="token punctuation">,</span> setLoggedIn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> routes <span class="token operator">=</span> loggedIn
    <span class="token operator">?</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
          path<span class="token operator">:</span> <span class="token string">"/15/RouterAuth"</span><span class="token punctuation">,</span>
          component<span class="token operator">:</span> Page1<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          path<span class="token operator">:</span> <span class="token string">"/15/RouterAuth/page1"</span><span class="token punctuation">,</span>
          component<span class="token operator">:</span> Page1<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          path<span class="token operator">:</span> <span class="token string">"/15/RouterAuth/page2"</span><span class="token punctuation">,</span>
          component<span class="token operator">:</span> Page2<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">"/15/RouterAuth"</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UnauthedPage <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>Router Auth<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span>Button
        type<span class="token operator">=</span><span class="token punctuation">&#123;</span>loggedIn <span class="token operator">?</span> <span class="token string">"primary"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>
        onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
      <span class="token operator">></span>
        <span class="token punctuation">&#123;</span>loggedIn <span class="token operator">?</span> <span class="token string">"Log Out"</span> <span class="token operator">:</span> <span class="token string">"Log In"</span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>

      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"exp-15-router-auth"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"exp-15-sider"</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/15/RouterAuth/page1"</span><span class="token operator">></span>Page <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
          <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/15/RouterAuth/page2"</span><span class="token operator">></span>Page <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"exp-15-page-container"</span><span class="token operator">></span>
          <span class="token punctuation">&#123;</span>routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span>path<span class="token punctuation">&#125;</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>r<span class="token punctuation">.</span>component<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h2><p>为什么 URL 存储状态可以简化页面之间的交互？</p>
<p>因为如果子页面需要来自父页面的参数时，通过 URL 可以更好地定位。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ Chapter 1</title>
    <url>/2023/07/27/notion/86b2af186c26415/</url>
    <content><![CDATA[<p>undefined</p>
]]></content>
      <categories>
        <category>日语初级</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪2024周刊 001期：女性话语权</title>
    <url>/2024/04/16/notion/9cb282a6255f4e5/</url>
    <content><![CDATA[<h3 id="Hello，大家好，这里是阿汪同学｜本期关键词：-桂花乌龙"><a href="#Hello，大家好，这里是阿汪同学｜本期关键词：-桂花乌龙" class="headerlink" title="Hello，大家好，这里是阿汪同学｜本期关键词： 桂花乌龙"></a>Hello，大家好，这里是阿汪同学｜本期关键词： <code>桂花乌龙</code></h3><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享和碎碎念</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><ul>
<li>成功第二次水光针</li>
<li>这月打针 ✅</li>
<li>成功更新了本博客的主题风格，看着这么好看的博客后面要多多输出呀</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><a href="https://xyzrank.com/#/">中文播客网</a>：罗列了近期发布的一些播客内容，可以直接进行点击收听。</li>
<li><a href="https://visitorbadge.io/">简单访客徽章</a>：想要显示网站/GitHub 个人资料获得了多少访问者？快速填写表单，并将 生成的 Markdown 或 HTML 代码复制到要使用的位置。</li>
<li><a href="https://quanxin.org/">全新工具箱</a>：各种常用工具，比如图标，图片转 base64，JSON 格式化等等。</li>
</ul>
<h1 id="Widverse-·-汪汪汪世界"><a href="#Widverse-·-汪汪汪世界" class="headerlink" title="Widverse · 汪汪汪世界"></a>Widverse · 汪汪汪世界</h1><blockquote>
<p><a href="https://httishere.gitee.io/widverse-site/">Widverse</a> 是我开发的组件库，支持嵌入 Notion，FlowUs，Wolai，github 等。</p>
</blockquote>
<ul>
<li>组件已通过 React 重构升级至 3.0 版本，修复了无法创建和拷贝等问题。</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><p>听了除你武器的<a href="https://www.xiaoyuzhoufm.com/episode/66097b8b1519139e4fbe18f8"><strong>《坠落的审判首映礼：让她上桌，为何又让她沉默》</strong></a>这篇播客的时候感觉还是很强烈的，因为我听的相关的女性主义向的播客视频很多，但是让我感觉很不舒服是因为这些所谓的“尊重女性”者他潜意识里的男性特权意识。</p>
<p>对于很多男性而言他们从出生以来就是整个家庭乃至社会的得利者，他们享受了特权却不认为是特权，所以当倡导平等出现的时候，这种平等就变成了他们权利的“削弱”。</p>
<p>前几天看到了一个博主对于小红书上憋尿让男朋友和司机沟通的视频，我刚开始想的也是这个女生也太娇妻了吧，但是这个博主说因为从古至今在家庭内男人就是上位者，也是女性话语的代理人，所以女性在很多情况下会下意识的寻找自己的代理人，他们通过示弱来获得安全感，或许彻底打破这种观念才是最难的吧。</p>
<p>虽然自己也经常觉得作为女生一定要打破刻板观念，更加独立，但是社会文化的影响还是根深蒂固的，期待有那么一天的到来吧！</p>
<h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><h3 id="1-日常生活中有遇到什么因为性别而带来的区别对待或者说影响？"><a href="#1-日常生活中有遇到什么因为性别而带来的区别对待或者说影响？" class="headerlink" title="1. 日常生活中有遇到什么因为性别而带来的区别对待或者说影响？"></a>1. 日常生活中有遇到什么因为性别而带来的区别对待或者说影响？</h3><h3 id="2-对于低能量的自己你有什么可以提高能量的方法？"><a href="#2-对于低能量的自己你有什么可以提高能量的方法？" class="headerlink" title="2. 对于低能量的自己你有什么可以提高能量的方法？"></a>2. 对于低能量的自己你有什么可以提高能量的方法？</h3><hr>
<p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/%5BName%5D%20HTTISHER.jpg" alt="%5BName%5D%20HTTISHER.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>💘 再见2023，当时只道是寻常</title>
    <url>/2024/01/06/notion/ac3f15468e4443c/</url>
    <content><![CDATA[<p><code>〉》〉》</code> 坚持就是胜利 ✌️！</p>
<h3 id="工作-amp-学习"><a href="#工作-amp-学习" class="headerlink" title="工作&amp;学习"></a>工作&amp;学习</h3><blockquote>
<p>💡 经历了差不多一年半居家办公的日子，很轻松是真的，很焦虑和懒散也是真的。焦虑的是工作并不多，懒散的是就是这么不是很饱和的情况下也没有多学习。</p>
</blockquote>
<h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><p>今年粉丝也涨了几万了，相关收入居然 6 位数啦！！！虽然压力很大也经常能遇到很多奇葩，但是还是会坚持下去。</p>
<h3 id="新的一年展望"><a href="#新的一年展望" class="headerlink" title="新的一年展望"></a>新的一年展望</h3><ul>
<li>多学习，多分享，多进步</li>
<li>不要乱花钱</li>
<li>身体健康，减肥成功</li>
<li>开开心心，去更多的地方看更多的风景</li>
</ul>
<h3 id="今年事件回顾"><a href="#今年事件回顾" class="headerlink" title="今年事件回顾"></a>今年事件回顾</h3><blockquote>
<p>🖤 <strong>一月</strong></p>
</blockquote>
<ul>
<li>跟老妹一起给老妈过了生日 🎂。</li>
<li>也终于结束了我的放疗。</li>
<li>为了消耗马斯卡彭，在小红书找了教程做乳酪蛋糕，没有低筋面粉用了妈妈买的预拌粉，结果它膨胀了……</li>
</ul>
<blockquote>
<p>🖤 二<strong>月</strong></p>
</blockquote>
<ul>
<li>非正式的唐大哥因土耳其地震去世了。</li>
<li>喜欢的 mg 也被暴力解绑，伤心。</li>
<li>和妮妮坐地铁去了鲁迅故居走一走。</li>
</ul>
<blockquote>
<p>🖤 三<strong>月</strong></p>
</blockquote>
<ul>
<li>和璐婷依婷见面啦！</li>
<li>和蕾蕾子也见面啦，依旧是御牛道，哈哈哈。（她居然生娃了！）</li>
<li>去参加了阿姣的婚礼，也一起去了罗蒙。</li>
</ul>
<blockquote>
<p>🖤 四<strong>月</strong></p>
</blockquote>
<ul>
<li>和普飞一起逛了植物园。</li>
<li>爱上了橙汁和美式的搭配。</li>
</ul>
<blockquote>
<p>🖤 五<strong>月</strong></p>
</blockquote>
<ul>
<li>五一假期和妮妮阿姣一起去了北京！现在我也是去过首都的人了～</li>
<li>抢到了五月天演唱会的门票！</li>
<li>购入了大排灯。</li>
</ul>
<blockquote>
<p>🖤 六<strong>月</strong></p>
</blockquote>
<ul>
<li>去看了五月天杭州的演唱会，太开心啦！</li>
<li>吃了超大一颗的杨梅。</li>
<li>太伤心了！在淘宝买 10 年 Plus 的被清 0 了！</li>
</ul>
<blockquote>
<p>🖤 七<strong>月</strong></p>
</blockquote>
<ul>
<li>普普通通的一个生日月，和老妹妮妮一起去吃了牛肉火锅，吃了蛋糕，唱了 KTV。</li>
<li>报名学游泳啦！</li>
</ul>
<blockquote>
<p>🖤 八<strong>月</strong></p>
</blockquote>
<ul>
<li>吃吃喝喝，学会了游泳！</li>
<li>终于結束了靶向治療！</li>
<li>尝试开发一个 Chrome 插件，还挺有趣的。</li>
<li>日本开始排核污水入海，想到看的末世文里面的场景，真的感到作为人类的无力感。</li>
<li>一大家子去吃了烤全羊，其实味道也就那样不知道为啥要来回开 3，4 个小时去。</li>
</ul>
<blockquote>
<p>🖤 九<strong>月</strong></p>
</blockquote>
<ul>
<li>头发长到可以稍微做一下发型了。</li>
<li>公司团建去了福建武夷山，虽然很热但是还是很开心。</li>
<li>小红书被禁言了一周……</li>
</ul>
<blockquote>
<p>🖤 十<strong>月</strong></p>
</blockquote>
<ul>
<li>普普通通的日子。</li>
<li>开始学习软考的课程。</li>
</ul>
<blockquote>
<p>🖤 十一<strong>月</strong></p>
</blockquote>
<ul>
<li>参加了软考，考懵了都。</li>
<li>去上海看了五月天演唱会。</li>
<li>恢复去健身啦！第一天就直接头晕眼花。</li>
</ul>
<blockquote>
<p>🖤 十二<strong>月</strong></p>
</blockquote>
<ul>
<li>和老妹还有她的朋友一起去了大连-威海。</li>
<li>软考结果出来了，预料之内的没有及格。</li>
<li>b 站居然 5 万粉啦！</li>
</ul>
<p><code>〉》〉》</code> 还是一样做善良的人！做开心的人。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪2024周刊 002期：</title>
    <url>/2024/04/22/notion/a7a8a9b26c8b4d4/</url>
    <content><![CDATA[<h3 id="Hello，大家好，这里是阿汪同学｜本期关键词：-抹茶干酪贝果"><a href="#Hello，大家好，这里是阿汪同学｜本期关键词：-抹茶干酪贝果" class="headerlink" title="Hello，大家好，这里是阿汪同学｜本期关键词： 抹茶干酪贝果"></a>Hello，大家好，这里是阿汪同学｜本期关键词： <code>抹茶干酪贝果</code></h3><p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><ul>
<li>这周第二次去做了光子嫩肤，做之前做了一个皮肤检测，和上个月对比底层的色素少了很多，好开心呀，希望后面好好的把我的底层炎症和痘痘治理好。</li>
<li>最近想在自己的博客更新内容，所以还是觉得购买一个自己的图床可以避免大量图片失效。</li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><a href="https://wordforest.cn/"><strong>单词森林</strong></a>：一个简洁的在线英语单词学习工具</li>
<li><a href="https://bento.me/headers"><strong>Notion Headers</strong></a>：可以下载一些 notion 的顶图</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><p>最近上班骑车的时候觉得着实有些无聊，就想边骑车边听书或者听播客。</p>
<p>现在觉得听播客也挺有趣的。</p>
<p>感觉自己的生活好匮乏，没什么可以记录的。</p>
<h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><h2 id="调休休息-3-天和直接放-1-天你会选择哪种？"><a href="#调休休息-3-天和直接放-1-天你会选择哪种？" class="headerlink" title="调休休息 3 天和直接放 1 天你会选择哪种？"></a>调休休息 3 天和直接放 1 天你会选择哪种？</h2><p><img src="https://htt-pics.oss-cn-beijing.aliyuncs.com/%5BName%5D%20HTTISHER.jpg" alt="%5BName%5D%20HTTISHER.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>▪️ antd使用Form无法获取item数据</title>
    <url>/2024/03/05/notion/c05e50cfd8954c8/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在使用 antd 开发过程中，在使用 Form 的 validateFields 方法进行数据验证时，发现无法获取表单数据。</p>
<h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>本页面使用了多个 Form，初始化时可能会导致后置 Form 不会被初始化。</p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>在 form props 内添加 key 用于区分。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> recoveryFormProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  form<span class="token operator">:</span> recoveryForm<span class="token punctuation">,</span>
  layout<span class="token operator">:</span> <span class="token string">"vertical"</span><span class="token punctuation">,</span>
  requiredMark<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  onFinish<span class="token operator">:</span> recoveryFinish<span class="token punctuation">,</span>
  key<span class="token operator">:</span> <span class="token string">"recovery"</span><span class="token punctuation">,</span> <span class="token comment">// 用于表单区分</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> setPwdFormProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  form<span class="token operator">:</span> setPwdForm<span class="token punctuation">,</span>
  layout<span class="token operator">:</span> <span class="token string">"vertical"</span><span class="token punctuation">,</span>
  requiredMark<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  validateTrigger<span class="token operator">:</span> <span class="token string">"onBlur"</span><span class="token punctuation">,</span>
  key<span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>小问题</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪周刊 001期： 新年再出发</title>
    <url>/2023/01/30/notion/c27da161a208489/</url>
    <content><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/560bd117-80ad-4b0e-bac7-73a9319fe47e/IMG_5974.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055227Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=bba78a5062040155b93c525e58ef021e9885b9070c76b293b1a5d0879661f999&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="IMG_5974.jpg"></p>
<h3 id="Hello，大家好，这里是阿汪同学。"><a href="#Hello，大家好，这里是阿汪同学。" class="headerlink" title="Hello，大家好，这里是阿汪同学。"></a>Hello，大家好，这里是阿汪同学。</h3><h3 id="本期关键词：-蔓越莓曲奇"><a href="#本期关键词：-蔓越莓曲奇" class="headerlink" title="本期关键词： 蔓越莓曲奇"></a>本期关键词： 蔓越莓曲奇</h3><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>我以前也有想过做一些平时的学习分享，但是基本都没有坚持下来，再者去年的特殊情况使我的工作学习都进入了一个停滞状态，新的一年我想重新出发，和大家一起共同成长。</p>
<p>同时想通过做这个周刊分享来提高自己的文笔和逻辑能力。</p>
<p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><ul>
<li><p>回顾自己的 github：<a href="https://wrapped.run/#">https://wrapped.run/</a></p>
<pre><code>    看我去年那少得可怜的commits。
</code></pre></li>
</ul>
<pre><code>![0fed55c5a8c4a8d94a40ff6e9e614d39.png](https://i.hd-r.cn/0fed55c5a8c4a8d94a40ff6e9e614d39.png)
</code></pre><ul>
<li><p>ChatGPT</p>
<pre><code>    &gt; **ChatGPT: OptimizingLanguage Modelsfor Dialogue**
</code></pre></li>
</ul>
<pre><code>    We’ve trained a model called ChatGPT which interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests. ChatGPT is a sibling model to [InstructGPT](https://openai.com/blog/instruction-following/), which is trained to follow an instruction in a prompt and provide a detailed response.


ChatGPT是一款基于GPT-3模型的聊天机器人平台，它拥有智能的自然语言处理功能，能够帮助开发者快速构建出自定义的聊天机器人，并且支持多种语言的交互，可以帮助开发者更快地将技术成果推向市场。

- 但是目前ChatGPT被部分地区和学校禁用。
</code></pre><ul>
<li><p>双缝干涉实验</p>
<pre><code>    因为我不是专业的怕形容不好，但是可以看一下相关的视频或者解说，非常有意思。
</code></pre></li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li>最近觉得不错的免费图床：<a href="https://www.hd-r.cn/">https://www.hd-r.cn/</a>，不会很大程度地压缩图片，速度快，无需注册</li>
<li><p>快速生成自定义的 Notion 封面：<a href="https://notioncovergenerator.com/">https://notioncovergenerator.com/</a>，Create CustomNotion Coversfree in minutes!</p>
<pre><code>    ![1ea04e31af95dc545128439559ac21a2.png](https://i.hd-r.cn/1ea04e31af95dc545128439559ac21a2.png)
</code></pre></li>
<li><p><a href="https://splitbee.io/"><strong>Splitbee</strong></a>，轻量级访客分析工具，我的组件库也是用了这个工具，可以充分了解大家更喜欢哪个组件便于我去更新迭代更多大家喜爱的内容。</p>
<pre><code>    ![3c8eff422fa2e74af5045b0250a70440.png](https://i.hd-r.cn/3c8eff422fa2e74af5045b0250a70440.png)
</code></pre></li>
</ul>
<h1 id="专业技术领域"><a href="#专业技术领域" class="headerlink" title="专业技术领域"></a>专业技术领域</h1><ul>
<li><a href="https://blog.bitsrc.io/react-form-validation-5aa06193bec4"><strong>Best Way to Handle Form Validation: React Hook Form and Zod</strong></a> <strong><code>英文</code></strong></li>
<li><a href="https://www.macarthur.me/posts/options-for-removing-event-listeners"><strong>You’ve Got Options for Removing Event Listeners</strong></a> <strong><code>英文</code></strong></li>
<li>模块联邦作者 Zack Jackson 近几周在投入  <a href="https://twitter.com/ScriptedAlchemy/status/1619951813687660544">Rust Webpack</a> ，30 天内会<a href="https://twitter.com/ScriptedAlchemy/status/1621220073192189952">开源</a>。 - 在工作项目内也使用了模块联邦，还需要再多看看源码。</li>
</ul>
<h1 id="Widverse-·-汪汪汪世界"><a href="#Widverse-·-汪汪汪世界" class="headerlink" title="Widverse · 汪汪汪世界"></a>Widverse · 汪汪汪世界</h1><blockquote>
<p>Widverse 是我开发的组件库，支持嵌入 Notion，FlowUs，Wolai，github 等。</p>
</blockquote>
<ul>
<li>本周比较忙碌所以暂无更新。</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><ul>
<li>每次回家都要玩烘焙，买一堆烘焙材料，结果每次都要在返杭前疯狂的消耗材料不然就得浪费。</li>
<li>这周正式回杭州啦，从去年开始已经居家办公 7 个月了，现在特别想正式回归职场。</li>
<li>说好的年后开始减肥却每天还在大吃大喝，住院的护士问我是不是胖了让我控制体重，害，减肥太难了。</li>
</ul>
<h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><p>你相信有平行世界吗？</p>
<p>如果有你觉得平行世界的你是个怎么样的人？</p>
<p><img src="https://i.hd-r.cn/9f144b95fa5e7e2b4105f7bbd6a511e4.jpg" alt="9f144b95fa5e7e2b4105f7bbd6a511e4.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ 心之所向，行之所往 ｜ 2022总结</title>
    <url>/2023/01/30/notion/ce50450a16b24f2/</url>
    <content><![CDATA[<p>说实话，这一年大概是跌宕起伏，兵荒马乱的一年吧。</p>
<h3 id="工作-amp-学习"><a href="#工作-amp-学习" class="headerlink" title="工作 &amp; 学习"></a>工作 &amp; 学习</h3><blockquote>
<p>🟡 <strong>换了新工作……</strong><br>年初的时候公司的状况实在是有点不好，然后因为一直都跨不出舒适圈，教练非常热心地想要给我介绍工作，刚好她的有个学员的朋友有内推机会，于是想要我发简历，难受，甚至简历都需呀别人催好几遍。</p>
<p>发完简历之后，对方表示还不错，我真的是又忐忑又开心，因为我知道其实我不算优秀。之后我提前请假回家过年，正好在回家之后几天收到了面试邀约，不过线上的面试让我减轻了一些压力，第一个面试是关于一些基础问题的面试，还做了一个 css 效果的小 demo，我感觉这个我还是表现得不错。再然后隔天又收到了第二场面试的邀约，这次是一个在线实时 coding 的测试，关于搜索匹配，其实面试过程不算顺利，也可能是因为在线 coding 让我特别紧张，之后在面试官的提示下也算是完成了他的预期效果（不过是在面试结束后做好的）。</p>
<p>所以我还是算顺利地收到了 offer，真的是意外地顺利。</p>
</blockquote>
<pre><code>年初的时候公司的状况实在是有点不好，然后因为一直都跨不出舒适圈，教练非常热心地想要给我介绍工作，刚好她的有个学员的朋友有内推机会，于是想要我发简历，难受，甚至简历都需呀别人催好几遍。


发完简历之后，对方表示还不错，我真的是又忐忑又开心，因为我知道其实我不算优秀。之后我提前请假回家过年，正好在回家之后几天收到了面试邀约，不过线上的面试让我减轻了一些压力，第一个面试是关于一些基础问题的面试，还做了一个css效果的小demo，我感觉这个我还是表现得不错。再然后隔天又收到了第二场面试的邀约，这次是一个在线实时coding的测试，关于搜索匹配，其实面试过程不算顺利，也可能是因为在线coding让我特别紧张，之后在面试官的提示下也算是完成了他的预期效果（不过是在面试结束后做好的）。


所以我还是算顺利地收到了offer，真的是意外地顺利。
</code></pre><blockquote>
<p>🟡 <strong>学习基本搁置……</strong></p>
</blockquote>
<h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><p>今年最没想到的大概是在自媒体上的发展吧，因为身体原因中间搁置了很久，在身体状况好些的时候重新开始了原来的分享，渐渐地也收到了一些合作，然后发布了一个小模版没想到也小爆了一下，希望之后能有更多更好的想法。</p>
<p>希望今年的小红书粉丝能达到 2w。</p>
<h3 id="2023-的展望"><a href="#2023-的展望" class="headerlink" title="2023 的展望"></a>2023 的展望</h3><ul>
<li>希望在专业技能上能有所长进，能多写技术博客</li>
<li>身体健康，开开心心</li>
<li>保持学习</li>
</ul>
<h3 id="今年事件回顾"><a href="#今年事件回顾" class="headerlink" title="今年事件回顾"></a>今年事件回顾</h3><blockquote>
<p>🟡 一月</p>
<ul>
<li><p>达成了蹬腿 131kg 的成就。</p>
</li>
<li><p>刚买的鼠标放在被子上的缘故，第二天出现在了洗衣机里，不过很坚强地并没有受伤。</p>
</li>
<li><p>妹妹去上班穿了我前一天穿过的衣服，所以带走了我兜里的钥匙，于是被锁在了家里，并且我是在马上要出门去上课的时候才发现，和教练调节了迟一小时上课，并叫了跑腿，外面大雨滂沱，内心迷茫无措。</p>
</li>
<li><p>回家乔迁啦。</p>
</li>
<li><p>在线面试，拿到 offer。</p>
</li>
</ul>
</blockquote>
<pre><code>- 达成了蹬腿131kg的成就。
- 刚买的鼠标放在被子上的缘故，第二天出现在了洗衣机里，不过很坚强地并没有受伤。
- 妹妹去上班穿了我前一天穿过的衣服，所以带走了我兜里的钥匙，于是被锁在了家里，并且我是在马上要出门去上课的时候才发现，和教练调节了迟一小时上课，并叫了跑腿，外面大雨滂沱，内心迷茫无措。
- 回家乔迁啦。
- 在线面试，拿到offer。
</code></pre><blockquote>
<p>🟡 二月</p>
<ul>
<li><p>在家看冬奥会。</p>
</li>
<li><p>02/21 入职新公司，结果一屁股坐在了地上。</p>
</li>
</ul>
</blockquote>
<pre><code>- 在家看冬奥会。
- 02/21入职新公司，结果一屁股坐在了地上。
</code></pre><blockquote>
<p>🟡 三月</p>
<ul>
<li><p>之前的公司忘记给我停缴，结果还想让我交公司交的部分，最后协调只交了自己交的部分。</p>
</li>
<li><p>第一次做美甲。</p>
</li>
<li><p>硬拉上了新高度 70kg。</p>
</li>
<li><p>gitee 图床被 🈲️ 了</p>
</li>
<li><p>一个月喝了好多奶茶咖啡</p>
</li>
</ul>
</blockquote>
<pre><code>- 之前的公司忘记给我停缴，结果还想让我交公司交的部分，最后协调只交了自己交的部分。
- 第一次做美甲。
- 硬拉上了新高度70kg。
- gitee图床被🈲️了
- 一个月喝了好多奶茶咖啡
</code></pre><blockquote>
<p>🟡 四月</p>
<ul>
<li><p>非正式会谈官宣。</p>
</li>
<li><p>开始常态化核酸检测。</p>
</li>
<li><p>收到了教练送的体脂秤。</p>
</li>
<li><p>花 28 元做了一次单采。</p>
</li>
<li><p>开始居家办公（但是谁知道才办了一天就……</p>
</li>
<li><p>和妹妹一起去了植物园，第一次贴了假睫毛。</p>
</li>
<li><p>因为疫情取消了我们的五一之旅。</p>
</li>
</ul>
</blockquote>
<pre><code>- 非正式会谈官宣。
- 开始常态化核酸检测。
- 收到了教练送的体脂秤。
- 花28元做了一次单采。
- 开始居家办公（但是谁知道才办了一天就……
- 和妹妹一起去了植物园，第一次贴了假睫毛。
- 因为疫情取消了我们的五一之旅。
</code></pre><blockquote>
<p>🟡 五月</p>
<ul>
<li><p>之前在身上摸到了一个肿块，趁五一去检查，结果不太好，需要手术确认。</p>
</li>
<li><p>做了局麻手术，术中病理做出来是恶性肿瘤。</p>
</li>
<li><p>请假。</p>
</li>
<li><p>去做了生殖保护咨询。</p>
</li>
</ul>
</blockquote>
<pre><code>- 之前在身上摸到了一个肿块，趁五一去检查，结果不太好，需要手术确认。
- 做了局麻手术，术中病理做出来是恶性肿瘤。
- 请假。
- 去做了生殖保护咨询。
</code></pre><blockquote>
<p>🟡 六月</p>
<ul>
<li><p>回家修养，开始化疗之程。</p>
</li>
<li><p>手术切口一直好不了。</p>
</li>
<li><p>剃了光头。</p>
</li>
</ul>
</blockquote>
<pre><code>- 回家修养，开始化疗之程。
- 手术切口一直好不了。
- 剃了光头。
</code></pre><blockquote>
<p>🟡 七月</p>
<ul>
<li><p>第一次吃了甲鱼。</p>
</li>
<li><p>回归工作，居家办公中。</p>
</li>
<li><p>生日呀。</p>
</li>
<li><p>抢到了饿了么免单。</p>
</li>
</ul>
</blockquote>
<pre><code>- 第一次吃了甲鱼。
- 回归工作，居家办公中。
- 生日呀。
- 抢到了饿了么免单。
</code></pre><blockquote>
<p>🟡 八月</p>
<ul>
<li><p>收到了生病之后的第一笔工资。</p>
</li>
<li><p>接到了小红书长期合作（也是第一笔合作。</p>
</li>
</ul>
</blockquote>
<pre><code>- 收到了生病之后的第一笔工资。
- 接到了小红书长期合作（也是第一笔合作。
</code></pre><blockquote>
<p>🟡 九月</p>
<ul>
<li><p>小红书 5000 粉。</p>
</li>
<li><p>吃青蟹的时候被扎了，没想到手指就此发炎，然后因为白细胞太低去了医院急诊，结果发现发烧了，于是又去发热门诊验血打针。</p>
</li>
<li><p>每天去医院输液。</p>
</li>
</ul>
</blockquote>
<pre><code>- 小红书5000粉。
- 吃青蟹的时候被扎了，没想到手指就此发炎，然后因为白细胞太低去了医院急诊，结果发现发烧了，于是又去发热门诊验血打针。
- 每天去医院输液。
</code></pre><blockquote>
<p>🟡 十月</p>
<ul>
<li><p>买了一个大菠萝蜜。</p>
</li>
<li><p>每天去医院输液。</p>
</li>
<li><p>公众号粉丝 5000。</p>
</li>
</ul>
</blockquote>
<pre><code>- 买了一个大菠萝蜜。
- 每天去医院输液。
- 公众号粉丝5000。
</code></pre><blockquote>
<p>🟡 十一月</p>
<ul>
<li><p>结膜炎，化疗住院。</p>
</li>
<li><p>因为来医院的时候和阳性时空伴随了，在医院被隔离了 5 天。</p>
</li>
<li><p>结束化疗。</p>
</li>
<li><p>小红书粉丝 10000。</p>
</li>
</ul>
</blockquote>
<pre><code>- 结膜炎，化疗住院。
- 因为来医院的时候和阳性时空伴随了，在医院被隔离了5天。
- 结束化疗。
- 小红书粉丝10000。
</code></pre><blockquote>
<p>🟡 十二月</p>
<ul>
<li><p>开始放疗。</p>
</li>
<li><p>B 站粉丝 20000。</p>
</li>
<li><p>更新了组件库 2.0。</p>
</li>
</ul>
</blockquote>
<pre><code>- 开始放疗。
- B站粉丝20000。
- 更新了组件库2.0。
</code></pre><hr>
<p>愿一直做一个善良的人。</p>
<p>愿年年身体健康，万事如意。</p>
<p>愿新的一年心之所向，行之所往。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 13 - Hooks给Form带来的新变化</title>
    <url>/2023/08/06/notion/cd92524243e3431/</url>
    <content><![CDATA[<h1 id="在表单中使用-React-组件：受控组件和非受控组件"><a href="#在表单中使用-React-组件：受控组件和非受控组件" class="headerlink" title="在表单中使用 React 组件：受控组件和非受控组件"></a>在表单中使用 React 组件：受控组件和非受控组件</h1><p>非受控组件：表单元素的值不是由副组件决定的，是完全内部的状态</p>
<p>通过非受控组件的方式，可以避免某些程度上的组件重复渲染导致的性能问题，但是无法对外有交互。</p>
<h1 id="使用-Hooks-简化表单处理"><a href="#使用-Hooks-简化表单处理" class="headerlink" title="使用 Hooks 简化表单处理"></a>使用 Hooks 简化表单处理</h1><p>维护表单组件的状态逻辑，核心在于：<strong>字段名，value 值，onChange 事件</strong>。</p>
<p>这就是很多组件库里的 useForm 这个功能，可以通过提供字段名去取值和设值，就不需要繁琐地为每个表单元素设置状态。</p>
<p>核心原理：<strong>把表单的状态管理单独提取出来</strong>， 成为一个可重用的 Hook。</p>
<h2 id="处理表单验证"><a href="#处理表单验证" class="headerlink" title="处理表单验证"></a>处理表单验证</h2><ul>
<li>如何定义错误状态</li>
<li>如何设置错误状态</li>
</ul>
<p>可以传递 validators 对象给 useForm 这个 Hook，然后在 hook 内在 setFieldValue 时对其进行验证，并在返回时返回错误信息给调用者。</p>
<p><strong>关键就是在于把表单状态逻辑和 UI 展示逻辑给予 Hooks 进行分离。</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>initialValues <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> validators<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>values<span class="token punctuation">,</span> setValues<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>errors<span class="token punctuation">,</span> setErrors<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> setFieldValue <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setValues</span><span class="token punctuation">(</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>values<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> value<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>validators<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> errMsg <span class="token operator">=</span> validators<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setErrors</span><span class="token punctuation">(</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token operator">...</span>errors<span class="token punctuation">,</span>
          <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> errMsg <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>validators<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> values<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> setFieldValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> validators <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Name length should be no less than 2."</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">email</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Invalid email address"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> values<span class="token punctuation">,</span> errors<span class="token punctuation">,</span> setFieldValue <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> validators<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      evt<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>values<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>label<span class="token operator">></span>Name<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span>values<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>errors<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>errors<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>label<span class="token operator">></span>Email<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
        <span class="token operator">&lt;</span>input
          value<span class="token operator">=</span><span class="token punctuation">&#123;</span>values<span class="token punctuation">.</span>email <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span>
          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
        <span class="token operator">/</span><span class="token operator">></span>
        <span class="token punctuation">&#123;</span>errors<span class="token punctuation">.</span>email <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>errors<span class="token punctuation">.</span>email<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><ol>
<li><p>如何在自定义的 useForm Hook 中提供 reset 的 API？</p>
<p>就是返回一个置空的函数。</p>
</li>
<li><p>在自定义的 useForm 内如何实现支持异步验证？</p>
</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 8 - 复杂状态处理</title>
    <url>/2023/07/15/notion/d45a29627dc244c/</url>
    <content><![CDATA[<h1 id="状态一致性"><a href="#状态一致性" class="headerlink" title="状态一致性"></a>状态一致性</h1><p><strong>React 开发就是复杂应用程序状态的管理和开发。</strong></p>
<h1 id="原则一：保证状态最小化"><a href="#原则一：保证状态最小化" class="headerlink" title="原则一：保证状态最小化"></a>原则一：保证状态最小化</h1><p>在保证 State 完整性的同时也要保证它的最小化，如果某些数据能从已有的 state 中计算得到那么不要把计算的结果存到 state 内。</p>
<p>按照 React 的状态驱动 UI 的思想，开发时第一步要<strong>考虑整个功能有哪几个状态</strong>。</p>
<p>React 提供的<code>useMemo</code>这个 Hook 就可以缓存计算的结果。</p>
<h1 id="原则二：避免中间状态，确保唯一数据源"><a href="#原则二：避免中间状态，确保唯一数据源" class="headerlink" title="原则二：避免中间状态，确保唯一数据源"></a>原则二：避免中间状态，确保唯一数据源</h1><p>在有些场景下，比如原始状态数据来自某个外部数据源，非 state 或者 props，冗余状态就没有那么明显，此时需要准确定位状态的数据源并在开发中确保它是唯一的数据源。</p>
<p><strong>这里的例子是 URL 上查询关键词同步的场景。</strong></p>
<h1 id="实战演练：创建自定义受控组件"><a href="#实战演练：创建自定义受控组件" class="headerlink" title="实战演练：创建自定义受控组件"></a>实战演练：创建自定义受控组件</h1><h2 id="受控组件：组件的展示完全由传入的属性决定。"><a href="#受控组件：组件的展示完全由传入的属性决定。" class="headerlink" title="受控组件：组件的展示完全由传入的属性决定。"></a>受控组件：组件的展示完全由传入的属性决定。</h2><h2 id="非受控组件：表单组件可以有自己的内部状态且他的展示值不受控。"><a href="#非受控组件：表单组件可以有自己的内部状态且他的展示值不受控。" class="headerlink" title="非受控组件：表单组件可以有自己的内部状态且他的展示值不受控。"></a>非受控组件：表单组件可以有自己的内部状态且他的展示值不受控。</h2><h2 id="自定义受控组件："><a href="#自定义受控组件：" class="headerlink" title="自定义受控组件："></a>自定义受控组件：</h2><ul>
<li>避免多余的状态：不需要在自定义组件内部去定义状态用于保存数据</li>
<li>找到准确的唯一数据源：准确且唯一的来源就是福组件传递进来的状态</li>
</ul>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>如何实现 useSearchParams（用于监听查询参数的变化）这个 Hook？</p>
<p>history.pushState 不会出发页面重新渲染，所以通常只能获取第一次的 URL 参数，如果 URL 参数发生变化无法查询到，所以可以通过 patch 的方法来监听 url 变化。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 10 - 函数组件设计模式</title>
    <url>/2023/08/05/notion/d51b780992d6450/</url>
    <content><![CDATA[<h1 id="函数组件设计模式"><a href="#函数组件设计模式" class="headerlink" title="函数组件设计模式"></a>函数组件设计模式</h1><p>保证状态的唯一数据源，语义化的拆分复杂组件都是一些设计模式。</p>
<h2 id="容器模式：实现按条件执行-Hooks"><a href="#容器模式：实现按条件执行-Hooks" class="headerlink" title="容器模式：实现按条件执行 Hooks"></a>容器模式：实现按条件执行 Hooks</h2><p>注意点：<strong>Hooks 必须在顶层作用域调用（因为 React 需要在函数组件内部维护所用到的 Hooks 的状态）</strong>。</p>
<p>比如有一个对话框组件，我们只想要它在组件出现时执行业务逻辑，那么就可以在 Hook 内部判断如果不显示则返回 null。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">UserModal</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visible<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是显然这样是无法通过编译的，因为在 return 之后使用了 useEffect 这个 Hook。</p>
<p>所以这里需要用到一个<strong>容器模式</strong>，就是<strong>把条件贩毒案的结果放在两个组件之中，确保真正的 render UI 的组件收到的所有属性都是有值的</strong>。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">UserModalWrapper</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visible<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserModal visible <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>就是在原来的函数组件外增加一个容器，这样就可以实现对应的条件渲染。</p>
<p>这样的好处是可以在根组件下减少条件判断语句，可以确保每个组件尽量短小，更便于阅读和维护。</p>
<p>也可以将一些非 render UI 相关的逻辑自包含进 hooks 内。</p>
<h2 id="使用-render-props-模式重用-UI-逻辑"><a href="#使用-render-props-模式重用-UI-逻辑" class="headerlink" title="使用 render props 模式重用 UI 逻辑"></a>使用 render props 模式重用 UI 逻辑</h2><p><strong>把一个 render 函数作为属性传递给某个组件，由这个组件去执行这个函数从而 render 实际的内容。</strong></p>
<p>在函数组件内 hooks 只能用作数据逻辑的重用，而涉及到 UI 就有些麻烦，这时候就可以尝试 render props 这个设计模式。</p>
<p>使用 render props 如何封装一个计数器，让他可以在不同的组件内使用。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">CounterRenderProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> change <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 调用时</span>
<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>CounterRenderProps<span class="token operator">></span>
      <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>CounterRenderProps<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里就是利用了 children 的这个特殊属性，也就是组件开始 tag 和结束 tag 之间的内容其实都会作为 children 这个属性传递给组件的。</p>
<p>很显然使用 Hooks 的方式是更简洁的，但是还是<strong>需要掌握 Render props 这种设计模式</strong>。</p>
<p><strong>这里需要研究老师给出的这个 ListWithMore 的例子。</strong></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>💤 「Notion」利用Notion API将Notion文章整合到本地Hexo项目（一）</title>
    <url>/2023/01/30/notion/d5fc6184d9cf447/</url>
    <content><![CDATA[<p>因为我的 Hexo 博客是拉取我在语雀上的文章还有本地写的文章，所以没有直接采用相关的 Notion 部署成 Blog 的已有 API。</p>
<p>还是使用将文章拉取到本地再手动部署的方式。</p>
<blockquote>
<p>参考：<a href="https://github.com/x-cold/yuque-hexo">yuque-hexo</a></p>
</blockquote>
<h2 id="为-Notion-API-设置访问令牌"><a href="#为-Notion-API-设置访问令牌" class="headerlink" title="为 Notion API 设置访问令牌"></a><strong>为 Notion API 设置访问令牌</strong></h2><p>需要设置一个 Integration（集成），通过 Notion API 连接访问自己的数据库，然后生成一个访问令牌来访问 Notion 的 API。</p>
<p>在<a href="https://developers.notion.com/reference/intro">Notion API 文档</a>页面，点击右上角的<strong>View my integrations</strong> 链接。点击<strong>+ New integration</strong>按钮。</p>
<p><img src="https://i.postimg.cc/xd0zGHgm/2022-09-10-20-16-22.png" alt="2022-09-10-20-16-22.png"></p>
<p>创建集成完毕后，将会在详情页看到自己的访问令牌：</p>
<p><img src="https://i.postimg.cc/BQ7h8Sg4/2022-09-10-20-17-28.png" alt="2022-09-10-20-17-28.png"></p>
<h2 id="在-Notion-内创建你的博客表格"><a href="#在-Notion-内创建你的博客表格" class="headerlink" title="在 Notion 内创建你的博客表格"></a>在 Notion 内创建你的博客表格</h2><p><img src="https://i.postimg.cc/zX4CZV7b/2022-09-10-20-20-05.png" alt="2022-09-10-20-20-05.png"></p>
<p>我创建了一个 Blog 表格，并为每个文章设置了<code>title</code>，<code>slug(urlname)</code>，<code>tags</code>，<code>categories</code>，<code>description</code>，<code>publish</code>，<code>created_at</code>和<code>updated_at</code>这几个字断。</p>
<p>其中<code>slug</code>是直接截取了 id 的一部分作为 url name：</p>
<p><img src="https://i.postimg.cc/HxW545YK/2022-09-10-20-23-53.png" alt="2022-09-10-20-23-53.png"></p>
<h2 id="在-blog-项目内配置相关信息"><a href="#在-blog-项目内配置相关信息" class="headerlink" title="在 blog 项目内配置相关信息"></a>在 blog 项目内配置相关信息</h2><p>点击 Blog 页面右上角的<strong>···</strong>按钮，在<code>Connections</code>内选择我们刚刚创建的<strong>my-blog</strong>集成。</p>
<p>事先拥有一个  <a href="https://github.com/hexojs/hexo">hexo</a>项目，并在  <code>package.json</code>中配置相关信息：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"notionConfig"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"mdNameFormat"</span><span class="token operator">:</span> <span class="token string">"slug"</span><span class="token punctuation">,</span>
    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://api.notion.com/v1/databases/"</span><span class="token punctuation">,</span>
    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"your Internal Integration Token"</span><span class="token punctuation">,</span>
    <span class="token property">"database"</span><span class="token operator">:</span> <span class="token string">"your database id"</span><span class="token punctuation">,</span>
    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts/notion"</span> <span class="token comment">// markdown所在文件</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>太久了，快要忘记内容了，等下次重新看下再继续。</p>
]]></content>
      <categories>
        <category>Notion</category>
      </categories>
      <tags>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 16 - 打包部署</title>
    <url>/2023/08/09/notion/d87352fa777e4ee/</url>
    <content><![CDATA[<h1 id="了解-Webpack"><a href="#了解-Webpack" class="headerlink" title="了解 Webpack"></a>了解 Webpack</h1><p>通常在实际开发中我们不需要太关注源代码是通过什么编译器如何打包成最后的应用程序的，因为 IDE 已经帮我们把这些都做好了。</p>
<p>但是我们需要知道它的主要功能，以及能够排查问题。</p>
<ul>
<li>Failed to compile：编译阶段的错误</li>
<li>SyntaxError：语法错误</li>
</ul>
<h1 id="Webpack-的基本工作原理"><a href="#Webpack-的基本工作原理" class="headerlink" title="Webpack 的基本工作原理"></a>Webpack 的基本工作原理</h1><p>它的核心思路就是将源代码以及图片，样式文件等资源文件都视为模块，然后通过提供对不同类型资源的处理器，将它们进行统一处理，形成最后可在浏览器运行的代码。</p>
<p>Webpack 的配置主要分成这几个部分：</p>
<ul>
<li>输入输出配置</li>
<li>配置对于每一类资源的处理器</li>
<li>插件配置</li>
</ul>
<h1 id="loader-和-plugin"><a href="#loader-和-plugin" class="headerlink" title="loader 和 plugin"></a>loader 和 plugin</h1><p>比如我们想在项目中使用 Less 作为 Css 的预处理器，需要在 Webpack 中进行配置。</p>
<ul>
<li>less-loader：将 less 代码转换成 css</li>
<li>css-loader：用于处理 css 中的 import，url 等语句，分析图片等静态资源</li>
<li>style-loader：自动生成代码，并将打包后的 css 插入页面的 style 标签。</li>
</ul>
<p>这个过程设计到 loader 的一个重要机制：<strong>链式使用</strong>。前面一个 loader 的输出结果可以作为后一个 loader 的输入。</p>
<p>最终生成的 css 代码会以字符串的形式作为一个模块打包到最终结果，然后在运行时由 style-loader 提供一个函数 injectStyleIntoStyleTag，将这个模块加入到页面的 style 标签内。</p>
<p>如果希望最终生成的 css 文件和 JavaScript 文件分开，此时就需要使用到 plugin。</p>
<p>只需要简单地引入 mini-css-extract-plugin，可以识别所有的 CSS 模块。</p>
<p>所以：</p>
<ul>
<li>loader：用于处理不同类型的资源，将它们转换成模块</li>
<li>plugin：通常用于生成一些除了 js bundle 之外的打包结果。</li>
</ul>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>代码的混淆和压缩应该用 loader 还是 plugin？</p>
<p>loader 是针对不同类型文件间的转换、关系处理，最终生成 js 模块，而 plugin 是针对某一个文件在打包过程中的处理，所以应该使用 plugin。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 15 - 按需加载</title>
    <url>/2023/08/09/notion/e3767b97b5ac41c/</url>
    <content><![CDATA[<blockquote>
<p>控制整个应用的大小，提高加载性能是前端开发需要的挑战。</p>
</blockquote>
<p>提高首屏加载速度：</p>
<ul>
<li>对应用分包</li>
<li>采用高效的缓存策略</li>
</ul>
<h1 id="实现按需加载"><a href="#实现按需加载" class="headerlink" title="实现按需加载"></a>实现按需加载</h1><h2 id="使用-import-语句，定义按需加载的起始模块"><a href="#使用-import-语句，定义按需加载的起始模块" class="headerlink" title="使用 import 语句，定义按需加载的起始模块"></a>使用 import 语句，定义按需加载的起始模块</h2><p>本质在于，需要有动态加载模块的能力——import（ECMA Script 标准的一个提案）。</p>
<p>这里的 import 作为一个函数动态运行，会返回一个 Promise，在模块加载成功后可以在 Promise 的 then 回调函数中去使用这个模块。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>RealPage<span class="token punctuation">,</span> setRealPage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./RealPage"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setRealPage</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RealPage<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>RealPage <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>import 语句完全由 Webpack 进行处理的。</strong>Webpack 会把./RealPage’这个模块为起点的所有依赖模块单独打成一个包。</p>
<p>策略：<strong>按业务模块为目标去做隔离，精良在每个模块的起始页去定义这个拆分点。</strong></p>
<h2 id="使用-react-loadble-实现组件的异步加载"><a href="#使用-react-loadble-实现组件的异步加载" class="headerlink" title="使用 react-loadble 实现组件的异步加载"></a>使用 react-loadble 实现组件的异步加载</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> Loadable <span class="token keyword">from</span> <span class="token string">"react-loadable"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">Loadable</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">loader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./HelloLazyLoad"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> error <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> error <span class="token operator">?</span> <span class="token string">"Failed"</span> <span class="token operator">:</span> <span class="token string">"Loading"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>loader：用于传入一个加载器回调，在组件渲染到页面时被执行</li>
<li>loading：用于显示加载状态的组件</li>
</ul>
<h1 id="使用-service-worker-缓存前端资源"><a href="#使用-service-worker-缓存前端资源" class="headerlink" title="使用 service worker 缓存前端资源"></a>使用 service worker 缓存前端资源</h1><p>对于加载性能的优化除了按需加载之外，还有就是前端资源的缓存。合理的缓存策略可以保证同样的前端资源永远只下载一次。</p>
<p>service worker 通常用于开发离线的 web 应用。它还提供了拦截前端请求的能力使得它可以结合 localStoage 成为一个独立的缓存方案（可以看作一种前端的资源请求代理）。</p>
<p>service worker 加上 cache storage（存储静态资源在浏览器端）具有更高的准确性和可靠性。</p>
<ul>
<li>缓存永远不过期</li>
<li>永远不会访问过期的资源</li>
</ul>
<h2 id="注册-Service-Worker"><a href="#注册-Service-Worker" class="headerlink" title="注册 Service Worker"></a>注册 Service Worker</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"serviceWorker"</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"sw.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"registered."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 sw.js 就是 Service Worker 脚本的代码路径。</p>
<h2 id="在-Service-Worker-安装后初始化缓存机制"><a href="#在-Service-Worker-安装后初始化缓存机制" class="headerlink" title="在 Service Worker 安装后初始化缓存机制"></a>在 Service Worker 安装后初始化缓存机制</h2><p>在 Service Worker 的实现代码被下载和执行后，就会触发安装完成的事件，可以在 sw.js 内监听这个事件，从而初始化自己的缓存机制。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 在sw.js中监听安装完成事件</span>
self<span class="token punctuation">.</span><span class="token function">addeventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> cachePromise <span class="token operator">=</span> caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"app_cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>cachePromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>Cache Storage 是浏览器提供的一种缓存机制。</strong></p>
<h2 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h2><p>可以通过监听 fetch 事件来处理所有的请求。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">self<span class="token punctuation">.</span><span class="token function">addeventListener</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>除了按需加载和 Service Worker，还想到哪些提升应用加载性能的方法？</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>https://www.notion.so/icons/branch_gray.svg Notion</title>
    <url>/2023/03/31/notion/e7cc256e34a7482/</url>
    <content><![CDATA[<h1 id="该系列将会持续更新，我会整理以及和大家分享我平时的常用公式"><a href="#该系列将会持续更新，我会整理以及和大家分享我平时的常用公式" class="headerlink" title="该系列将会持续更新，我会整理以及和大家分享我平时的常用公式"></a>该系列将会持续更新，我会整理以及和大家分享我平时的常用公式</h1><blockquote>
<p>Notion 公式是 Database 数据库最重要的功能之一，在 Notion 数据库中，我们可以通过添加一个公式属性，来基于其他属性进行运行各种计算和函数，来操作现有数据并得出许多其他有用的值，是<strong>计算，状态展示，数据汇总</strong>的最重要的用法。</p>
</blockquote>
<pre><code>本文章希望能通过简洁，通俗的介绍Notion基本使用方法，以及通过多例子给大家以Notion公式参考，帮助大家了解Formula相关的**术语**和**函数**解释以及用法。


---


**❗️ 官方介绍文档**


[bookmark](https://www.notion.so/help/guides/new-formulas-whats-changed)
</code></pre><h1 id="添加公式属性"><a href="#添加公式属性" class="headerlink" title="添加公式属性"></a>添加公式属性</h1><p>如果想要给 Database 编写公式，我们需要先添加一个公式属性到我们的目标 Database：</p>
<ul>
<li>单击数据库上的 ••• 菜单</li>
<li>选择“Property”，然后单击“+ Add Property”</li>
<li>选择 Formula</li>
<li>单击“Edit”，然后开始编写公式</li>
</ul>
<h1 id="公式编辑器"><a href="#公式编辑器" class="headerlink" title="公式编辑器"></a>公式编辑器</h1><p>当我们添加了公式属性之后，点击公式区域就可以打开我们的公式编辑器，我们的公式编辑器是由 4 部分组成：</p>
<ul>
<li>公式编辑框：我们可以在编辑框输入我们的公式，在这里输入的公式一旦超过编辑器的宽度公式就会换行，但也可以使用 Shift + Enter 创建一个新行！</li>
<li>公式功能目录：该模块包含了公式的 4 种元素，点击对应的元素就会自动在公式编辑框添加该元素 - 属性（Properties）：即我们在 database 内添加的属性列； - 常量（Constants）：即我们的数学常量，如 e，π（在公式内使用 pi 进行表示）； - 操作符（Operators）：即加减乘除类的运算符号等； - 函数/方法（Functions）：即一些已经设定好的运算形式；</li>
<li>公式示例区：当鼠标悬浮或者选择在某个元素之上时，编辑框右侧就会出现该元素的使用介绍以及示例；</li>
<li>公式预览区：打开公式编辑器，如果存在公式内容，则会看到该行公式结果的实时预览，如果公式不正确该区域也会显示错误并突出显示错误的代码，以便我们识别问题的根源。</li>
</ul>
<h1 id="公式数据"><a href="#公式数据" class="headerlink" title="公式数据"></a>公式数据</h1><blockquote>
<p>公式可以操作和返回不同的数据类型，比如如果最后返回的是布尔值则会以勾选框的形式进行显示，如果最后返回的是页面则会直接显示页面引用链接。</p>
</blockquote>
<h2 id="⤵️-公式可返回的-7-种数据类型："><a href="#⤵️-公式可返回的-7-种数据类型：" class="headerlink" title="⤵️  公式可返回的 7 种数据类型："></a>⤵️  公式可返回的 7 种数据类型：</h2><ul>
<li>String（字符串文本）：就是我们的文本内容</li>
<li>Number（数字）：就是数字结果，比如两个数值的和，差等，可用于数学运算</li>
<li>Boolean（布尔值）：即是非（true/false），比如<code>2&gt;1</code>这个公式输出的结果就是 false</li>
<li>Date（日期）：日期格式，可用于日期计算，格式化等等</li>
</ul>
<p><strong><code>- 以下为公式2.0新增返回格式 -</code></strong></p>
<ul>
<li><strong>Page（页面）：即 Notion 页面，显示为带有页面图标的页面链接</strong></li>
<li><strong>People（人员）：即在 Notion 内注册的用户，显示为带有头像的人的名字。</strong></li>
<li><strong>Array/List（数组/列表）：表示一个集合，比如 relations 就是一个关联页面集合，默认在公式内会以逗号分隔显示</strong></li>
</ul>
<p>PS：在原来的 Notion 内公式只能处理同一类型的数据，比如文本拼接，数字运算等，如果需要对不同类型进行操作则需要使用 format 或者 toNumber 这类方法进行类型的强制转换，但是<strong>在公式 2.0 内若存在多种数据类型则会自动进行强制转换为文本</strong>。</p>
]]></content>
      <categories>
        <category>Notion</category>
      </categories>
      <tags>
        <tag>Notion</tag>
        <tag>Notion Formula</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 18 - 服务器端组件</title>
    <url>/2023/08/12/notion/ef7e5152eeb54d2/</url>
    <content><![CDATA[<h1 id="React-17"><a href="#React-17" class="headerlink" title="React 17"></a>React 17</h1><h2 id="渐进升级"><a href="#渐进升级" class="headerlink" title="渐进升级"></a>渐进升级</h2><p>React 17 带来的渐进升级提供了一种新方案，渐进升级的支持就是一个应用可以同时由多个 React 版本。</p>
<h2 id="新的事件模型"><a href="#新的事件模型" class="headerlink" title="新的事件模型"></a>新的事件模型</h2><p>react 中所有的事件都是合成事件，实现的机制是在根节点上监听所有事件，经过 react 统一处理后发送到虚拟 DOM 节点上。</p>
<p>在 17 中，不需要再通过 Documnet 去监听事件，而是在组件树的根节点上去监听。</p>
<h2 id="新的-JSX-编译机制"><a href="#新的-JSX-编译机制" class="headerlink" title="新的 JSX 编译机制"></a>新的 JSX 编译机制</h2><p>之前要在 react 组件内使用 JSX 必须使用 import 引入 react，在编译时 JSX 会被翻译成<code>React.createElement</code>这样的 API。</p>
<p>而现在才用了新的编译机制，代码内不再需要引入 React。</p>
<h2 id="Suspense：悬停渲染"><a href="#Suspense：悬停渲染" class="headerlink" title="Suspense：悬停渲染"></a>Suspense：悬停渲染</h2><blockquote>
<p>挂起当前组件的渲染，直到异步操作完成。</p>
</blockquote>
<p>React 组件是状态驱动的，当状态发生改变，整个组件树都会进行一次整体的刷新，React 会将所有的 DOM 变化一次性渲染道浏览器中，这在应用非常复杂的场景下，会成为一个潜在的性能瓶颈。</p>
<p>有了 Suspense，异步请求不在需要组件去触发。</p>
<h2 id="Server-Components：服务器端-React-组件"><a href="#Server-Components：服务器端-React-组件" class="headerlink" title="Server Components：服务器端 React 组件"></a>Server Components：服务器端 React 组件</h2><p>能够在组件级别实现服务器端的渲染，在一个前端页面中有些组件是客户端渲染，有些组件是服务器渲染。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>💟 汪汪周刊 003期：如何突破自己的学习瓶颈</title>
    <url>/2023/02/13/notion/f232c878e4f8449/</url>
    <content><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/b92fc805-affe-49a2-859c-d44855a2cca3/IMG_6345.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055232Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=4beeef0d0922b22ab16b351e07739753862ee8d77b71f5912fd803e112de26cd&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="IMG_6345.jpg"></p>
<h3 id="Hello，大家好，这里是阿汪同学。"><a href="#Hello，大家好，这里是阿汪同学。" class="headerlink" title="Hello，大家好，这里是阿汪同学。"></a>Hello，大家好，这里是阿汪同学。</h3><h3 id="本期关键词：-星空葡萄"><a href="#本期关键词：-星空葡萄" class="headerlink" title="本期关键词： 星空葡萄"></a>本期关键词： 星空葡萄</h3><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>前几天在逛掘金的时候，看到了一篇大哥写的文章《<strong>如何突破技术瓶颈（适合 P6 以下</strong>）》，特别有感触，其实毕业后没多久就碰上了疫情导致在工作上一直处于舒适圈也没有突破，一直想学习精进也总是三分热度找不准方向。（在后面会分享该文章部分内容）</p>
<p>‼️ <strong>本周刊非纯技术周刊，包括各方面的分享</strong>。</p>
<h1 id="有趣的"><a href="#有趣的" class="headerlink" title="有趣的"></a>有趣的</h1><ul>
<li>本周比较忙，没有太多的时间去更新和学习，只能尽量保证一周一更。</li>
<li>对了我在 FlowUs 上开了一个线上自习室，欢迎大家和我一起学习打卡！有兴趣可以填写以下报名表！</li>
</ul>
<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/a0bdc100-d0e6-4660-8a91-9071d9d01779/a75bc9e0-a3f0-436c-99e0-6ff9e525ca97/IMG_6277.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240416%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240416T055232Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=154aa394b5fa78ed8c87ac88d3ac1d11c762cd6274f61a0cfdfcbc25b30d25ac&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="IMG_6277.jpg"></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><strong>ChatGPT 客户端，支持 Mac、Windows、Linux。</strong><a href="https://github.com/lencx/ChatGPT#-downloads">https://github.com/lencx/ChatGPT#-downloads</a></li>
<li><strong>Everything，</strong>在日常工作中由于文件夹越来越多，时常碰到找不到文件夹。Everything 是一款 Windows 系统的文件搜索工具，通过它可以快速查找电脑中的文件以及文件位置，真正实现全盘搜索</li>
</ul>
<h1 id="专业技术领域"><a href="#专业技术领域" class="headerlink" title="专业技术领域"></a>专业技术领域</h1><ul>
<li><strong>如何突破技术瓶颈（适合 P6 以下</strong>）》by 孟祥_成都 - 确立自己的具体发展方向 - 一步步接触比自己能力更高层次的代码 - 输入额外的知识储备 - 工作勇于走出舒适圈</li>
<li><p>• React 计划  signal  功能。</p>
<pre><code>    &gt; We might add a signals-like primitive to React but I don’t think it’s a great way to write UI code. It’s great for performance. But I prefer React’s model where you pretend the whole thing is recreated every time. Our plan is to use a compiler to achieve comparable performance.
</code></pre></li>
<li><p><a href="https://martinfowler.com/articles/modularizing-react-apps.html"><strong>Modularizing React Applications with Established UI Patterns</strong></a><strong><code>英文</code>**</strong>：如何用成熟的 UI 模式把 React 应用模块化。**</p>
</li>
</ul>
<h1 id="Widverse-·-汪汪汪世界"><a href="#Widverse-·-汪汪汪世界" class="headerlink" title="Widverse · 汪汪汪世界"></a>Widverse · 汪汪汪世界</h1><blockquote>
<p>Widverse 是我开发的组件库，支持嵌入 Notion，FlowUs，Wolai，github 等。</p>
</blockquote>
<ul>
<li>这周开放组件分享。</li>
</ul>
<h1 id="最后的碎碎念"><a href="#最后的碎碎念" class="headerlink" title="最后的碎碎念"></a>最后的碎碎念</h1><ul>
<li>不知不觉已经工作第 5 个年头了，但是回头看来自己还是一无所获，没有优秀的专业能力，没有学习热情，每天还是在浑浑噩噩，看到别人满满的 GitHub commits 还是会羡慕，但是自己又很难迈出那一步。</li>
</ul>
<h1 id="话题"><a href="#话题" class="headerlink" title="话题"></a>话题</h1><p>大家都工作了吗？你们对自己以后的职业发展有规划吗？</p>
<p><img src="https://i.hd-r.cn/9f144b95fa5e7e2b4105f7bbd6a511e4.jpg" alt="9f144b95fa5e7e2b4105f7bbd6a511e4.jpg"></p>
]]></content>
      <categories>
        <category>周刊</category>
      </categories>
      <tags>
        <tag>每周分享</tag>
      </tags>
  </entry>
  <entry>
    <title>🆕 在js内用文本内容定位DOM元素</title>
    <url>/2023/08/09/notion/f5c52bc4bd8d4a1/</url>
    <content><![CDATA[<blockquote>
<p>在开发中遇到了一个需求：在 url 内输入页面上的按钮 label 就可以触发按钮的点击事件。</p>
</blockquote>
<pre><code>此时就需要用文本内容来定位页面上的DOM元素。
</code></pre><h2 id="1-遍历法"><a href="#1-遍历法" class="headerlink" title="1. 遍历法"></a>1. 遍历法</h2><p>遍历页面上所有的相关元素。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=></span>
  el<span class="token punctuation">.</span>textContent<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"文本内容"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="2-XPATH-表达式"><a href="#2-XPATH-表达式" class="headerlink" title="2. XPATH 表达式"></a>2. XPATH 表达式</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">document
  <span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
    <span class="token string">"//span[contains(., '文本内容')]"</span><span class="token punctuation">,</span>
    document<span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    XPathResult<span class="token punctuation">.</span><span class="token constant">ANY_TYPE</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">iterateNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-jQuery"><a href="#3-jQuery" class="headerlink" title="3. jQuery"></a>3. jQuery</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> $span <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span:contains('文本内容')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取的是jQuery对象</span>
<span class="token keyword">var</span> span <span class="token operator">=</span> $span<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为 js 对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 9 - 异步处理：向服务端发送请求</title>
    <url>/2023/07/15/notion/fc979d697f5d45c/</url>
    <content><![CDATA[<h1 id="实现自己的-API-Client"><a href="#实现自己的-API-Client" class="headerlink" title="实现自己的 API Client"></a>实现自己的 API Client</h1><p>在项目内实现异步请求时第一个事情就是创建自己的 API Client，之后所有的请求都可以通过这个 Client 发出去。</p>
<ul>
<li>一些通用的 header</li>
<li>服务器地址的配置：比如可以根据当前环境判断连接的服务器地址</li>
<li>请求未认证的处理</li>
</ul>
<h1 id="使用-Hooks-思考异步请求：封装远程资源"><a href="#使用-Hooks-思考异步请求：封装远程资源" class="headerlink" title="使用 Hooks 思考异步请求：封装远程资源"></a>使用 Hooks 思考异步请求：封装远程资源</h1><p>对于一个 get 类型的 API，可以将它看成一个远程的数据源：</p>
<ul>
<li>Data</li>
<li>Error</li>
<li>Pending</li>
</ul>
<p>比起将请求直接写在组件内部，迁移到一个 Hook 内可以把组件的表现层逻辑写得更加简洁，将 API 的调用看作一个数据获取。</p>
<p>之后只需要将获取到的数据映射到 JSX 并显示出来即可。</p>
<p>这个模式<strong>仅适用于 get 请求逻辑</strong>，对于其他类型可查看第六节的 useAsync。</p>
<h1 id="多个-API-调用：处理并发或者串行请求"><a href="#多个-API-调用：处理并发或者串行请求" class="headerlink" title="多个 API 调用：处理并发或者串行请求"></a>多个 API 调用：处理并发或者串行请求</h1><p>比如一个博客文章展示页面的场景，这里需要三个请求：</p>
<ul>
<li>文章详情</li>
<li>作者信息，包括名字，头像等</li>
<li>文章的评论</li>
</ul>
<p>此时包含了并发和串行的场景，文章详情和评论可以并发请求，作者的信息需要等文章内容返回才能知道作者 ID，这是串行场景。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 传统场景</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>article<span class="token punctuation">,</span> comments<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token function">fetchArticle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
	<span class="token function">fetchComments</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>React 函数组件是一个同步函数，没有办法直接使用 await 这样的同步方法，而是需要将请求通过副作用去触发。</p>
<p>此时需要回到 React 的本质——状态驱动 UI。</p>
<p><strong>可以从状态变化的角度去组织异步调用，通过不同的状态组合来实现异步请求的逻辑。</strong></p>
<p>此时的实现思路：</p>
<ul>
<li>组件首次渲染，需要两个副作用去获取文章和评论</li>
<li>组件首次渲染，作者 ID 不存在不发送任何请求</li>
<li>文章内容返回，开始发送请求作者信息</li>
<li>展示作者信息</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> article<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useArticle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> comments <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useComments</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> user <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span>article<span class="token operator">?.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在useUser内增加一个user_id的依赖项和判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ol>
<li><p>每次调用 useArticle 这个 Hook 就会触发副作用去获取数据，但是有时候需要组件自动获取，有些需要点击某个按钮才去获取，此时如何去设计这个 Hook？</p>
<p>我的回答：增加一个是否请求的 deps？</p>
</li>
<li><p>Hook 都是使用 useState 保存了状态数据，意味着状态的范围限定在组件内部，组件销毁后数据就没了，此时希望数据直接缓存到全部状态该如何做？</p>
<p>我的回答：使用 redux 或者 localStorage？</p>
</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」类（class）与接口</title>
    <url>/2021/08/20/yuque/aa86ar/</url>
    <content><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote>
<p>传统方法中，JavaScript 通过构造函数实现类的概念，通过原型链实现继承。而在 ES6 中，我们终于迎来了 <code>class</code>。</p>
<p>TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。</p>
</blockquote>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>类（Class）：定义了一件事物的抽象特点，包含它的属性和方法</li>
<li>对象（Object）：类的实例，通过 <code>new</code> 生成</li>
<li>面向对象（OOP）的三大特性：<strong>封装、继承、多态</strong><ul>
<li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li>
<li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li>
<li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code> 和 <code>Dog</code> 都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code> 方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code> 还是 <code>Dog</code>，就可以直接调用 <code>eat</code> 方法，程序会自动判断出来应该如何执行 <code>eat</code></li>
</ul>
</li>
<li>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</li>
<li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code>表示公有属性或方法</li>
<li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li>
<li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li>
</ul>
<h4 id="ES6-类"><a href="#ES6-类" class="headerlink" title="ES6 类"></a>ES6 类</h4><p><a href="http://es6.ruanyifeng.com/#docs/class">ECMAScript 6 入门 - Class</a></p>
<h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><p>使用 <code>class</code> 定义类，使用 <code>constructor</code> 定义构造函数。</p>
<p>通过 <code>new</code> 生成新实例的时候，会自动调用构造函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> name<span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的 constructor(name)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"Meow, "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的 sayHi()</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Meow, My name is Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h5><p>使用 getter 和 setter 可以改变属性的赋值和读取行为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setter: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Kitty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// setter: Kitty</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span> <span class="token comment">// setter: Tom</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>使用 <code>static</code> 修饰符修饰的方法称为静态方法，只能直接通过类来调用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> <span class="token function">isAnimal</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Animal<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: a.isAnimal is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="ES7-类"><a href="#ES7-类" class="headerlink" title="ES7 类"></a>ES7 类</h4><h5 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h5><p>ES6 中实例的属性只能通过构造函数中的 <code>this.xxx</code> 来定义，ES7 提案中可以直接在类里面定义：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h5><p>使用 <code>static</code> 定义一个静态属性，与静态方法类似：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="TS-类"><a href="#TS-类" class="headerlink" title="TS 类"></a>TS 类</h4><h5 id="public-private-和-protected"><a href="#public-private-和-protected" class="headerlink" title="public private 和 protected"></a>public private 和 protected</h5><blockquote>
<p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>。</p>
</blockquote>
<ul>
<li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的；</li>
<li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问；</li>
<li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的；</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// Jack</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">private</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：<strong>TypeScript 编译之后的代码中，并没有限制 </strong><code>**private**</code><strong> 属性在外部的可访问性</strong>。</p>
<p>当构造函数修饰为 <code>private</code> 时，该类不允许被继承或者实例化：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当构造函数修饰为 <code>protected</code> 时，该类只允许被继承：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">protected</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h5><p>修饰符和<code>readonly</code>还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// public name: string;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// this.name = name;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>readonly</code>，只读属性关键字，只允许出现在属性声明，索引签名或构造函数中：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果同时出现其他访问修饰符，<code>readonly</code>需要写在其他修饰符后面：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// public readonly name;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">readonly</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// this.name = name;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p><code>abstract</code> 用于定义抽象类和其中的抽象方法。</p>
<ul>
<li>抽象类是不允许被实例化的：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>抽象类中的<strong>抽象方法</strong>必须被子类实现：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is eating.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error, 没有实现抽象方法sayHi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Meow, My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h4><p>在 TS 内给类加上类型与接口类似：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h3><blockquote>
<p>接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。</p>
</blockquote>
<p>同时接口还可以对类的一部分行为进行抽象。</p>
<h4 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h4><blockquote>
<p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</p>
</blockquote>
<p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Door</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"SecurityDoor alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个类可以实现多个接口：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">&#123;</span>
  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span> Light <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car light on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car light off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">LightableAlarm</span> <span class="token keyword">extends</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h4><p>常见的面向对象语言中，接口是不能继承类的，但是在 TypeScript 中是可以的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> point3d<span class="token operator">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 TypeScript 内，当我们在声明 <code>class Point</code> 时，除了会创建一个名为 <code>Point</code> 的类之外，同时也创建了一个名为 <code>Point</code> 的类型（实例的类型）。</p>
<p>所以我们既可以将 <code>Point</code> 当做一个类来用（使用 <code>new Point</code> 创建它的实例），也可以将 <code>Point</code> 当做一个类型来用（使用 <code>: Point</code> 表示参数的类型）。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 作为类</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 作为类型</span>
<span class="token keyword">function</span> <span class="token function">printPoint</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们声明 <code>interface Point3d extends Point</code> 时，<code>Point3d</code> 继承的实际上是类 <code>Point</code> 的实例的类型。</p>
<p>上面作为类型来使用的例子其实等价于：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PointInstanceType</span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">printPoint</span><span class="token punctuation">(</span>p<span class="token operator">:</span> PointInstanceType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>新声明的 <code>PointInstanceType</code> 类型，与声明 <code>class Point</code> 时创建的 <code>Point</code> 类型是等价的。</p>
<p>可以理解为定义了一个接口 <code>Point3d</code> 继承另一个接口 <code>PointInstanceType</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 等价于 interface Point3d extends PointInstanceType</span>
<span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>
  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>PointInstanceType</code> 相比于 <code>Point</code>，缺少了 <code>constructor</code> 方法，这是因为声明 <code>Point</code> 类时创建的 <code>Point</code> 类型是不包含构造函数的。另外，除了构造函数是不包含的，静态属性或静态方法也是不包含的（实例的类型当然不应该包括构造函数、静态属性或静态方法）。</p>
<p><strong>声明 </strong><code>**Point**</code><strong> 类时创建的 </strong><code>**Point**</code><strong> 类型只包含其中的实例属性和实例方法。</strong></p>
<p>在接口继承类的时候，也只会继承它的实例属性和实例方法。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>⚫ React Hooks 精进 11 - 创建自定义事件</title>
    <url>/2023/08/05/notion/f92c3fdaf36c4ac/</url>
    <content><![CDATA[<p>props 是组件之间通信的基础。</p>
<h1 id="在-React-中使用原生事件"><a href="#在-React-中使用原生事件" class="headerlink" title="在 React 中使用原生事件"></a>在 React 中使用原生事件</h1><h2 id="React-原生事件的原理：合成事件"><a href="#React-原生事件的原理：合成事件" class="headerlink" title="React 原生事件的原理：合成事件"></a>React 原生事件的原理：合成事件</h2><p>由于虚拟 DOM 的存在，在 React 中即使绑定一个事件到原生的 DOM 节点，事件也并不是绑定在对应的节点上，而是<strong>所有的事件都是绑定在根节点上</strong>，然后由 React 统一监听和管理，获取事件后分发到具体的虚拟 DOM 节点上。（浏览器事件的冒泡模型，无论事件是在哪个节点被触发，React 都可以通过事件的 srcElement 这个属性知道他从哪个节点发出的）。</p>
<h2 id="创建自定义事件"><a href="#创建自定义事件" class="headerlink" title="创建自定义事件"></a>创建自定义事件</h2><p>对于自定义组件，组件内的自定义事件也是非常重要的一部分，虽然自定义事件和原生事件看上去相似，但机制完全不一样：</p>
<ul>
<li>原生事件是浏览器的机制</li>
<li>自定义事件则是纯粹的组件自己的行为，本质是一种<strong>回调函数机制</strong></li>
</ul>
<p>习惯上会将这样的回调函数命名为<strong>onSomething</strong>。</p>
<h2 id="使用-Hooks-封装键盘事件"><a href="#使用-Hooks-封装键盘事件" class="headerlink" title="使用 Hooks 封装键盘事件"></a>使用 Hooks 封装键盘事件</h2><p>比如在一个表格页面支持左右键进行翻页的功能，那么需要我们在 useEffect 内做 window。addEvent Listener，然后在返回回调函数内 remove。</p>
<p>如果使用 Hook 来实现，就可以在多个组件中使用了。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">useKeyPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span>domeNode <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> setKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
		domNode<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> handleKeyPress<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
			domNode<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> handleKeyPress<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>domNode<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><p>如何用 Hook 实现监听两个按键同时按下？</p>
<p>同时按下两个按钮会触发两个 keyPress 事件，可以通过数组存储 key，在 keyup 的时候清空数组。</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」语句</title>
    <url>/2021/03/11/yuque/ang4as/</url>
    <content><![CDATA[<p>比较常见的语句包括<strong>变量声明、表达式、条件、循环</strong>等。</p>
<h2 id="Completion-类型"><a href="#Completion-类型" class="headerlink" title="Completion 类型"></a>Completion 类型</h2><p>q: 在 try 中有 return 语句，finally 中的内容还会执行吗？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然 return 执行了，但是函数并没有立即返回，又执行了 finally 里面的内容。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>finally 中的 return “覆盖”了 try 中的 return。在一个函数中执行了两次 return。</p>
<p>这一机制的基础正是 JavaScript 语句执行的完成状态，我们用一个标准类型来表示：Completion Record（我在类型一节提到过，Completion Record 用于描述异常、跳出等语句执行过程）。</p>
<p>Completion Record 表示一个语句执行完之后的结果，它有三个字段：</p>
<ul>
<li>[[type]] 表示完成的类型，有 break continue return throw 和 normal 几种类型；</li>
<li>[[value]] 表示语句的返回值，如果语句没有，则是 empty；</li>
<li>[[target]] 表示语句的目标，通常是一个 JavaScript 标签（标签在后文会有介绍）。</li>
</ul>
<p>JavaScript 正是依靠语句的 Completion Record 类型，方才可以在语句的复杂嵌套结构中，实现各种控制。</p>
<h3 id="语句的分类"><a href="#语句的分类" class="headerlink" title="语句的分类"></a>语句的分类</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1615445223702-799e3ef7-c111-4ed4-9e2b-47168c33f138.jpeg#height=872&amp;id=UDqtr&amp;originHeight=872&amp;originWidth=555&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=555" alt=""></p>
<h4 id="普通的语句"><a href="#普通的语句" class="headerlink" title="普通的语句"></a>普通的语句</h4><p>不带控制能力的语句称为普通语句。普通语句有下面几种：</p>
<ul>
<li>声明类语句<ul>
<li>var 声明</li>
<li>const 声明</li>
<li>let 声明</li>
<li>函数声明</li>
<li>类声明</li>
</ul>
</li>
<li>表达式语句</li>
<li>空语句</li>
<li>debugger 语句</li>
</ul>
<p>这些语句在执行时，从前到后顺次执行（我们这里先忽略 var 和函数声明的预处理机制），没有任何分支或者重复执行逻辑。</p>
<p>普通语句执行后，会得到 [[type]] 为 normal 的 Completion Record，JavaScript 引擎遇到这样的 Completion Record，会继续执行下一条语句（这些语句中，只有表达式语句会产生 [[value]]，但是从引擎控制的角度，这个 value 并没有什么用处）。</p>
<p>在 Chrome 等浏览器的控制台内输入一个<code>var a = 1</code>的语句，往往会得到一个 undefined 的输出，这就是语句的 Completion Record 的[[value]]。</p>
<h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><p>语句块就是拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套。</p>
<p>语句块本身并不复杂，需要注意的是语句块内部的语句的 Completion Record 的[[type]] 如果不为 normal，会打断语句块后续的语句执行。</p>
<p>return 语句可能产生 return 或者 throw 类型的 Completion Record。</p>
<p>内部为普通语句的语句块：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// normal, empty, empty</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// normal, 1, empty</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//normal, undefined, empty</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// normal, undefined, empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>加入 return：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// normal, empty, empty</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// return, 1, empty</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// return, 1, empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 block 中插入了一条 return 语句，就会产生了一个非 normal 记录，那么整个 block 会成为非 normal。这个结构就保证了非 normal 的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。</p>
<h4 id="控制类语句"><a href="#控制类语句" class="headerlink" title="控制类语句"></a>控制类语句</h4><p>控制型语句带有 if、switch 关键字，它们会对不同类型的 Completion Record 产生反应。</p>
<p>控制类语句分成两部分，一类是对其内部造成影响，如 if、switch、while/for、try。</p>
<p>另一类是对外部造成影响如 break、continue、return、throw。</p>
<p>这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效果。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1615445223714-4291ff93-7e23-48f4-a44b-69ab8dcc847b.png#height=463&amp;id=Wljim&amp;originHeight=463&amp;originWidth=840&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=840" alt=""></p>
<p>穿透：如 break 只对循环、switch-case 有用，如果在 if 代码块内，break 的作用可以理解成穿透 if 代码块，去外面寻找最新的循环（switch）。</p>
<p>消费：正好在这个条件下起作用了，比方 break 在 for 循环内被执行了，跳出循环。</p>
<p>特殊处理：例如开头的例子，finally 中的内容必须保证执行，所以 try/catch 执行完毕，即使得到的结果是非 normal 型的完成记录，也必须要执行 finally。而当 finally 执行也得到了非 normal 记录，则会使 finally 中的记录作为整个 try 结构的结果。</p>
<h4 id="带标签的语句"><a href="#带标签的语句" class="headerlink" title="带标签的语句"></a>带标签的语句</h4><p>Completion Record 中的 target 涉及了 JavaScript 中的一个语法，带标签的语句。</p>
<p>实际上，任何 JavaScript 语句是可以加标签的，在语句前加冒号即可：<code>firstStatement: var i = 1;</code></p>
<p>大部分时候，这个东西类似于注释，没有任何用处。唯一有作用的时候是：与完成记录类型中的 target 相配合，<strong>用于跳出多层循环</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">break</span> outer<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">outer: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">inner: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment">// 若不带outer，则自动跳出最近的一层循环体</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// outer: 1</span>
<span class="token comment">// inner: 2</span>
<span class="token comment">// inner: 3</span>
<span class="token comment">// finished</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>break/continue 语句如果后跟了关键字，会产生带 target 的完成记录。一旦完成记录带了 target，那么只有拥有对应 label 的循环语句会消费它。</p>
<p>普通场景下：</p>
<blockquote>
<p>break 语句可以跳出当前循环； break 语句通常配合 if，在满足条件时提前结束整个循环； break 语句总是跳出最近的一层循环； continue 语句可以提前结束本次循环，进入下次循环； continue 语句通常配合 if，在满足条件时提前结束本次循环。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」对象</title>
    <url>/2021/08/27/yuque/arrmd9/</url>
    <content><![CDATA[<blockquote>
<p>并非数据存储的工具，每个对象都是唯一的。</p>
<p>也可以看<a href="https://www.yuque.com/httishere/running/wev3mi">重学前端的对象篇</a>。</p>
</blockquote>
<h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul>
<li><code>Identifier</code>：唯一性（唯一标识）;</li>
<li><code>state</code>：状态（描述对象）;</li>
<li><code>behavior</code>：行为（状态的改变）;</li>
</ul>
<h4 id="小练习："><a href="#小练习：" class="headerlink" title="小练习："></a>小练习：</h4><p>狗咬人，“咬”的行为如何使用对象抽象。</p>
<p>从客观出发，人的状态改变的（受伤），所以“咬”是人的行为。</p>
<blockquote>
<p>在设计对象的状态和行为时，需要遵循“<strong>行为改变状态</strong>”的原则。</p>
</blockquote>
<h3 id="JS-内的对象"><a href="#JS-内的对象" class="headerlink" title="JS 内的对象"></a>JS 内的对象</h3><p><code>Object - [Property][Property][Property] - [prototype]</code>。</p>
<h4 id="属性：统一抽象对象状态和行为"><a href="#属性：统一抽象对象状态和行为" class="headerlink" title="属性：统一抽象对象状态和行为"></a>属性：统一抽象对象状态和行为</h4><blockquote>
<p>运行时。</p>
</blockquote>
<h5 id="数据属性：描述状态（也可以用于描述行为）；"><a href="#数据属性：描述状态（也可以用于描述行为）；" class="headerlink" title="数据属性：描述状态（也可以用于描述行为）；"></a>数据属性：描述状态（也可以用于描述行为）；</h5><ul>
<li>value：就是属性的值。</li>
<li>writable：决定属性能否被赋值。</li>
<li>enumerable：决定 for in 能否枚举该属性。</li>
<li>configurable：决定该属性能否被删除或者改变特征值。</li>
</ul>
<h5 id="访问器属性：描述行为；"><a href="#访问器属性：描述行为；" class="headerlink" title="访问器属性：描述行为；"></a>访问器属性：描述行为；</h5><ul>
<li>getter：函数或 undefined，在取属性值时被调用。</li>
<li>setter：函数或 undefined，在设置属性值时被调用。</li>
<li>enumerable：决定 for in 能否枚举该属性。</li>
<li>configurable：决定该属性能否被删除或者改变特征值。</li>
</ul>
<p>访问某个属性时，如果实例对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul>
<li><code>&#123;&#125;</code> / <code>.</code> / <code>[]</code> / <code>Object.defineProperty</code></li>
<li><code>Object.create</code> / <code>Object.setPrototypeOf</code> / <code>Object.getPtototypeOf</code><ul>
<li>Object.create 根据指定的原型创建新对象，原型可以是 null；</li>
<li>Object.getPrototypeOf 获得一个对象的原型；</li>
<li>Object.setPrototypeOf 设置一个对象的原型；</li>
</ul>
</li>
<li><code>new</code> / <code>class</code> / <code>extends</code>：基于类的面向对象；</li>
<li><code>new</code> / <code>function</code> / <code>prototype</code>：运行时是原型（四不像机制 😆），最好不要使用；</li>
</ul>
<h4 id="函数对象-Function-Object"><a href="#函数对象-Function-Object" class="headerlink" title="函数对象 Function Object"></a>函数对象 Function Object</h4><p>特殊的行为：<code>[[call]]</code>。</p>
<blockquote>
<p>在 JS 内使用 function 关键字、箭头运算符或者 Function 构造器创建的对象，都会有<code>[[call]]</code>行为。</p>
</blockquote>
<p>在使用<code>foo()</code>来讲对象作为函数调用时，会访问到<code>[[call]]</code>这个行为。</p>
<h4 id="特殊对象总结"><a href="#特殊对象总结" class="headerlink" title="特殊对象总结"></a>特殊对象总结</h4><p>【练习】</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」执行中都发生了什么</title>
    <url>/2021/03/11/yuque/ayyozw/</url>
    <content><![CDATA[<h2 id="Promise-or-setTimeOut"><a href="#Promise-or-setTimeOut" class="headerlink" title="Promise or setTimeOut"></a>Promise or setTimeOut</h2><p>得到一段 JS 代码时，浏览器或者 Node 环境首先要做的就是；传递给 JavaScript 引擎，并且要求它去执行。但是宿主环境当遇到一些事件时，会继续把一段代码传递给 JavaScript 引擎去执行。可能还会提供 API 给 JavaScript 引擎，比如 setTimeout 这样的 API，它会允许 JavaScript 在特定的时机执行。</p>
<p>一个 JavaScript 引擎会常驻于内存中，它等待着我们（宿主）把 JavaScript 代码或者函数传递给它执行。</p>
<p>在 ES5 之后，JavaScript 引入了 Promise，这样不需要浏览器的安排，JavaScript 引擎本身也可以发起任务了（宿主发起的任务称之为：<strong>宏任务</strong>，JS 引擎发起的任务称之为：<strong>微任务</strong>）。</p>
<p><em>相关：</em>【面试】什么是宏观任务？ 什么是微观任务？ 为什么会有宏观任务和微观任务？ JS 代码如何被执行？</p>
<h3 id="宏观和微观任务"><a href="#宏观和微观任务" class="headerlink" title="宏观和微观任务"></a>宏观和微观任务</h3><p>JavaScript 引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在 Node 术语中，也会把这个部分称为事件循环。</p>
<p>整个循环做的事情基本上就是反复“等待 - 执行”，实际中还有要判断循环是否结束、宏观任务队列等逻辑。</p>
<p>所以<strong>宏观任务的队列就相当于事件循环</strong>。</p>
<p>在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1615442641602-3651867b-6319-491c-a2fc-de436e5a69d1.jpeg#height=1636&amp;id=JNnUG&amp;originHeight=1636&amp;originWidth=1398&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1398" alt=""></p>
<blockquote>
<p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么 JavaScript 不能有多个线程呢 ？这样能提高效率啊。 JavaScript 的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？ 所以，为了避免复杂性，从一诞生，JavaScript 就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p>
</blockquote>
<p>有了宏观任务和微观任务机制，我们就可以实现 JavaScript 引擎级和宿主级的任务了，例如：Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API，则会添加宏观任务。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><blockquote>
<p>Promise 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 Promise 的 then 方法的回调）。</p>
</blockquote>
<p>基本使用方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>例 1</em> Promise 函数内的执行顺序：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就是调用时的then函数</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a b c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Promise 的 resolve 始终是异步操作，所以 c 无法出现在 b 之前。</p>
<p><em>例 2</em> setTimeOut 和 Promise 混合：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a b c d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Promise 产生的是 JavaScript 引擎内部的微任务，而 setTimeout 是浏览器 API，它产生宏任务，<strong>微任务始终先于宏任务</strong>（因为微观服务是包含在宏观服务中）。</p>
<p><em>例 3</em> 微任务优先于宏任务：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行一个耗时 1 秒的 Promise</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// c1 c2 d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置 1 秒延时，确保任务 c2 是在 d 之后被添加到任务队列，所以可以得出微任务优先的结论。</p>
<p><strong>分析异步执行的顺序：</strong></p>
<ul>
<li>首先我们分析有多少个宏任务；</li>
<li>在每个宏任务中，分析有多少个微任务；</li>
<li>根据调用次序，确定宏任务中的微任务执行次序；</li>
<li>根据宏任务的触发规则和调用次序，确定宏任务的执行次序；</li>
<li>确定整个顺序。</li>
</ul>
<p><em>例 4</em> 复杂的顺序问题</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a b c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>利用 Promise 把 setTimeout 封装成可以用于异步的函数，setTimeout 把整个代码分割成了 2 个宏观任务：</p>
<ul>
<li>第一个宏观任务中，包含了先后同步执行的 console.log(“a”); 和 console.log(“b”)；</li>
<li>setTimeout 后，第二个宏观任务执行调用了 resolve，然后 then 中的代码异步得到执行，所以调用了 console.log(“c”)；</li>
</ul>
<h3 id="新特性：async-await"><a href="#新特性：async-await" class="headerlink" title="新特性：async/await"></a>新特性：async/await</h3><p>它提供了用 for、if 等代码结构来编写异步的方式。它的运行时基础是 Promise。</p>
<p>async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。</p>
<p>async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 Promise。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// await 会等待一个Promise后继续执行</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a</span>
<span class="token comment">// c</span>
<span class="token comment">// after 2s</span>
<span class="token comment">// b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>async 函数可以嵌套，我们在定义了一批原子操作的情况下，可以利用 async 函数组合出新的 async 函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// after 2s</span>
<span class="token comment">// a</span>
<span class="token comment">// after 2s</span>
<span class="token comment">// b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>foo2 用 await 调用了两次异步函数 foo。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>我们把宿主发起的任务称为宏观任务，把 JavaScript 引擎发起的任务称为微观任务。许多的微观任务的队列组成了宏观任务。</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>实现一个红绿灯，把一个圆形 div 按照绿色 3 秒，黄色 1 秒，红色 2 秒循环改变背景色。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 实现一个循环执行后执行</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="闭包-amp-执行上下文"><a href="#闭包-amp-执行上下文" class="headerlink" title="闭包 &amp; 执行上下文"></a>闭包 &amp; 执行上下文</h2><p>JavaScript 执行中最粗粒度的任务：传给引擎执行的代码段。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1615442641578-5775739e-90d3-49da-bbd8-6e03dfc63e02.png#height=481&amp;id=xVwgh&amp;originHeight=481&amp;originWidth=745&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=745" alt=""></p>
<h3 id="闭包（closure）"><a href="#闭包（closure）" class="headerlink" title="闭包（closure）"></a>闭包（closure）</h3><p>闭包其实只是一个<strong>绑定了执行环境</strong>的<strong>函数</strong>，它携带了执行的环境。</p>
<p>根据古典定义，闭包组成部分：</p>
<ul>
<li>环境部分环境：<ul>
<li>函数的词法环境（执行上下文的一部分）</li>
<li>标识符列表：函数中用到的未声明的</li>
</ul>
</li>
<li>变量表达式部分：函数体</li>
</ul>
<p>所以 JavaScript 中的函数完全符合闭包的定义。它的环境部分是函数词法环境部分组成，它的标识符列表是函数中用到的未声明变量，它的表达式部分就是函数体。</p>
<p>JavaScript 中跟闭包对应的概念就是“函数”，而非作用域。</p>
<p>从广泛的角度说，普通函数就属于闭包，但这对于我们真正理解闭包毫无意义。真正的闭包应该是即使函数是在当前词法作用域之外执行，仍访问到函数内部属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="执行上下文：执行的基础设施"><a href="#执行上下文：执行的基础设施" class="headerlink" title="执行上下文：执行的基础设施"></a>执行上下文：执行的基础设施</h3><p>JavaScript 函数的主要复杂性来自于它携带的“环境部分”，JavaScript 标准把一段代码（包括函数），<em>执行所需的所有信息</em>定义为：“执行上下文”。</p>
<p><strong>执行上下文在 ES3 中</strong>，包含三个部分：</p>
<ul>
<li>scope：作用域，也常常被叫做作用域链。</li>
<li>variable object：变量对象，用于存储变量的对象。</li>
<li>this value：this 值。</li>
</ul>
<p><strong>在 ES5 中</strong>，我们改进了命名方式，把执行上下文最初的三个部分改为下面这个样子：</p>
<ul>
<li>lexical environment：词法环境，当获取变量时使用。</li>
<li>variable environment：变量环境，当声明变量时使用。</li>
<li>this value：this 值。</li>
</ul>
<p><strong>在 ES2018 中</strong>（<strong><em>推荐</em></strong>），执行上下文又变成了这个样子，this 值被归入 lexical environment：</p>
<ul>
<li>lexical environment：词法环境，当获取变量或者 this 值时使用。</li>
<li>variable environment：变量环境，当声明变量时使用。</li>
<li>code evaluation state：用于恢复代码执行位置。</li>
<li>Function：执行的任务是函数时使用，表示正在被执行的函数。</li>
<li>ScriptOrModule：执行的任务是脚本或者模块时使用，表示正在被执行的代码。</li>
<li>Realm：使用的基础库和内置对象实例。</li>
<li>Generator：仅生成器上下文有这个属性，表示当前生成器。</li>
</ul>
<h4 id="var-声明与赋值"><a href="#var-声明与赋值" class="headerlink" title="var 声明与赋值"></a>var 声明与赋值</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>var 声明作用于函数执行的作用域，也就是说，var 会穿透 for 、if 等语句。</p>
<p>在还没有 let 的时候—立即执行的函数表达式（<strong>立即执行函数，IIFE</strong>），通过创建一个函数，并且立即执行，来构造一个新的域，从而控制 var 的范围。</p>
<p><em>例 1</em></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token comment">//code</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token comment">//code</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用void关键字，代替立即执行函数包在外边的括号</span>
<span class="token comment">// 可以避免前一行代码不带分号而带来的问题</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token comment">//code</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>例 2</em>，有时候 var 的特性会导致声明的变量和被赋值的变量是两个 b：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> b<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> env <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"In function b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"In with b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Global b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// In function b:2</span>
<span class="token comment">// In with b:3</span>
<span class="token comment">// Global b:undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 Global function with 三个环境中，b 的值都不一样，而在 function 环境中，并没有出现 var b，这说明 with 内的 var b 作用到了 function 这个环境当中（with 内的 var b 得到了变量提升），所以并未改变 Global 环境内的 b。</p>
<p>所以 with 内的 b 对 Function 和 With 两个域都起了作用，所以不推荐使用 with。</p>
<h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>ES6 开始引入的新的变量声明模式，在 let 出现之前，JavaScript 的 if for 等语句皆不产生作用域。</p>
<p>会产生 let 使用的作用域：</p>
<ul>
<li>for；</li>
<li>if；</li>
<li>switch；</li>
<li>try/catch/finally。</li>
</ul>
<h4 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h4><p>在实际的前端开发中，通过 iframe 等方式创建多 window 环境并非罕见的操作，所以，这才促成了新概念 Realm 的引入。</p>
<p>Realm 中包含一组完整的内置对象，而且是复制关系，顶层对象的复制关系，原型是互不干涉的。</p>
<p>在浏览器环境中获取来自两个 Realm 的对象，它们跟本土的 Object 做 instanceOf 时会产生差异：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"javascript:var b = &#123;&#125;;"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> b1 <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
<span class="token keyword">var</span> b2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object object</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> b2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于 b1、 b2 由同样的代码“ {} ”在不同的 Realm 中执行，所以表现出了不同的行为。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>上述我们了解了执行上下文是什么（JavaScript 标准把一段代码（包括函数），<em>执行所需的所有信息</em>定义为：“执行上下文”。），也知道了任何语句的执行都会依赖特定的上下文。</p>
<p>切换上下文最主要的场景是函数调用。</p>
<p>类型：</p>
<ul>
<li>普通函数：function 关键字定义的函数，<code>function foo()&#123;&#125;</code>；</li>
<li>箭头函数：=&gt;运算符定义的函数，<code>const foo = () =&gt; &#123;&#125;</code>；</li>
<li>方法：在 class 内定义的函数，<code>class C &#123; foo() &#123;&#125; &#125;</code>；</li>
<li>生成器函数：用 function <em> 定义的函数，`function</em> foo(){}`；</li>
<li>类：用 class 定义的类，实际上也是函数，<code>class Foo &#123; constructor() &#123;&#125; &#125;</code>；</li>
<li>异步函数：普通函数、箭头函数和生成器函数加上 async 关键字，</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> foo<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// code</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对普通变量而言，这些函数并没有本质区别，都是遵循了“继承定义时环境”的规则，它们的一个行为差异在于 this 关键字。</p>
<h3 id="this-关键字的行为"><a href="#this-关键字的行为" class="headerlink" title="this 关键字的行为"></a>this 关键字的行为</h3><p><strong>this 是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的 this 值也不同</strong>（this 是运行时，作用域是定义时）。</p>
<h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a><em>例 1</em></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">showThis2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">showThis</span><span class="token operator">:</span> showThis<span class="token punctuation">,</span>
  <span class="token literal-property property">showThis2</span><span class="token operator">:</span> showThis2<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global</span>
o<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o</span>
o<span class="token punctuation">.</span><span class="token function">showThis2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1、</p>
<p>普通函数的 this 值由“调用它所使用的引用”决定（谁调用，指向谁）。</p>
<p>我们获取函数的表达式，它实际上返回的并非函数本身，而是一个 <strong>Reference 类型</strong>。</p>
<p>Reference 类型由两部分组成：一个对象和一个属性值。不难理解<code>o.showThis</code>产生的 Reference 类型，即由对象 o 和属性“showThis”构成。</p>
<p>当做一些算术运算（或者其他运算时），Reference 类型会被解引用，即获取真正的值（被引用的内容）来参与运算，而类似函数调用、delete 等操作，都需要用到 Reference 类型中的对象。</p>
<p>Reference 类型中的对象被当作 this 值，传入了执行函数时的上下文当中。所以对 this 的解释就是：<strong>调用函数时使用的引用，决定了函数执行时刻的 this 值</strong>。</p>
<p>从运行时的角度来看，this 跟面向对象毫无关联，它是与函数调用时使用的表达式相关。</p>
<p>2、</p>
<p>箭头函数实际上是 lambda 表达式，它的返回值是一个函数, 它不是一个语句，所以它产生的函数实际上是计算出来的而不是声明出来的 当然，我们在声明函数的时候也是有计算过程的，不过如果我们使用 function 来声明闭包，那么它的 this 其实是由 this 的绑定规则所决定的 但是如果我们使用 lambda 表达式来计算一个函数，那么它的 this 就取决于 lambda 表达式被计算时的运行环境。</p>
<p>箭头函数的 this 值不会指向外部对象， 其根源是<strong>箭头函数不会产生新的执行上下文</strong>，因此其 this 值将与外层函数保持一致，如果没有外层函数，则为 global。</p>
<p>箭头函数的 this 指向简单来说取决包裹箭头函数的第一个普通函数的 <code>this</code>。</p>
<h4 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a><em>例 2</em></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>
  <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> showThis <span class="token operator">=</span> o<span class="token punctuation">.</span>showThis<span class="token punctuation">;</span>

<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
o<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以生成器函数、异步生成器函数和异步普通函数跟普通函数行为是一致的，异步箭头函数与箭头函数行为是一致的。</p>
<h3 id="this-关键字的机制"><a href="#this-关键字的机制" class="headerlink" title="this 关键字的机制"></a>this 关键字的机制</h3><p>函数能够引用定义时的变量，如上文分析，函数也能记住定义时的 this，因此，函数内部必定有一个机制来保存这些信息。在 JavaScript 标准中，为函数规定了用来保存定义时上下文的私有属性[[Environment]]。</p>
<p>当一个函数执行时，会创建一条新的执行环境记录，记录的外层词法环境（outer lexical environment）会被设置成函数的[[Environment]]（也就是函数执行时会使用函数定义时的变量（在 [[Environment]] 中）。 如果这个变量不存在，则向外层查找，外层指向哪里仍然取决于函数定义之时，如果定义时外部有函数则指向外部函数，没有函数则指向 global。 函数执行之时，无论是以何种形式被调用（全局 or 嵌套函数），变量都会依照定义时的环境被查找出来。也就是说，定义时的代码结构决定了函数的“变量查找规则”，即“作用域链”）。</p>
<p>即<strong>切换上下文</strong>：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在别处(外部文件等)定义了foo：</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的 foo 能够访问 b（定义时词法环境），却不能访问 a（执行时的词法环境），这就是执行上下文的切换机制了。</p>
<p>JavaScript 用一个栈来管理执行上下文，这个栈中的每一项又包含一个链表。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1615442641594-c9b94c45-2cc0-461a-9954-2dbe83168bae.jpeg#height=489&amp;id=sAp0t&amp;originHeight=489&amp;originWidth=916&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=916" alt=""></p>
<p>当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈。</p>
<p>而 this 则是一个更为复杂的机制，JavaScript 标准定义了 <strong>[[thisMode]]</strong> 私有属性。[[thisMode]] 私有属性有三个取值：</p>
<ul>
<li>lexical：表示从上下文中找 this，这对应了箭头函数。</li>
<li>global：表示当 this 为 undefined 时，取全局对象，对应了普通函数。</li>
<li>strict：当严格模式时使用，this 严格按照调用时传入的值，可能为 null 或者 undefined。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reference中的对象是global</span>
<span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> showThis<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reference由于运算而被解引用，</span>
<span class="token comment">// 然后触发this机制[[thisMode]]私有属性的global取值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>方法的行为跟普通函数有差异，恰恰是因为 class 设计成了<strong>默认按 strict 模式执行</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">showThis</span><span class="token operator">:</span> showThis<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined，在非严格模式则是global</span>
o<span class="token punctuation">.</span><span class="token function">showThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数创建新的执行上下文中的词法环境记录时，会根据<strong>[[thisMode]]</strong>来标记新记录的[[ThisBindingStatus]]私有属性。</p>
<p>代码执行遇到 this 时，会逐层检查当前词法环境记录中的[[ThisBindingStatus]]，当找到有 this 的环境记录时获取 this 的值。</p>
<p>所以嵌套的箭头函数中的代码都指向外层 this：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o, o, o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="操作-this-的内置函数-call-bind-apply"><a href="#操作-this-的内置函数-call-bind-apply" class="headerlink" title="操作 this 的内置函数(call, bind, apply)"></a>操作 this 的内置函数(call, bind, apply)</h3><p>call 和 apply 可以指定函数调用时传入的 this，call 和 apply 作用是一样的，只是传参方式有区别，call 参数是对象+字符串；apply 参数是对象+数组。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125; 1 2 3</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;a: 1&#125; 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Function.prototype.bind 它可以生成一个绑定过的函数，这个函数的 this 值固定了参数，不是操作在原函数上而是重新生成了一个新函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125; 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PS：call、bind 和 apply 用于不接受 this 的函数类型（如箭头、class）都不会报错，但是它们无法实现改变 this ，不过可以实现传参。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」表达式&amp;运算符</title>
    <url>/2021/05/24/yuque/bo44og/</url>
    <content><![CDATA[<p>在一些通用的计算机语言设计理论中，能够出现在赋值表达式右边的叫做：右值表达式（RightHandSideExpression），而在 JavaScript 标准中，规定了在等号右边表达式叫做条件表达式（ConditionalExpression）。</p>
<h4 id="更新表达式-UpdateExpression"><a href="#更新表达式-UpdateExpression" class="headerlink" title="更新表达式 UpdateExpression"></a>更新表达式 UpdateExpression</h4><p>左值表达式搭配 ++ — 运算符，可以形成更新表达式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span>a<span class="token punctuation">;</span>
<span class="token operator">++</span>a<span class="token punctuation">;</span>
a<span class="token operator">--</span><span class="token punctuation">;</span>
a<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="一元运算表达式-UnaryExpression"><a href="#一元运算表达式-UnaryExpression" class="headerlink" title="一元运算表达式 UnaryExpression"></a>一元运算表达式 UnaryExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 搭配了一个一元运算符(delete, void, typeof, -, ~, !, await)</span>
<span class="token keyword">delete</span> a<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
<span class="token keyword">void</span> a<span class="token punctuation">;</span>
<span class="token keyword">typeof</span> a<span class="token punctuation">;</span>
<span class="token operator">-</span>a<span class="token punctuation">;</span>
<span class="token operator">~</span>a<span class="token punctuation">;</span>
<span class="token operator">!</span>a<span class="token punctuation">;</span>
<span class="token keyword">await</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="乘方表达式-ExponentiationExpression"><a href="#乘方表达式-ExponentiationExpression" class="headerlink" title="乘方表达式 ExponentiationExpression"></a>乘方表达式 ExponentiationExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">30</span> <span class="token operator">-</span> <span class="token comment">//正确</span>
  <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">//报错 => (-2) ** 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>** 运算是右结合的，这跟其它正常的运算符（也就是左结合运算符）都不一样。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 计算等价</span>
<span class="token number">4</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="乘法表达式-MultiplicativeExpression"><a href="#乘法表达式-MultiplicativeExpression" class="headerlink" title="乘法表达式 MultiplicativeExpression"></a>乘法表达式 MultiplicativeExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">*</span>
<span class="token operator">/</span>
<span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="加法表达式-AdditiveExpression"><a href="#加法表达式-AdditiveExpression" class="headerlink" title="加法表达式 AdditiveExpression"></a>加法表达式 AdditiveExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">+</span>
<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="移位表达式-ShiftExpression"><a href="#移位表达式-ShiftExpression" class="headerlink" title="移位表达式 ShiftExpression"></a>移位表达式 ShiftExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 移位表达式由加法表达式构成，移位是一种位运算</span>
<span class="token operator">&lt;&lt;</span> 向左移位
<span class="token operator">>></span> 向右移位
<span class="token operator">>>></span> 无符号向右移位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>移位运算把操作数看做二进制表示的整数，然后移动特定位数。所以左移 n 位相当于乘以 2 的 n 次方，右移 n 位相当于除以 2 取整 n 次。普通移位会保持正负数。无符号移位会把减号视为符号位 1，同时参与移位。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 2147483647(2 的 31 次方)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="关系表达式-RelationalExpression"><a href="#关系表达式-RelationalExpression" class="headerlink" title="关系表达式 RelationalExpression"></a>关系表达式 RelationalExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;=</span>
<span class="token operator">>=</span>
<span class="token operator">&lt;</span>
<span class="token operator">></span>
<span class="token keyword">instanceof</span>
<span class="token class-name">in</span>
<span class="token comment">// &lt;= 和 >= 关系运算，完全是针对数字的，所以 &lt;= 并不等价于 &lt; 或 ==</span>
<span class="token keyword">null</span> <span class="token operator">&lt;=</span> <span class="token keyword">undefined</span>
<span class="token comment">//false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>
<span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="相等表达式-EqualityExpression"><a href="#相等表达式-EqualityExpression" class="headerlink" title="相等表达式 EqualityExpression"></a>相等表达式 EqualityExpression</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">==</span>
<span class="token operator">!=</span>
<span class="token operator">===</span>
<span class="token operator">!==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>类型不同的变量比较时==运算只有三条规则：</p>
<ul>
<li>undefined 与 null 相等；</li>
<li>字符串和 bool 都转为数字再比较；</li>
<li>对象转换成 primitive 类型再比较。</li>
</ul>
<p>即：（一个是即使字符串与 boolean 比较，也都要转换成数字；另一个是对象如果转换成了 primitive 类型跟等号另一边类型恰好相同，则不需要转换成数字。）</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token comment">// true</span>
<span class="token boolean">true</span> <span class="token operator">==</span> <span class="token string">'true'</span> <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="位运算表达式"><a href="#位运算表达式" class="headerlink" title="位运算表达式"></a>位运算表达式</h4><ul>
<li>按位与表达式 BitwiseANDExpression</li>
<li>按位异或表达式 BitwiseANDExpression</li>
<li>按位或表达式 BitwiseORExpression。</li>
</ul>
<p>按位与表达式由按位与运算符（&amp;）连接按位异或表达式构成，按位与表达式把操作数视为二进制整数，然后把两个操作数按位做与运算。按位异或表达式由按位异或运算符（^）连接按位与表达式构成，按位异或表达式把操作数视为二进制整数，然后把两个操作数按位做异或运算。异或两位相同时得 0，两位不同时得 1。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token number">324</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 324 102</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>异或运算有个特征，那就是两次异或运算相当于取消。所以有一个异或运算的小技巧，就是用异或运算来交换两个整数的值。</p>
<p>按位或表达式由按位或运算符（|）连接相等表达式构成，按位或表达式把操作数视为二进制整数，然后把两个操作数按位做或运算。</p>
<p>按位或运算常常被用在一种叫做 Bitmask 的技术上,Bitmask 相当于使用一个整数来当做多个布尔型变量，比如 Iterator API：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> iterator <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
  NodeFilter<span class="token punctuation">.</span><span class="token constant">SHOW_TEXT</span> <span class="token operator">|</span> NodeFilter<span class="token punctuation">.</span><span class="token constant">SHOW_COMMENT</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="逻辑与表达式和逻辑或表达式"><a href="#逻辑与表达式和逻辑或表达式" class="headerlink" title="逻辑与表达式和逻辑或表达式"></a>逻辑与表达式和逻辑或表达式</h4><p>逻辑与表达式由按位或表达式经过逻辑与运算符连接构成，逻辑或表达式则由逻辑与表达式经逻辑或运算符连接构成。</p>
<p>这两种表达式都不会做类型转换，所以尽管是逻辑运算，但是最终的结果可能是其它类型。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 短路</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有时候喜欢用这个表达式来表示if逻辑判断和函数调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="条件表达式-ConditionalExpression"><a href="#条件表达式-ConditionalExpression" class="headerlink" title="条件表达式 ConditionalExpression"></a>条件表达式 ConditionalExpression</h4><p>由逻辑或表达式和条件运算符构成，条件运算符又称三目运算符，它有三个部分，由两个运算符?和:配合使用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">condition <span class="token operator">?</span> branch1 <span class="token operator">:</span> branch2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h4><p>总结下 JavaScript 中所有的运算符优先级和结合性。</p>
<p>MDN 总结：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「Algorithm」复杂度分析</title>
    <url>/2021/04/07/yuque/ba0x1s/</url>
    <content><![CDATA[<h2 id="复杂度分析方法"><a href="#复杂度分析方法" class="headerlink" title="复杂度分析方法"></a>复杂度分析方法</h2><p>数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间（“如何让计算机更快时间、更省空间的解决问题”）。</p>
<p>复杂度：时间和空间复杂度。</p>
<hr>
<p>事后统计法：运行代码后，通过统计、监控，就能得到算法执行的时间和占用的内存大小。</p>
<ol>
<li>测试结果非常依赖测试环境</li>
<li>测试结果受数据规模的影响很大</li>
</ol>
<hr>
<h3 id="大-O-复杂度表示法"><a href="#大-O-复杂度表示法" class="headerlink" title="大 O 复杂度表示法"></a>大 O 复杂度表示法</h3><p>算法的执行效率，粗略地讲，就是算法代码执行的时间。</p>
<p>例 1:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。</p>
<p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n_unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)_unit_time。可以看出来，<strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比。</strong></p>
<p>例 2:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n</span>
    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// n</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n * n</span>
      sum <span class="token operator">=</span> sum <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">;</span> <span class="token comment">// n * n</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第 2、3、4 行代码，每行都需要 1 个 unit<em>time 的执行时间，第 5、6 行代码循环执行了 n 遍，需要 2n </em> unit<em>time 的执行时间，第 7、8 行代码循环执行了 n 遍，所以需要 2n </em> unit_time 的执行时间。所以，整段代码总的执行时间 : T(n) = (2n+2n+3)*unit_time。</p>
<p>所以可以总结出一个规律公式：<code>T(n) = O(f(n))</code>。</p>
<p>其中，T(n) 表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。</p>
<p><strong>大 O 时间复杂度</strong>实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称时间复杂度。</p>
<p>而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。我们只需要记录一个<strong>最大量级</strong>就可以了，如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：<strong>T(n) = O(n)； T(n) = O(n)</strong>。</p>
<h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><ol>
<li>只关注循环执行次数最多的一段代码<br>如例 1，该代码块的循环体执行了 n 次，所以它的时间复杂度就是<code>T(n) = O(n)</code>。</li>
<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">int</span> sum_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token comment">// 循环体1</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 常量次数，跟数据规模无关</span>
     sum_1 <span class="token operator">=</span> sum_1 <span class="token operator">+</span> p<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">int</span> sum_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> q <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n</span>
     sum_2 <span class="token operator">=</span> sum_2 <span class="token operator">+</span> q<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">int</span> sum_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       sum_3 <span class="token operator">=</span> sum_3 <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> <span class="token comment">// n * n</span>

   <span class="token keyword">return</span> sum_1 <span class="token operator">+</span> sum_2 <span class="token operator">+</span> sum_3<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>循环体 1：这段代码循环 10000 次、100000 次，只要是一个已知的数，跟 n 无关，照样也是常量级的执行时间。当 n 无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉。因为它本身对增长趋势并没有影响。</li>
</ul>
<p>所以该代码块的时间复杂度为 T(n) = O(n)。</p>
<ol>
<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积<br>假设 T1(n) = O(n)，T2(n) = O(n2)，则 T1(n) * T2(n) = O(n3)。落实到具体的代码上，我们可以把乘法法则看成是嵌套循环：</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n * n</span>
     ret <span class="token operator">=</span> ret <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n</span>
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常见时间复杂度实例分析"><a href="#常见时间复杂度实例分析" class="headerlink" title="常见时间复杂度实例分析"></a>常见时间复杂度实例分析</h3><div class="table-container">
<table>
<thead>
<tr>
<th>复杂度量级</th>
<th>按数量级递增</th>
</tr>
</thead>
<tbody>
<tr>
<td>常量阶<code>O(n)</code></td>
<td>指数阶<code>O(2^n)</code></td>
</tr>
<tr>
<td>对数阶<code>O(logn)</code></td>
<td>阶乘阶<code>O(n!)</code></td>
</tr>
<tr>
<td>线性阶<code>O(n)</code></td>
<td></td>
</tr>
<tr>
<td>线性对数阶<code>O(nlogn)</code></td>
<td></td>
</tr>
<tr>
<td>平方阶<code>O(n^2)</code> 立方阶<code>O(n^3)</code> … k 次方阶<code>O(n^k)</code></td>
</tr>
</tbody>
</table>
</div>
<p>对于复杂度量级，可以粗略地分为两类：<strong>多项式量级</strong>和<strong>非多项式量级</strong>。其中，非多项式量级只有两个：<strong>O(2n) 和 O(n!)</strong>。</p>
<ul>
<li>常量阶 <code>O(1)</code><br>一般情况下，只要算法中不存在与 n 有关的循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是 Ο(1)。</li>
<li>对数阶 <code>O(logn)、O(nlogn)</code></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">i&#x3D;1;
while (i &lt;&#x3D; n)  &#123;
  i &#x3D; i * 2;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>从代码可以看出变量 i 的取值就是一个等比数列，<code>2, 2^2, 2^3...2^x</code>，当 i&lt;= n 时结束循环，即 2^x = n，所以循环次数 x = logn，所以该段代码的时间复杂度为 T(n) = O(logn)。<br>实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 O(logn)，因为对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em> log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。<br>如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 O(nlogn)。</li>
<li><code>O(m+n)、O(m*n)</code><br>代码的复杂度由<strong>两个数据的规模</strong>来决定：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> sum_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// m</span>
    sum_1 <span class="token operator">=</span> sum_1 <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">int</span> sum_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n</span>
    sum_2 <span class="token operator">=</span> sum_2 <span class="token operator">+</span> j<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> sum_1 <span class="token operator">+</span> sum_2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。</li>
</ul>
<h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系</strong>。空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    print out a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>
<p>数组变量占用的空间是 n，后续的操作是对 n 的内容进行修改，不算占用新的空间。</p>
<h2 id="复杂度分析取舍"><a href="#复杂度分析取舍" class="headerlink" title="复杂度分析取舍"></a>复杂度分析取舍</h2><p>四个复杂度分析方面的知识点，最好情况时间复杂度（best case time complexity）、最坏情况时间复杂度（worst case time complexity）、平均情况时间复杂度（average case time complexity）、均摊时间复杂度（amortized time complexity）。</p>
<h3 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// n表示数组array的长度</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显然该代码块的时间复杂度为 O(n)，但是实际情况下在数组内找到目标值之后无需继续循环遍历，所以可以优化为：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// n表示数组array的长度</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       pos <span class="token operator">=</span> i<span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么此时的时间复杂度还是 O(n)吗？</p>
<p>由于代码的循环中存在提前退出循环的操作，故而普通的时间复杂度分析就不能完美解释该代码片段的时间复杂度。</p>
<p>因为，要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>
<p>因此就有了<strong>最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度</strong>的概念，<strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度</strong>。在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这个时候对应的时间复杂度就是最好情况时间复杂度。同理，<strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度</strong>。就像刚举的那个例子，如果数组中没有要查找的变量 x，我们需要把整个数组都遍历一遍才行，所以这种最糟糕情况下对应的时间复杂度就是最坏情况时间复杂度。</p>
<h3 id="平均情况时间复杂度"><a href="#平均情况时间复杂度" class="headerlink" title="平均情况时间复杂度"></a>平均情况时间复杂度</h3><p>要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0 ～ n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>
<p><img src="https://g.yuque.com/gr/latex?%5Cfrac%7B1%2B2%2B3%2B...%2Bn%2Bn%7D%7Bn%2B1%7D%20%3D%20%5Cfrac%7Bn(n%2B3" alt="">%7D%7B2(n%2B1)%7D#card=math&amp;code=%5Cfrac%7B1%2B2%2B3%2B…%2Bn%2Bn%7D%7Bn%2B1%7D%20%3D%20%5Cfrac%7Bn%28n%2B3%29%7D%7B2%28n%2B1%29%7D&gt;)</p>
<p>时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以这个公式简化之后，得到的平均时间复杂度就是 O(n)。这个结论虽然是正确的，但是计算过程稍微有点儿问题，因为我们忽略了出现每种情况的概率。</p>
<p>我们假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0 ～ n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0 ～ n-1 中任意位置的概率就是 1/(2n)。</p>
<p>那么上面的<img src="https://g.yuque.com/gr/latex?1%2B2%2B3%2B...%2Bn%2Bn#card=math&amp;code=1%2B2%2B3%2B...%2Bn%2Bn" alt="">也就会变成<img src="https://g.yuque.com/gr/latex?1*%5Cfrac%7B1%7D%7B2n%7D%2B2*%5Cfrac%7B1%7D%7B2n%7D%2B3*%5Cfrac%7B1%7D%7B2n%7D%2B...%2Bn*%5Cfrac%7B1%7D%7B2n%7D%2B2*%5Cfrac%7B1%7D%7B2%7D#card=math&amp;code=1%2A%5Cfrac%7B1%7D%7B2n%7D%2B2%2A%5Cfrac%7B1%7D%7B2n%7D%2B3%2A%5Cfrac%7B1%7D%7B2n%7D%2B...%2Bn%2A%5Cfrac%7B1%7D%7B2n%7D%2B2%2A%5Cfrac%7B1%7D%7B2%7D" alt="">，这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以<strong>平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度</strong>。</p>
<h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>均摊时间复杂度，以及它对应的分析方法，摊还分析（或者叫平摊分析）。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// array表示一个长度为n的数组</span>
<span class="token comment">// 代码中的array.length就等于n</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         sum <span class="token operator">=</span> sum <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
      count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   array<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
   <span class="token operator">++</span>count<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 忽略方法调用代码，我们这里主要着重于该方法的时间复杂度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，我们用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>
<p>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p>
<p>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>
<p><img src="https://g.yuque.com/gr/latex?O(1" alt=""><em>%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO(1)</em>%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO(1)<em>%5Cfrac%7B1%7D%7Bn%2B1%7D%2B…%2BO(1)</em>%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO(n)*%5Cfrac%7B1%7D%7Bn%2B1%7D%20%3D%20%5Cfrac%7B2n%7D%7Bn%2B1%7D%20%3D%20O(1)#card=math&amp;code=O%281%29%2A%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO%281%29%2A%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO%281%29%2A%5Cfrac%7B1%7D%7Bn%2B1%7D%2B…%2BO%281%29%2A%5Cfrac%7B1%7D%7Bn%2B1%7D%2BO%28n%29%2A%5Cfrac%7B1%7D%7Bn%2B1%7D%20%3D%20%5Cfrac%7B2n%7D%7Bn%2B1%7D%20%3D%20O%281%29&gt;)（去掉系数，常量就是 n/n ）。</p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>通过 find 和 insert 的对比，find() 函数在极端情况下，复杂度才为 O(1)，但 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert()第一个区别于 find() 的地方。</p>
<p>对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，紧跟着 n-1 个 O(1) 的插入操作，循环往复。</p>
<p>针对这种特殊的场景，我们引入了一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong>。</p>
<blockquote>
<p>均摊分析法（均摊时间复杂度）： 1.各种情况有规律的出现，即每种情况对应的复杂度是规律的分布。 2.大部分情况复杂度相同，极个别情况复杂度较大，可以将这个特殊的复杂度均摊。</p>
</blockquote>
<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>
<p><strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong>。</p>
<h3 id="练手"><a href="#练手" class="headerlink" title="练手"></a>练手</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 全局变量，大小为10的数组array，长度len，下标i。</span>
<span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 往数组中添加一个元素</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 数组空间不够了</span>
     <span class="token comment">// 重新申请一个2倍大小的数组空间</span>
     <span class="token keyword">int</span> new_array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token comment">// 把原来array数组中的数据依次copy到new_array</span>
     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       new_array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token comment">// new_array复制给array，array现在大小就是2倍len了</span>
     array <span class="token operator">=</span> new_array<span class="token punctuation">;</span>
     len <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token comment">// 将element放到下标为i的位置，下标i加一</span>
   array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>
   <span class="token operator">++</span>i<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分两种情况，数组空间足够和数组空间不足。</p>
<ul>
<li>数组空间足够那就是直接插入数组，O(1)；</li>
<li>数组空间不足，需要遍历原数组，第一次是 len，第二次是 2*len，O(n)，这里的 n 不是数组规模而是方法调用规模；</li>
</ul>
<p>所以最好情况时间复杂度：O(1)，最坏情况时间复杂度：O(n)，平均情况时间复杂度：O(1)（同原文例子）。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」Some points</title>
    <url>/2021/02/23/yuque/bvs01g/</url>
    <content><![CDATA[<h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><p>原始类型存储的都是值，是没有函数可以调用的。<br><code>&#39;1&#39;.toString()</code> ，其实在这种情况下，<code>&#39;1&#39;</code>  已经不是原始类型了，而是被强制转换成了  <code>String</code>类型也就是对象类型，所以可以调用  <code>toString</code>  函数。<br><code>null</code>并不是对象类型，这是一个遗留 bug。</p>
<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>函数传参是传递对象指针的副本。<br><code>typeof</code>判断原始类型时除了<code>null</code>其他都可以正确判断，判断对象类型时除了<code>function</code>其他都为<code>object</code>。<br>想判断一个对象的正确类型，可以考虑使用  <code>instanceof</code>，因为内部机制是通过原型链来判断的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对象在转换类型的时候，会调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该函数来说，算法逻辑一般来说如下：</p>
<ul>
<li>如果已经是原始类型了，那就不需要转换了</li>
<li>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</li>
<li>调用 <code>x.toString()</code>，如果转换为基础类型，就返回转换的值</li>
<li>如果都没有返回原始类型，就会报错</li>
</ul>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>谁调用了函数，谁就是  <code>this</code>，<code>this</code>就是函数所处的作用域。<br>在全局域上调用，<code>this</code>就是<code>window</code>。<br>对于  <code>new</code>  的方式来说，<code>this</code>  被永远绑定在了实例化对象上。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 2</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有箭头函数其实是没有  <code>this</code>  的，箭头函数中的  <code>this</code>  只取决包裹箭头函数的第一个普通函数的  <code>this</code>。另外对箭头函数使用  <code>bind</code>  这类函数是无效的。<br>对于普通函数，不管我们给函数  <code>bind</code>  几次，函数中的  <code>this</code>  永远由第一次  <code>bind</code>  决定。<br><code>new</code>  的方式优先级最高，接下来是  <code>bind</code>  这些函数，然后是  <code>obj.foo()</code>  这种调用方式，最后是  <code>foo</code>  这种调用方式，同时，箭头函数的  <code>this</code>  一旦被绑定，就不会再被任何方式所改变。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1614046497785-d7ea7875-a854-494a-b25c-5b1fccccb258.png#height=531&amp;id=ZjQd4&amp;originHeight=531&amp;originWidth=744&amp;originalType=binary∶=1&amp;size=35164&amp;status=done&amp;style=none&amp;width=744" alt="image.png"></p>
<h4 id="vs"><a href="#vs" class="headerlink" title="== vs ==="></a>== vs ===</h4><p>对于  <code>==</code>  来说，如果对比双方的类型<strong>不一样</strong>的话，就会进行<strong>类型转换。</strong><br>会先判断是否在对比 <code>null</code> 和 <code>undefined</code>，是的话就会返回 <code>true</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token comment">// => true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">// => true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// => true ???</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>!运算符的优先级大于 ==，所以实际上这里还涉及到!的运算。<br>这个比较简单！会将后面的值转化为布尔值。即![]变成!Boolean([]), 也就是!true,也就是 false。<br>实际上是对比 <code>[] == false;</code><br>运用上面的顺序，false 是布尔值，所以转化为数值 Number(flase), 为 0。<br>对比<code>[] == 0;</code><br>满足第三条规则[] 是对象（数组也属于对象），0 不是对象。所以 ToPrimitive([])是””<br>对比<code>&quot;&quot; == 0;</code><br>满足第二条规则，”” 是字符串，0 是数值，对比 Number(“”) == 0, 也就是 0 == 0。<br>所以得出 <code>[] == ![]</code><br><strong>所以在使用时尽量使用</strong><code>**===**</code><strong>。</strong></p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><a href="https://www.yuque.com/httishere/serhyu/hr2ubu?view=doc_embed">「JS」闭包</a><br>函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>循环内异步事件处理：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 6 6 6 6 6</span>
<span class="token comment">// 使用let解决（推荐）</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 1 2 3 4 5</span>
<span class="token comment">// 使用闭包解决</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 for 循环中使用 var，因为 var 是全局变量，所以循环结束后值会被覆盖掉。<br>let 有自己的作用域块，所以在 for 循环表达式中使用 let 其实就等价于在代码块中使用 let，<code>for (let i = 1; i &lt;= 5; i++) &#123; 循环体 &#125;</code>在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。</p>
<h4 id="浅拷贝-vs-深拷贝"><a href="#浅拷贝-vs-深拷贝" class="headerlink" title="浅拷贝 vs 深拷贝"></a>浅拷贝 vs 深拷贝</h4><p>深拷贝：这个新变量里的值都是从原来的变量中复制而来，并且和原来的变量没有关联。<br>浅拷贝：新变量中存在一些仍然与原来的变量有关联的值。</p>
<p>浅拷贝的实现：</p>
<ul>
<li><code>Object.assign</code>：<code>let b = Object.assign(&#123;&#125;, a);</code></li>
<li><code>...</code>：<code>let b = &#123; ...a &#125;;</code></li>
</ul>
<p>但是只能解决第一层问题。<br>深拷贝的实现：一般使用<code>JSON.parse(JSON.stringify(object))</code>，但是该方法会忽略 <code>undefined</code>，会忽略 <code>symbol</code>，不能序列化函数，不能解决循环引用的对象。<br>推荐：<strong>lodash 的深拷贝函数</strong>。</p>
<h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>在一个实例对象中可以通过  <code>__proto__</code>找到一个原型对象，在该对象中定义了很多函数让我们来使用。<br>原型的  <code>constructor</code>  属性指向构造函数，构造函数又通过  <code>prototype</code>  属性指回原型，但是并不是所有函数都具有这个属性，<code>Function.prototype.bind()</code>就没有这个属性。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1614065706606-ab42b62d-2a07-45e3-9803-8567e9a5c042.png#height=781&amp;id=HgNjp&amp;originHeight=781&amp;originWidth=618&amp;originalType=binary∶=1&amp;size=241194&amp;status=done&amp;style=none&amp;width=618" alt="image.png"><br>其实原型链就是多个对象通过  <code>__proto__</code>  的方式连接了起来。为什么  <code>obj</code>  可以访问到  <code>valueOf</code>  函数，就是因为  <code>obj</code>  通过原型链找到了  <code>valueOf</code>  函数。</p>
<ul>
<li><code>Object</code> 是所有对象的原型，所有对象都可以通过 <code>__proto__</code> 找到它。</li>
<li><code>Function</code> 是所有函数的原型，所有函数都可以通过 <code>__proto__</code> 找到它。</li>
<li>函数的 <code>prototype</code> 是一个对象。</li>
<li>对象的 <code>__proto__</code> 属性指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链。</li>
</ul>
<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><ol>
<li>新生成了一个对象</li>
<li>链接到原型</li>
<li>绑定 this</li>
<li>返回新对象</li>
</ol>
<h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><p>全局执行上下文，函数执行上下文，eval 执行上下文。</p>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>好处：1. 解决命名冲突 2. 提供复用性 3. 提高代码可维护性。<br>AMD&amp;CMD</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// AMD</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./a"</span><span class="token punctuation">,</span> <span class="token string">"./b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 加载模块完毕可以使用</span>
  a<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// CMD</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 加载模块</span>
  <span class="token comment">// 可以把 require 写在函数体的任意地方实现延迟加载</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>防抖和节流的作用都是防止函数多次调用。每次触发函数的间隔小于 wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数 wait）调用函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// func是用户传入需要防抖的函数</span>
<span class="token comment">// wait是等待时间</span>
<span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 缓存一个定时器id</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里返回的函数是每次用户实际调用的防抖函数</span>
  <span class="token comment">// 如果已经设定过定时器了就清空上一次的定时器</span>
  <span class="token comment">// 开始一个新的定时器，延迟执行用户传入的方法</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 *
 * @param &#123;*&#125; func 要进行debouce的函数
 * @param &#123;*&#125; wait 等待时间,默认500ms
 * @param &#123;*&#125; immediate 是否立即执行
 */</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span> <span class="token comment">// 定时器</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 如果已经执行过，不再执行</span>
      <span class="token keyword">let</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>多次触发，间隔时间段执行。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param &#123;Function&#125; func
 * @param &#123;Int&#125; wait
 * @param &#123;Object&#125; options
 */</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">;</span>
  <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>
    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> throttled<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>options</code></p>
<ul>
<li><code>leading</code>：函数在每个等待时延的开始被调用，默认值为 false；</li>
<li><code>trailing</code>：函数在每个等待时延的结束被调用，默认值是 true；</li>
</ul>
<p>场景：</p>
<ul>
<li>leading-false，trailing-true：默认情况，即在延时结束后才会调用函数；</li>
<li>leading-true，trailing-true：在延时开始时就调用，延时结束后也会调用；</li>
<li>leading-true, trailing-false：只在延时开始时调用；</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」语句2</title>
    <url>/2021/05/20/yuque/der7kb/</url>
    <content><![CDATA[<p>在 JavaScript 标准中，把语句分成了两种：<strong>普通语句和声明型语句</strong>。</p>
<p>普通语句：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1621498112415-48c5e3fb-b3b7-49dd-8576-3798b9f3e004.png#height=786&amp;id=pJH2G&amp;originHeight=786&amp;originWidth=564&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=564" alt=""><br>声明语句：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1621498112365-7e6e4499-1bc7-4c56-9800-157fb6196f9f.jpeg#height=625&amp;id=OzISm&amp;originHeight=625&amp;originWidth=1043&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1043" alt=""></p>
<h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><p>语句块就是一个花括号区域，需要注意的是，语句块会产生作用域。</p>
<h4 id="空语句"><a href="#空语句" class="headerlink" title="空语句"></a>空语句</h4><p>就是单独的一个分号<code>;</code>，空语句的存在仅仅是从语言设计完备性的角度考虑，允许插入多个分号而不抛出错误。</p>
<h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for in 循环"></a>for in 循环</h4><p>for in 循环枚举对象的属性，这里体现了属性的 enumerable 特征。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">in</span> o<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>属性 c 位不可枚举类型，所以不会被获取到。</p>
<h4 id="for-of-and-for-await-of"><a href="#for-of-and-for-await-of" class="headerlink" title="for of and for await of"></a>for of and for await of</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它背后的机制是 iterator 机制，可以给任何一个对象添加 iterator，使它可以用于 for of 语句：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">_value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token operator">++</span><span class="token punctuation">,</span>
          <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> o<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在实际操作中，我们一般不需要这样定义 iterator，我们可以使用 generator function。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">yield</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义了一个异步生成器函数，异步生成器函数每隔一秒生成一个数字，这是一个无限的生成器。</span>
<span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>return 语句用于函数中，它终止函数的执行，并且指定函数的返回值。</p>
<h4 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h4><p>break 语句用于跳出循环语句或者 switch 语句，continue 语句用于结束本次循环并继续循环（在循环内使用）。</p>
<p>带标签的 break 和 continue 可以控制自己被外层的哪个语句结构消费，这可以跳出复杂的语句结构。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">break</span> outer<span class="token punctuation">;</span>
<span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> outer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><p>通知调试器在此断点。在没有调试器挂载时，它不产生任何效果。</p>
<h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><p>使用时注意：</p>
<ul>
<li>声明同时必定初始化；</li>
<li>尽可能在离使用的位置近处声明；</li>
<li>不要在意重复声明。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">doSth</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">doSth2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h4><p>let 和 const 的作用范围是 if、for 等结构型语句。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：let 和 const 声明虽然看上去是执行到了才会生效，但是实际上，它们还是会被预处理。如果当前作用域内有声明，就无法访问到外部的变量。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//抛错</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在执行到 const 语句前，我们的 JavaScript 引擎就已经知道后面的代码将会声明变量 a，从而不允许我们访问外层作用域中的 a。</p>
<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>声明特征跟 const 和 let 类似，都是作用于块级作用域，预处理阶段则会屏蔽外部变量。</p>
<p>class 内部，可以使用 constructor 关键字来定义构造函数。还能定义 getter/setter 和方法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Getter</span>
  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Method</span>
  <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>class 默认内部的函数定义都是 strict 模式的。</p>
<h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成器函数可以理解为返回一个序列的函数，它的底层是 iterator 机制。</p>
<p>async 函数是可以暂停执行，等待异步操作的函数，它的底层是 Promise 机制。</p>
<p>Final：请找出所有具有 Symbol.iterator 的原生对象，并且看看它们的 for of 遍历行为。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
    window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype <span class="token operator">&amp;&amp;</span>
    window<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>
  <span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">,</span>
  <span class="token string">"String"</span><span class="token punctuation">,</span>
  <span class="token string">"Uint8Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Int8Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Uint16Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Int16Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Uint32Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Int32Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Float32Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Float64Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Uint8ClampedArray"</span><span class="token punctuation">,</span>
  <span class="token string">"BigUint64Array"</span><span class="token punctuation">,</span>
  <span class="token string">"BigInt64Array"</span><span class="token punctuation">,</span>
  <span class="token string">"Map"</span><span class="token punctuation">,</span>
  <span class="token string">"Set"</span><span class="token punctuation">,</span>
  <span class="token string">"URLSearchParams"</span><span class="token punctuation">,</span>
  <span class="token string">"TouchList"</span><span class="token punctuation">,</span>
  <span class="token string">"TextTrackList"</span><span class="token punctuation">,</span>
  <span class="token string">"TextTrackCueList"</span><span class="token punctuation">,</span>
  <span class="token string">"StyleSheetList"</span><span class="token punctuation">,</span>
  <span class="token string">"StylePropertyMapReadOnly"</span><span class="token punctuation">,</span>
  <span class="token string">"StylePropertyMap"</span><span class="token punctuation">,</span>
  <span class="token string">"SVGTransformList"</span><span class="token punctuation">,</span>
  <span class="token string">"SVGStringList"</span><span class="token punctuation">,</span>
  <span class="token string">"SVGPointList"</span><span class="token punctuation">,</span>
  <span class="token string">"SVGNumberList"</span><span class="token punctuation">,</span>
  <span class="token string">"SVGLengthList"</span><span class="token punctuation">,</span>
  <span class="token string">"RadioNodeList"</span><span class="token punctuation">,</span>
  <span class="token string">"RTCStatsReport"</span><span class="token punctuation">,</span>
  <span class="token string">"PluginArray"</span><span class="token punctuation">,</span>
  <span class="token string">"Plugin"</span><span class="token punctuation">,</span>
  <span class="token string">"NodeList"</span><span class="token punctuation">,</span>
  <span class="token string">"NamedNodeMap"</span><span class="token punctuation">,</span>
  <span class="token string">"MimeTypeArray"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaList"</span><span class="token punctuation">,</span>
  <span class="token string">"Headers"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLSelectElement"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLOptionsCollection"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLFormElement"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLFormControlsCollection"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLCollection"</span><span class="token punctuation">,</span>
  <span class="token string">"HTMLAllCollection"</span><span class="token punctuation">,</span>
  <span class="token string">"FormData"</span><span class="token punctuation">,</span>
  <span class="token string">"FileList"</span><span class="token punctuation">,</span>
  <span class="token string">"DataTransferItemList"</span><span class="token punctuation">,</span>
  <span class="token string">"DOMTokenList"</span><span class="token punctuation">,</span>
  <span class="token string">"DOMStringList"</span><span class="token punctuation">,</span>
  <span class="token string">"DOMRectList"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSUnparsedValue"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSTransformValue"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSStyleDeclaration"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSRuleList"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSNumericArray"</span><span class="token punctuation">,</span>
  <span class="token string">"CSSKeyframesRule"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioParamMap"</span><span class="token punctuation">,</span>
  <span class="token string">"KeyboardLayoutMap"</span><span class="token punctuation">,</span>
  <span class="token string">"MIDIInputMap"</span><span class="token punctuation">,</span>
  <span class="token string">"MIDIOutputMap"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaKeyStatusMap"</span><span class="token punctuation">,</span>
  <span class="token string">"XRInputSourceArray"</span><span class="token punctuation">,</span>
  <span class="token string">"XRAnchorSet"</span><span class="token punctuation">,</span>
  <span class="token string">"CustomStateSet"</span><span class="token punctuation">,</span>
  <span class="token string">"webkitSpeechGrammarList"</span><span class="token punctuation">,</span>
  <span class="token string">"EventCounts"</span><span class="token punctuation">,</span>
  <span class="token string">"SourceBufferList"</span><span class="token punctuation">,</span>
  <span class="token string">"_"</span><span class="token punctuation">,</span>
  <span class="token string">"$"</span><span class="token punctuation">,</span>
  <span class="token string">"jQuery"</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有很多宿主环境提供的全局对象有 Symbol.iterator 属性，归类一下：String, Array, TypedArray, Map and Set 这五大类。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」接口，数组，函数</title>
    <url>/2021/08/17/yuque/cr8cob/</url>
    <content><![CDATA[<h3 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h3><p>使用接口（Interfaces）来定义对象的类型。</p>
<blockquote>
<p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。<br>TypeScript 中的接口是一个非常灵活的概念，除了可用于<a href="http://ts.xcatliu.com/advanced/class-and-interfaces.html#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3">对类的一部分行为进行抽象</a>以外，也常用于对「对象的形状（Shape）」进行描述。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> result<span class="token operator">:</span> Result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// result的形状必须与接口一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义的变量比接口少了一些属性或者多一些属性是不允许的；</li>
<li><strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong>；</li>
</ul>
<h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 可选属性: 该属性可以不存在</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><p>一个接口允许有任意的属性：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 任意属性取 string 类型的值</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>，比如任意属性的类型为 string，那么该接口不能存在 number，boolean 等类型的属性。</p>
<h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> tom<span class="token operator">:</span> List <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// error</span>

<span class="token keyword">let</span> Tony<span class="token operator">:</span> List <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Tony<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</strong>。</p>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常输出</span>

<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">"male"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">render</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常输出</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">"male"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 则会有类型检验的错误</span>

<span class="token comment">// 类型断言绕过类型判断</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> gender<span class="token operator">:</span> <span class="token string">"male"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Amy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">as</span> Result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型+[]"></a>类型+[]</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组泛型</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="接口表示数组"><a href="#接口表示数组" class="headerlink" title="接口表示数组"></a>接口表示数组</h4><p>基本不会这么使用。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> fibonacci<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h4><p>函数中的<code>arguments</code> 实际上是一个类数组，不能用普通的数组的方式来描述：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// error</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 length 和 callee 两个属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote>
<p>在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）。</p>
</blockquote>
<h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// 需要对输入输出的类型进行约束</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>输入多余的（或者少于要求的）参数，是不被允许的</strong>。</p>
<h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">mySum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。更精确的写法应该是：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">mySum</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>
<h4 id="接口定义函数"><a href="#接口定义函数" class="headerlink" title="接口定义函数"></a>接口定义函数</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>可选参数必须接在必需参数后面，即<strong>可选参数后面不允许再出现必需参数了</strong>。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Cat"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="剩余参数（rest-参数）"><a href="#剩余参数（rest-参数）" class="headerlink" title="剩余参数（rest 参数）"></a>剩余参数（rest 参数）</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：rest 参数只能是最后一个参数。</p>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」表达式与类型转换</title>
    <url>/2021/08/20/yuque/dpsto8/</url>
    <content><![CDATA[<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>运算符的优先级，为了使代码逻辑更加符合普遍认知。</p>
<h4 id="Member（成员访问）"><a href="#Member（成员访问）" class="headerlink" title="Member（成员访问）"></a>Member（成员访问）</h4><ul>
<li>a.b</li>
<li>a[b]</li>
<li>foo<code>string</code><br><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-08-18_17-13-03.jpg#id=J2SD5&amp;originHeight=284&amp;originWidth=1068&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"httishere"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

foo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>super.b</li>
<li>Super[b]</li>
<li>new target：可以判断当前函数是否是被 new 的方式调用</li>
<li>new Foo()</li>
</ul>
<h4 id="New"><a href="#New" class="headerlink" title="New"></a>New</h4><ul>
<li>new Foo：优先级与上述的 new 不同，带括号的前面的 new 的优先级更高，即<code>new new Foo()</code>等价于<code>new (new Foo())</code> 而非<code>(new new Foo)()</code>。<br><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-08-18_17-26-20.jpg#id=z5XVi&amp;originHeight=166&amp;originWidth=532&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cls1</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">cls2</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">cls2_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>s<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cls1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">cls2</span><span class="token punctuation">(</span><span class="token string">"httishere"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h4><ul>
<li>foo()</li>
<li>super()</li>
<li>foo()[‘b’]</li>
<li>foo().b</li>
</ul>
<h4 id="右值表达式"><a href="#右值表达式" class="headerlink" title="右值表达式"></a>右值表达式</h4><ul>
<li>a++</li>
<li>a—</li>
<li>++a</li>
<li>—a</li>
</ul>
<h4 id="单目运算"><a href="#单目运算" class="headerlink" title="单目运算"></a>单目运算</h4><ul>
<li>delete a</li>
<li>void foo()：在 js 内<code>void</code>为运算符，将所有都变成 undefined，如果需要生成一个 undefined 值，可以使用<code>void 0</code>。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void">void mdn</a></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 实际上也可以使用以下用法</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 但是，如果上一行代码末尾未加分号则会产生相应的问题</span>
<span class="token comment">// 所以推荐使用void来执行立即执行函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>typeof a</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>+a</li>
<li>-a</li>
<li>~a</li>
<li>!a：会进行类型转换；</li>
<li>await a</li>
</ul>
<h4 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h4><ul>
<li>指数运算，<code>**</code>：<code>2**3</code>即 2 的 3 次方，他是唯一的右结合运算符：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等价于</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>乘法类，<code>*, /, %</code></li>
<li>加法类，<code>+, -</code></li>
<li>移位，<code>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</code></li>
<li>比较，<code>&lt;, &gt;, &lt;=, &gt;=, instanceof, in</code></li>
<li>逻辑运算，<code>&amp;&amp;, ||</code></li>
<li>三目运算，<code>?:</code></li>
<li>等于，<code>==,!=, ===, !==</code></li>
<li>位运算，<code>&amp;, ^, |</code></li>
</ul>
<blockquote>
<p>运行时的加法：number 的加法，string 的加法。</p>
</blockquote>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><a href="https://www.yuque.com/httishere/running/nhlvq8#ibc7E">https://www.yuque.com/httishere/running/nhlvq8#ibc7E</a></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「SASS」使用指南（同步）</title>
    <url>/2021/12/21/yuque/epg357/</url>
    <content><![CDATA[<blockquote>
<p>SASS 是 CSS 开发的一种预处理工具，使得 CSS 开发更加简单可维护。</p>
</blockquote>
<h3 id="1-安装-amp-使用"><a href="#1-安装-amp-使用" class="headerlink" title="1. 安装&amp;使用"></a>1. 安装&amp;使用</h3><p>SASS 是 Ruby 语言写的，所以需要先安装 Ruby 再安装 SASS。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> sass

sass test.scss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="1-1-编译风格"><a href="#1-1-编译风格" class="headerlink" title="1.1 编译风格"></a>1.1 编译风格</h4><ul>
<li>nested：嵌套缩进的 css 代码，它是默认值。</li>
<li>expanded：没有缩进的、扩展的 css 代码。</li>
<li>compact：简洁格式的 css 代码。</li>
<li>compressed：压缩后的 css 代码。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sass <span class="token parameter variable">--style</span> compressed test.sass test.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="1-2-监听"><a href="#1-2-监听" class="headerlink" title="1.2 监听"></a>1.2 监听</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// <span class="token function">watch</span> a <span class="token function">file</span>

sass <span class="token parameter variable">--watch</span> input.scss:output.css

// <span class="token function">watch</span> a directory

sass <span class="token parameter variable">--watch</span> app/sass:public/stylesheets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h3><h4 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h4><p>所有变量以<code>$</code>开头：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">$<span class="token property">blue</span><span class="token punctuation">:</span> #0000ff<span class="token punctuation">;</span>

<span class="token selector">span</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> $blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>变量需要嵌入字符串，则需要被<code>#&#123;&#125;</code>包裹：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">$<span class="token property">side</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>

<span class="token selector">div</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">border-#</span><span class="token punctuation">&#123;</span>$side<span class="token punctuation">&#125;</span><span class="token property">-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-2-计算"><a href="#2-2-计算" class="headerlink" title="2.2 计算"></a>2.2 计算</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  　　　　margin<span class="token punctuation">:</span> <span class="token punctuation">(</span>14px/2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  　　　　top<span class="token punctuation">:</span> 50px + 100px<span class="token punctuation">;</span>
  　　　　right<span class="token punctuation">:</span> $var * 10%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-3-嵌套"><a href="#2-3-嵌套" class="headerlink" title="2.3 嵌套"></a>2.3 嵌套</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 选择器嵌套
div</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">hi</span> <span class="token punctuation">&#123;</span>
　　　　　　color<span class="token punctuation">:</span>red<span class="token punctuation">;</span>
　　　　<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">// 属性嵌套，比如border-color
// 注意，border后面必须加上冒号
　　p</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">border:</span> <span class="token punctuation">&#123;</span>
　　　　　　color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>
　　　　<span class="token punctuation">&#125;</span>
　　<span class="token punctuation">&#125;</span>

<span class="token selector">// 使用&amp;引用父元素
　　a</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> #ffb3ff<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h4><ul>
<li><code>/* comment */</code> ，会保留到编译后的文件；</li>
<li>单行注释 <code>// comment</code>，只保留在 SASS 源文件中，编译后被省略；</li>
<li>在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释：</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token comment">/*!
　　　　重要注释！
　　*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="3-代码复用"><a href="#3-代码复用" class="headerlink" title="3. 代码复用"></a>3. 代码复用</h3><h4 id="3-1-继承"><a href="#3-1-继承" class="headerlink" title="3.1 继承"></a>3.1 继承</h4><p>SASS 允许一个选择器，继承另一个选择器：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token selector">.class1</span> <span class="token punctuation">&#123;</span>
　　　　border<span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span>
　　<span class="token selector">.class2</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token atrule"><span class="token rule">@extend</span> .class1<span class="token punctuation">;</span></span>
　　　　font-size<span class="token punctuation">:</span>120%<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-2-Mixin"><a href="#3-2-Mixin" class="headerlink" title="3.2 Mixin"></a>3.2 Mixin</h4><p>Mixin 有点像 C 语言的宏（macro），是可以重用的代码块。<br>使用<code>@mixin</code>命令，定义一个代码块。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@mixin</span> left</span> <span class="token punctuation">&#123;</span>
　　　　float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>
　　　　margin-left<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span>

// mixin还可以指定参数和缺省值
　　<span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">left</span><span class="token punctuation">(</span>$<span class="token property">value</span><span class="token punctuation">:</span> 10px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
　　　　float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>
　　　　margin-right<span class="token punctuation">:</span> $value<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>@include</code>命令，调用这个 mixin。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token selector">div</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token atrule"><span class="token rule">@include</span> left<span class="token punctuation">;</span></span>
　　<span class="token punctuation">&#125;</span>

<span class="token selector">// 加入参数
　　div</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token atrule"><span class="token rule">@include</span> <span class="token function">left</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="例子：生成浏览器前缀"><a href="#例子：生成浏览器前缀" class="headerlink" title="例子：生成浏览器前缀"></a>例子：生成浏览器前缀</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">rounded</span><span class="token punctuation">(</span>$vert<span class="token punctuation">,</span> $horz<span class="token punctuation">,</span> $<span class="token property">radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">border-#</span><span class="token punctuation">&#123;</span>$vert<span class="token punctuation">&#125;</span><span class="token selector">-#</span><span class="token punctuation">&#123;</span>$horz<span class="token punctuation">&#125;</span><span class="token property">-radius</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span>
　　　　<span class="token selector">-moz-border-radius-#</span><span class="token punctuation">&#123;</span>$vert<span class="token punctuation">&#125;</span><span class="token selector">#</span><span class="token punctuation">&#123;</span>$horz<span class="token punctuation">&#125;</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span>
　　　　<span class="token selector">-webkit-border-#</span><span class="token punctuation">&#123;</span>$vert<span class="token punctuation">&#125;</span><span class="token selector">-#</span><span class="token punctuation">&#123;</span>$horz<span class="token punctuation">&#125;</span><span class="token property">-radius</span><span class="token punctuation">:</span> $radius<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span>

　　<span class="token selector">#navbar li</span> <span class="token punctuation">&#123;</span> <span class="token atrule"><span class="token rule">@include</span> <span class="token function">rounded</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span></span> <span class="token punctuation">&#125;</span>

　　<span class="token selector">#footer</span> <span class="token punctuation">&#123;</span> <span class="token atrule"><span class="token rule">@include</span> <span class="token function">rounded</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> left<span class="token punctuation">,</span> 5px<span class="token punctuation">)</span><span class="token punctuation">;</span></span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-3-颜色函数"><a href="#3-3-颜色函数" class="headerlink" title="3.3 颜色函数"></a>3.3 颜色函数</h4><p>内置的颜色函数，以便生成系列颜色：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token function">lighten</span><span class="token punctuation">(</span>#cc3<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span> // #d6d65c
　　<span class="token function">darken</span><span class="token punctuation">(</span>#cc3<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span> // #a3a329
　　<span class="token function">grayscale</span><span class="token punctuation">(</span>#cc3<span class="token punctuation">)</span> // #808080
　　<span class="token function">complement</span><span class="token punctuation">(</span>#cc3<span class="token punctuation">)</span> // #33c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-4-插入文件"><a href="#3-4-插入文件" class="headerlink" title="3.4 插入文件"></a>3.4 插入文件</h4><p><code>@import</code>命令，用来插入外部文件：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"path/filename.scss"</span><span class="token punctuation">;</span></span>
　　<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"foo.css"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="4-高级用法"><a href="#4-高级用法" class="headerlink" title="4. 高级用法"></a>4. 高级用法</h3><h4 id="4-1-条件语句-if"><a href="#4-1-条件语句-if" class="headerlink" title="4.1 条件语句@if"></a>4.1 条件语句<code>@if</code></h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token selector">p</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token atrule"><span class="token rule">@if</span> 1 + 1 == 2</span> <span class="token punctuation">&#123;</span> <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
　　　　<span class="token atrule"><span class="token rule">@if</span> 5 &lt; 3</span> <span class="token punctuation">&#123;</span> <span class="token property">border</span><span class="token punctuation">:</span> 2px dotted<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
　　<span class="token punctuation">&#125;</span>

　　<span class="token atrule"><span class="token rule">@if</span> <span class="token function">lightness</span><span class="token punctuation">(</span>$color<span class="token punctuation">)</span> > 30%</span> <span class="token punctuation">&#123;</span>
　　　　background-color<span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span> <span class="token atrule"><span class="token rule">@else</span></span> <span class="token punctuation">&#123;</span>
　　　　background-color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-2-循环语句"><a href="#4-2-循环语句" class="headerlink" title="4.2 循环语句"></a>4.2 循环语句</h4><p>for 循环：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@for</span> $i from 1 to 10</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">.border-#</span><span class="token punctuation">&#123;</span>$i<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
　　　　　　<span class="token selector">border: #</span><span class="token punctuation">&#123;</span>$i<span class="token punctuation">&#125;</span>px solid blue<span class="token punctuation">;</span>
　　　　<span class="token punctuation">&#125;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>while 循环：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　$<span class="token property">i</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>

　　<span class="token atrule"><span class="token rule">@while</span> $i > 0</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">.item-#</span><span class="token punctuation">&#123;</span>$i<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span> 2em * $i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
　　　　$<span class="token property">i</span><span class="token punctuation">:</span> $i - 2<span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>each：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@each</span> $member in a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span> <span class="token punctuation">&#123;</span>
　　　　<span class="token selector">.#</span><span class="token punctuation">&#123;</span>$member<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
　　　　　　background-image<span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/image/#&#123;$member&#125;.jpg"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
　　　　<span class="token punctuation">&#125;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-3-自定义函数"><a href="#4-3-自定义函数" class="headerlink" title="4.3 自定义函数"></a>4.3 自定义函数</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css">　　<span class="token atrule"><span class="token rule">@function</span> <span class="token function">double</span><span class="token punctuation">(</span>$n<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
　　　　<span class="token atrule"><span class="token rule">@return</span> $n * 2<span class="token punctuation">;</span></span>
　　<span class="token punctuation">&#125;</span>

　　<span class="token selector">#sidebar</span> <span class="token punctuation">&#123;</span>
　　　　width<span class="token punctuation">:</span> <span class="token function">double</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考：<a href="https://www.ruanyifeng.com/blog/2012/06/sass.html">SASS 用法指南-阮一峰</a>，<a href="https://sass-lang.com">官方文档</a><br>相关：<a href="https://www.yuque.com/httishere/blog/fyor46">Less 使用总结</a></p>
]]></content>
      <categories>
        <category>SASS</category>
      </categories>
      <tags>
        <tag>SASS</tag>
      </tags>
  </entry>
  <entry>
    <title>「Daily」hexo博客使用gitalk时授权登录时403问题</title>
    <url>/2024/04/16/yuque/ewrpyfnohrzvrpmx/</url>
    <content><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>最近在更新我的博客主题所以重构了很多内容，其中包括 gitalk。<br>但是在部署完博客后发现使用文章下 gitalk 进行授权登录时报 403 错误。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/250093/1713252675112-32560f9a-57e6-4bee-a291-1715008cee95.png#averageHue=%23fdfdfd&amp;clientId=u40d86f65-9917-4&amp;from=ui&amp;id=uf7fd8aec&amp;originHeight=600&amp;originWidth=1330&amp;originalType=binary∶=2&amp;rotation=0&amp;showTitle=false&amp;size=97969&amp;status=done&amp;style=none&amp;taskId=u21808244-08b3-4d1b-9afc-5400c82ea18&amp;title=" alt="截屏2024-04-16 15.24.38.png"></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<p>参考方法：<a href="https://cuiqingcai.com/30010.html">https://cuiqingcai.com/30010.html</a></p>
</blockquote>
<p>主要问题就是在 github 授权登录时遇到了跨域问题。<br>但是又遇到了<code>Network Error</code>的问题，最后觉得放弃 gitalk。</p>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」类型检查机制</title>
    <url>/2021/12/21/yuque/fh8vi3/</url>
    <content><![CDATA[<h3 id="类型检查机制"><a href="#类型检查机制" class="headerlink" title="类型检查机制"></a>类型检查机制</h3><p>辅助开发，提高开发效率。</p>
<ul>
<li>类型推断</li>
<li>类型兼容性</li>
<li>类型保护</li>
</ul>
<h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><p>不需要指定变量类型（韩式的返回值类型），ts 可以根据某些规则自动推断类型。</p>
<ul>
<li>基础类型推断</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 推断为Number</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>最佳通用类型推断</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 会尽可能推断为符合当前所有类型的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>上下文推断<br>类型断言</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">window<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  event<span class="token punctuation">.</span>button<span class="token punctuation">;</span> <span class="token comment">// 报错，因为button不是键盘事件，而是鼠标事件</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">as</span> Foo<span class="token punctuation">;</span> <span class="token comment">// 但不能滥用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h4><blockquote>
<p>兼容：当一个类型可以被赋值给另一个类型。<br>X 兼容 Y：X（目标类型） = Y（源类型）</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> s<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>接口兼容性，源类型必须拥有目标类型的必要属性</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  c<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token constant">X</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y<span class="token operator">:</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>函数兼容性<br>需要满足三个条件：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">hor</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> Handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>目标函数的参数个数要多于源函数的参数个数，<code>let handler = (a: number) =&gt; &#123;&#125;</code>，存在可选参数/剩余参数时，固定参数可兼容可选参数和剩余参数，可选参数不兼容固定参数和剩余参数。</li>
<li>参数类型必须匹配</li>
<li>目标函数的返回类型必须要与源函数的返回类型或者子类型</li>
<li>枚举兼容</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Fruit <span class="token punctuation">&#123;</span>
  Apple<span class="token punctuation">,</span>
  Banana<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>
  Red<span class="token punctuation">,</span>
  Yellow<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> fruit<span class="token operator">:</span> Fruit<span class="token punctuation">.</span>Apple <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> no<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> Fruit<span class="token punctuation">.</span>Apple<span class="token punctuation">;</span> <span class="token comment">// 枚举和number可以相互兼容</span>
<span class="token keyword">let</span> color<span class="token operator">:</span> Color<span class="token punctuation">.</span>Red <span class="token operator">=</span> Fruit<span class="token punctuation">.</span>Apple<span class="token punctuation">;</span> <span class="token comment">// 报错，不兼容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>类兼容性<br><strong>静态成员和构造函数不参与比较</strong>。<br>如果类内存在私有成员，即便成员名称相同也不可兼容，除了父类子类之前。</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> q<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">B</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 可兼容</span>
b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 可兼容</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>泛型兼容<br>只有类型参数 T 在被类型成员使用时可能会影响实例的兼容性。<br>泛型函数也是类似的，只要参数类型不被使用，那么实例就可以被兼容。</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Empty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> obj_1<span class="token operator">:</span> Empty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj_2<span class="token operator">:</span> Empty<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj_1 <span class="token operator">=</span> obj_2<span class="token punctuation">;</span> <span class="token comment">// 兼容</span>

<span class="token keyword">interface</span> <span class="token class-name">Empty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> obj_1<span class="token operator">:</span> Empty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj_2<span class="token operator">:</span> Empty<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj_1 <span class="token operator">=</span> obj_2<span class="token punctuation">;</span> <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>结构之间兼容：成员少的兼容成员多的</p>
<p>函数之间兼容：参数多的兼容参数少的</p>
</blockquote>
<h4 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Type <span class="token punctuation">&#123;</span>
  Strong<span class="token punctuation">,</span>
  Weak<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Java</span> <span class="token punctuation">&#123;</span>
  <span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">JavaScript</span> <span class="token punctuation">&#123;</span>
  <span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getLang</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> lang <span class="token operator">=</span> type <span class="token operator">===</span> Type<span class="token punctuation">.</span>Strong <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Java</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 需要进行类型断言</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lang <span class="token keyword">as</span> Java<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJava<span class="token punctuation">)</span> <span class="token punctuation">(</span>lang <span class="token keyword">as</span> Java<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJava<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lang <span class="token keyword">as</span> JavaScript<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJavaScript<span class="token punctuation">)</span>
    <span class="token punctuation">(</span>lang <span class="token keyword">as</span> JavaScript<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJavaScript<span class="token punctuation">;</span>

  <span class="token keyword">return</span> lang<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在多个地方进行类型断言，不利于代码的可读性。</p>
<blockquote>
<p><strong>类型保护</strong>：<br>TS 能在特定的区块中保证变了属于某种确定的类型。<br>可以在此区块中放心地引用此类型的属性，或者调用此类型的方法。</p>
</blockquote>
<ul>
<li>使用<code>instanceOf</code></li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>lang <span class="token keyword">instanceof</span> <span class="token class-name">Java</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用<code>in</code>关键字</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"helloJava"</span> <span class="token keyword">in</span> lang<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lang<span class="token punctuation">.</span><span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  lang<span class="token punctuation">.</span><span class="token function">helloJavaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用<code>type of</code>，判断基本类型</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLang</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> lang<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>类型保护函数</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 类型保护函数</span>
<span class="token keyword">function</span> <span class="token function">isJava</span><span class="token punctuation">(</span>lang<span class="token operator">:</span> Java <span class="token operator">|</span> JavaScript<span class="token punctuation">)</span><span class="token operator">:</span> lang <span class="token keyword">is</span> Java <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>lang <span class="token keyword">as</span> Java<span class="token punctuation">)</span><span class="token punctuation">.</span>helloJava <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」编程语言通识与JavaScript语言设计</title>
    <url>/2021/08/16/yuque/genpz2/</url>
    <content><![CDATA[<blockquote>
<p>语言按语法分类</p>
<ul>
<li>非形式语言</li>
<li>形式语言（乔姆斯基谱系）<ul>
<li>0 型：无限制文法（?::=?）</li>
<li>1 型：上下文相关文法(?<a href="">?::=?<strong>?)</strong></a></li>
<li>2 型：上下文无关文法(<a href="">::=?)</a></li>
<li>3 型：正则文法(<a href="">::=</a><a href="">?)</a></li>
</ul>
</li>
</ul>
</blockquote>
<p>文法：词法和语法。</p>
<h4 id="产生式（BNF）"><a href="#产生式（BNF）" class="headerlink" title="产生式（BNF）"></a>产生式（BNF）</h4><ul>
<li>用尖括号括起来的名字来表示语法结构名</li>
<li>语法结构分成基础结构和需要用其他语法结构定义的复合结构<ul>
<li>基础结构称终结符</li>
<li>复合结构称非终结符</li>
</ul>
</li>
<li>引号和中间的字符表示终结符</li>
<li>可以有括号</li>
<li>*表示重复多次</li>
<li>｜表示或</li>
<li>+表示至少一次</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以用BNF来定义一些东西，比如加法</span>

<span class="token operator">&lt;</span>Number<span class="token operator">></span>: <span class="token string">"0"</span> <span class="token operator">|</span> <span class="token string">"1"</span> <span class="token operator">|</span> <span class="token string">"2"</span> <span class="token operator">|</span> <span class="token punctuation">..</span>. <span class="token operator">|</span> <span class="token string">"9"</span>
<span class="token comment"># 十进制数，即0或者1-9开头加任何数字</span>
<span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span>: <span class="token string">"0"</span> <span class="token operator">|</span> <span class="token punctuation">((</span><span class="token string">"1"</span> <span class="token operator">|</span> <span class="token string">"2"</span> <span class="token operator">|</span> <span class="token punctuation">..</span>. <span class="token operator">|</span> <span class="token string">"9"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Number<span class="token operator">></span>*<span class="token punctuation">)</span>
<span class="token comment"># 加减法表达式</span>
<span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span>: <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>Expression<span class="token operator">></span> <span class="token string">"+"</span> <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> ｜ <span class="token operator">&lt;</span>Expression<span class="token operator">></span> <span class="token string">"-"</span> <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span>

<span class="token comment">## 四则运算</span>
<span class="token comment"># 乘法除法</span>
<span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span>: <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> <span class="token operator">|</span>
	<span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span> <span class="token string">"*"</span> <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> ｜
	<span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span> <span class="token string">"/"</span> <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span>
<span class="token comment"># 然后根据运算符的优先级又可以优化“加法表达式”</span>
<span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span>: <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span> <span class="token string">"+"</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span> ｜ <span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span> <span class="token string">"-"</span> <span class="token operator">&lt;</span>MultiplicativeExpression<span class="token operator">></span>
<span class="token comment"># 逻辑运算</span>
<span class="token operator">&lt;</span>LogicalExpression<span class="token operator">></span>: <span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span> <span class="token operator">|</span>
	<span class="token operator">&lt;</span>LogicalExpression<span class="token operator">></span> <span class="token string">"||"</span> <span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span> <span class="token operator">|</span>
	<span class="token operator">&lt;</span>LogicalExpression<span class="token operator">></span> <span class="token string">"&amp;&amp;"</span> <span class="token operator">&lt;</span>AdditiveExpression<span class="token operator">></span>

<span class="token comment"># 在实际四则运算过程中会遇到"()"，且括号的优先级会高于乘除法</span>
<span class="token operator">&lt;</span>PrimaryExpression<span class="token operator">></span>: <span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> <span class="token operator">|</span> <span class="token string">"("</span> <span class="token operator">&lt;</span>LogicalExpression<span class="token operator">></span> <span class="token string">")"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>其中引号内容为终结符即基础结构，`AdditiveExpression`等则是非终结符。
</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用正则进行预处理</span>
<span class="token operator">&lt;</span>DecimalNumber<span class="token operator">></span> <span class="token operator">=</span> /0<span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="其他产生式"><a href="#其他产生式" class="headerlink" title="其他产生式"></a>其他产生式</h4><blockquote>
<p>EBNF ABNF Customized</p>
</blockquote>
<h4 id="动态-amp-静态"><a href="#动态-amp-静态" class="headerlink" title="动态&amp;静态"></a>动态&amp;静态</h4><ul>
<li>动态<ul>
<li>在用户的设备/在线服务器上</li>
<li>产品实际运行时</li>
<li>Runtime</li>
</ul>
</li>
<li>静态<ul>
<li>在程序员的设备上</li>
<li>产品开发时</li>
<li>Compiletime</li>
</ul>
</li>
</ul>
<h4 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h4><ul>
<li>动态类型系统与静态类型系统</li>
<li>强类型与弱类型<ul>
<li>String + Number （隐式类型转换）</li>
<li>String == Boolean</li>
</ul>
</li>
<li>复合类型<ul>
<li>结构体</li>
<li>函数签名</li>
</ul>
</li>
<li>子类型<ul>
<li>逆变/协变</li>
</ul>
</li>
</ul>
<h4 id="一般命令式编程语言"><a href="#一般命令式编程语言" class="headerlink" title="一般命令式编程语言"></a>一般命令式编程语言</h4><blockquote>
<p>Atom -&gt; Expression -&gt; Statement -&gt; Structure -&gt; Program</p>
</blockquote>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」CSS-知识体系</title>
    <url>/2021/12/13/yuque/gh2gze/</url>
    <content><![CDATA[<h3 id="语法研究"><a href="#语法研究" class="headerlink" title="语法研究"></a>语法研究</h3><blockquote>
<p><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</a></p>
<p><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/grammar.html#q25.0">Appendix G. Grammar of CSS 2.1</a></p>
</blockquote>
<h4 id="CSS-总体结构"><a href="#CSS-总体结构" class="headerlink" title="CSS 总体结构"></a>CSS 总体结构</h4><ul>
<li><a href="/charset">@charset </a></li>
<li><a href="/import">@import </a></li>
<li>rules<ul>
<li><a href="/media">@media </a></li>
<li><a href="/page">@page </a></li>
<li>rule（normal rules）</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1639641953327-ae6f970e-77b4-4039-976f-53239859645a.png#clientId=uaf200a23-456d-4&amp;from=ui&amp;id=u47f0a1d1&amp;originHeight=1328&amp;originWidth=2188&amp;originalType=binary∶=1&amp;size=296968&amp;status=done&amp;style=none&amp;taskId=u50811936-0988-4072-9e23-4285dcbaf4c" alt="CSS.png"></p>
<h3 id="CSS-规则的研究"><a href="#CSS-规则的研究" class="headerlink" title="CSS @规则的研究"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule">CSS @规则的研究</a></h3><ul>
<li><a href="/charset">@charset </a></li>
<li><a href="/import">@import </a></li>
<li><a href="/media">@media </a></li>
<li><a href="/page">@page </a></li>
<li><a href="/namespace">@namespace </a></li>
<li><a href="/supports">@supports </a></li>
<li><a href="/font-face">@font-face </a></li>
<li><a href="/keyframes">@keyframes </a></li>
<li><a href="/document">@document </a></li>
<li><a href="/counter-style">@counter-style </a></li>
</ul>
<h3 id="CSS-规则的结构"><a href="#CSS-规则的结构" class="headerlink" title="CSS 规则的结构"></a>CSS 规则的结构</h3><ul>
<li>Selector</li>
<li>Key<ul>
<li>Properties</li>
<li>Variables</li>
</ul>
</li>
<li>Value</li>
</ul>
<h4 id="收集-CSS-标准"><a href="#收集-CSS-标准" class="headerlink" title="收集 CSS 标准"></a><a href="https://www.w3.org/TR/?tag=css">收集 CSS 标准</a></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 从上面的网站收集CSS标准</span>
<span class="token keyword">let</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> li <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-tag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">css</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> li<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> li<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>href<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Multi-column Layout Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CR-css-multicol-1-20211012/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Values and Units Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-values-4-20210930/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Scrollbars Styling Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-scrollbars-1-20210908/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Display Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CRD-css-display-3-20210903/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Nesting Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-nesting-1-20210831/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Cascading and Inheritance Level 5"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-cascade-5-20210829/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Object Model (CSSOM)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-cssom-1-20210826/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Masking Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CRD-css-masking-1-20210805/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Color Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/REC-css-color-3-20210805/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fonts Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-fonts-4-20210729/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fonts Module Level 5"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-fonts-5-20210729/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Worklets  Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/NOTE-worklets-1-20210729/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Counter Styles Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CR-css-counter-styles-3-20210727/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Backgrounds and Borders Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CRD-css-backgrounds-3-20210726/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Color Module Level 5"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-color-5-20210722/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Color Adjustment Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-color-adjust-1-20210616/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ready-made Counter Styles"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/NOTE-predefined-counter-styles-20210609/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Color Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-color-4-20210601/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Box Sizing Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-sizing-4-20210520/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Web Animations"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-web-animations-1-20210518/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Text Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CRD-css-text-3-20210422/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Easing Functions Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CRD-css-easing-1-20210401/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Cascading and Inheritance Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-cascade-4-20210319/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Box Sizing Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-sizing-3-20210317/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Basic User Interface Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-ui-4-20210316/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Scroll Snap Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CR-css-scroll-snap-1-20210311/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Ruby Annotation Layout Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/WD-css-ruby-1-20210310/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Timed Text Markup Language 2 (TTML2) (2nd Edition)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/CR-ttml2-20210309/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Cascading and Inheritance Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2021/REC-css-cascade-3-20210211/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Pseudo-Elements Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-pseudo-4-20201231/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Box Model Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CR-css-box-3-20201222/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Snapshot 2020"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/NOTE-css-2020-20201222/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Containment Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/REC-css-contain-1-20201222/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Grid Layout Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CRD-css-grid-1-20201218/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Grid Layout Module Level 2"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CRD-css-grid-2-20201218/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Images Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CRD-css-images-3-20201217/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Containment Module Level 2"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-contain-2-20201216/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Custom Highlight API Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-highlight-api-1-20201208/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Conditional Rules Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CR-css-conditional-3-20201208/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"TTML Media Type Definition and Profile Registry"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/NOTE-ttml-profile-registry-20201119/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Lists and Counters Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-lists-3-20201117/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Scroll Anchoring Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-scroll-anchoring-1-20201111/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Requirements for Chinese Text Layout中文排版需求"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-clreq-20201101/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Properties and Values API Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-properties-values-api-1-20201013/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Inline Layout Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-inline-3-20200827/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Requirements for Japanese Text Layout 日本語組版処理の要件(日本語版)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/NOTE-jlreq-20200811/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Media Queries Level 5"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-mediaqueries-5-20200731/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Media Queries Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CR-mediaqueries-4-20200721/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Overflow Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-overflow-3-20200603/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Encoding"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/NOTE-encoding-20200602/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Requirements for Hangul Text Layout and Typography : 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/NOTE-klreq-20200527/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Ethiopic Layout Requirements"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-elreq-20200526/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Positioned Layout Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-position-3-20200519/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Text Decoration Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-text-decor-4-20200506/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Box Model Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-box-4-20200421/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Box Alignment Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-align-3-20200421/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Speech Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/CR-css-speech-1-20200310/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Conditional Rules Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-conditional-4-20200303/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Transforms Module Level 2"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-css-transforms-2-20200303/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Resize Observer"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2020/WD-resize-observer-1-20200211/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Writing Modes Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/REC-css-writing-modes-3-20191210/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Spatial Navigation Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-nav-1-20191126/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Text Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-text-4-20191113/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Text Decoration Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-css-text-decor-3-20190813/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Generated Content Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-content-3-20190802/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Writing Modes Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-css-writing-modes-4-20190730/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Table Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-tables-3-20190727/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Syntax Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-css-syntax-3-20190716/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Animation Worklet API"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-animation-worklet-1-20190625/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Overscroll Behavior Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/WD-css-overscroll-1-20190606/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Values and Units Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-css-values-3-20190606/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"WebVTT: The Web Video Text Tracks Format"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-webvtt1-20190404/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Non-element  Selectors  Module  Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/NOTE-selectors-nonelement-1-20190402/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Transforms Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/CR-css-transforms-1-20190214/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Snapshot 2018"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2019/NOTE-css-2018-20190122/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Motion Path Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-motion-1-20181218/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fragmentation Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-break-4-20181218/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Filter Effects Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fragmentation Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/CR-css-break-3-20181204/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Geometry Interfaces Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/CR-geometry-1-20181204/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Selectors Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-selectors-4-20181121/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Flexible Box Layout Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Shadow Parts"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-shadow-parts-1-20181115/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Timed Text Markup Language 2 (TTML2)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/REC-ttml2-20181108/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Selectors Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/REC-selectors-3-20181106/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Paged Media Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-page-3-20181018/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Animations Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-animations-1-20181011/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Transitions"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-transitions-1-20181011/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fonts Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cascading  Style  Sheets,  level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/SPSD-CSS1-20180913/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Logical Properties and Values Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-logical-1-20180827/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Painting API Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/CR-css-paint-api-1-20180809/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Basic User Interface Module Level 3 (CSS3 UI)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/REC-css-ui-3-20180621/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Layout API Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"DOMMatrix interface"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/NOTE-matrix-20180412/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Typed OM Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2018/WD-css-typed-om-1-20180410/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Overflow Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2017/WD-css-overflow-4-20170613/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Image Values and Replaced Content Module Level 4"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2017/WD-css-images-4-20170413/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Fill and Stroke Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2017/WD-fill-stroke-3-20170413/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Rhythmic Sizing"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2017/WD-css-rhythm-1-20170302/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Snapshot 2017"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2017/NOTE-css-2017-20170131/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Round Display Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2016/WD-css-round-display-1-20161222/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2016/WD-CSS22-20160412/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Device Adaptation Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2016/WD-css-device-adapt-1-20160329/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSSOM View Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Custom Properties for Cascading Variables Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/CR-css-variables-1-20151203/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Will Change Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/CR-css-will-change-1-20151203/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Snapshot 2015"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/NOTE-css-2015-20151013/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Page Floats"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/WD-css-page-floats-3-20150915/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Priorities for CSS from the Digital Publishing Interest Group"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/WD-dpub-css-priorities-20150820/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Template Layout Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/NOTE-css-template-3-20150326/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Exclusions Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/WD-css3-exclusions-20150115/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Compositing and Blending Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2015/CR-compositing-1-20150113/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fullscreen"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-fullscreen-20141118/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS  Marquee  Module  Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css3-marquee-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Presentation Levels Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css3-preslev-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS  Mobile  Profile 2.0"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css-mobile-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Behavioral Extensions to CSS"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-becss-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS3 Hyperlink Presentation Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS  TV  Profile 1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css-tv-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"The CSS ‘Reader’ Media Type"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/NOTE-css3-reader-20141014/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Regions Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-css-regions-1-20141009/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Line Grid Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-css-line-grid-1-20140916/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Font Loading Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Generated Content for Paged Media Module"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-css-gcpm-3-20140513/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"SVG Integration"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-svg-integration-20140417/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Scoping Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/WD-css-scoping-1-20140403/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Shapes Module Level 1"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/CR-css-shapes-1-20140320/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Namespaces Module Level 3"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Style Attributes"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2013/REC-css-style-attr-20131107/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Selectors  API  Level 2"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2013/NOTE-selectors-api2-20131017/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Print Profile"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2013/NOTE-css-print-20130314/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Media Queries"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2012/REC-css3-mediaqueries-20120619/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"A MathML for CSS Profile"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2011/REC-mathml-for-css-20110607/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2011/REC-CSS2-20110607/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cascading Style Sheets (CSS) Snapshot 2007"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2011/NOTE-css-beijing-20110512/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cascading Style Sheets (CSS) Snapshot 2010"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2011/NOTE-css-2010-20110512/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Associating Style Sheets with XML documents 1.0 (Second Edition)"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2010/REC-xml-stylesheet-20101028/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Techniques for Web Content Accessibility Guidelines 1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/2000/NOTE-WCAG10-CSS-TECHS-20001106/"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Aural Cascading Style Sheets (ACSS) Specification"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/1999/WD-acss-19990902"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Positioning HTML Elements with Cascading Style Sheets"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/1999/WD-positioning-19990902"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CSS Printing Extensions"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/1999/WD-print-19990902"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"List of suggested extensions to CSS"</span><span class="token punctuation">,</span>
    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.w3.org/TR/1998/NOTE-CSS-potential-19981210"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="收集-CSS-属性标准？？"><a href="#收集-CSS-属性标准？？" class="headerlink" title="收集 CSS 属性标准？？"></a>收集 CSS 属性标准？？</h4>]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」浏览器原理-HTML解析</title>
    <url>/2021/09/27/yuque/hr55oy/</url>
    <content><![CDATA[<blockquote>
<p>主要分析浏览器接收到服务器端传输过来的 HTML 如何将其解析为 DOM 的步骤。</p>
</blockquote>
<h3 id="STEP-1-文件拆分"><a href="#STEP-1-文件拆分" class="headerlink" title="STEP 1: 文件拆分"></a>STEP 1: 文件拆分</h3><blockquote>
<p>parse 接受 HTML 文本作为参数，返回一棵 DOM 树。</p>
</blockquote>
<p>为了方便管理，单独拆分出<code>parser.js</code>。</p>
<h3 id="STEP-2-创建状态机"><a href="#STEP-2-创建状态机" class="headerlink" title="STEP 2: 创建状态机"></a>STEP 2: 创建状态机</h3><ul>
<li>使用 FSM 实现 HTML 的分析；</li>
<li>在<a href="https://html.spec.whatwg.org/multipage/parsing.html#data-state">HTML 标准</a>中已经规定了 HTML 的状态；</li>
<li>toy-browser 仅使用其中几个简单的状态；</li>
</ul>
<h3 id="STEP-3-解析标签"><a href="#STEP-3-解析标签" class="headerlink" title="STEP 3: 解析标签"></a>STEP 3: 解析标签</h3><ul>
<li>主要的标签：开始标签，结束标签和自封闭标签；</li>
<li>暂时忽略属性；</li>
</ul>
<h3 id="STEP-4-创建元素"><a href="#STEP-4-创建元素" class="headerlink" title="STEP 4: 创建元素"></a>STEP 4: 创建元素</h3><ul>
<li>在状态机中，除了状态歉意，还需加入业务逻辑；</li>
<li>在标签结束状态提交标签 token；</li>
</ul>
<h3 id="STEP-5-处理属性"><a href="#STEP-5-处理属性" class="headerlink" title="STEP 5: 处理属性"></a>STEP 5: 处理属性</h3><ul>
<li>属性值分为单引号，双引号，无引号三种写法，需要多种状态处理；</li>
<li>处理属性的方式跟标签类似；</li>
<li>属性结束时，需要把属性加到标签 Token 上；</li>
</ul>
<h3 id="STEP-6-构建-DOM-树"><a href="#STEP-6-构建-DOM-树" class="headerlink" title="STEP 6: 构建 DOM 树"></a>STEP 6: 构建 DOM 树</h3><ul>
<li>从标签构建 DOM 树的基本技巧就是使用栈；</li>
<li>遇到开始标签时创建元素并入栈，遇到结束标签时出栈；</li>
<li>自封闭节点可视为入栈后立即出栈；</li>
<li>任何元素的父元素是它入栈前的栈顶；</li>
</ul>
<h3 id="STEP-7-文本节点"><a href="#STEP-7-文本节点" class="headerlink" title="STEP 7: 文本节点"></a>STEP 7: 文本节点</h3><ul>
<li>文本节点与自封闭标签处理类似；</li>
<li>多个文本节点需要合并；</li>
</ul>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
 * @Author: httishere
 * @Date: 2021-09-24 11:06:02
 * @LastEditTime: 2021-09-24 17:57:47
 * @LastEditors: Please set LastEditors
 * @Description: 解析HTML
 * @FilePath: /Note/toy-browser/parse.js
 */</span>
<span class="token keyword">const</span> <span class="token constant">EOF</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"EOF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// EOF: End Of File</span>

<span class="token keyword">let</span> currentToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  currentAttribute <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 构造树结构</span>
<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"document"</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 报告当前状态</span>
<span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"startTag"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"element"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    element<span class="token punctuation">.</span>tagName <span class="token operator">=</span> token<span class="token punctuation">.</span>tagName<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">in</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!==</span> <span class="token string">"type"</span> <span class="token operator">||</span> p <span class="token operator">!==</span> <span class="token string">"tagName"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        element<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> p<span class="token punctuation">,</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span> token<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    top<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    element<span class="token punctuation">.</span>parent <span class="token operator">=</span> top<span class="token punctuation">;</span>

    <span class="token comment">// 入栈</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span>isSelfClosing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    currentTextNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">"endTag"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> token<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Tag start doesn't macth the end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    currentTextNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"text"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 文本节点处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTextNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      currentTextNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      top<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentTextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    currentTextNode<span class="token punctuation">.</span>content <span class="token operator">=</span> token<span class="token punctuation">.</span>content<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> tagOpen<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"EOF"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">tagOpen</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> endTagOpen<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"startTag"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">tagName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">endTagOpen</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"endTag"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">tagName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">tagName</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 空格，回车等</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 自封闭标签</span>
    <span class="token keyword">return</span> selfClosingStartTag<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">.</span>tagName <span class="token operator">+=</span> c<span class="token punctuation">;</span> <span class="token comment">// 记录当前的标签名</span>
    <span class="token keyword">return</span> tagName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> tagName<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">beforeAttributeName</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"/"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">afterAttributeName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"="</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">attributeName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">attributeName</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">">"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"/"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">afterAttributeName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"="</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"\u0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'"'</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"'"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute<span class="token punctuation">.</span>name <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> attributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">afterAttributeName</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> afterAttributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> selfClosingStartTag<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"="</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    currentAttribute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">attributeName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">beforeAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">">"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"/"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> doubleQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"'"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> singleQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">unquoteAttributeValue</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">doubleQuoteAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'"'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> afterQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"\u0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute<span class="token punctuation">.</span>value <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> doubleQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">singleQuoteAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"'"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> afterQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"\u0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute<span class="token punctuation">.</span>value <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> singleQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">afterQuoteAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> beforeAttributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> selfClosingStartTag<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    currentAttribute<span class="token punctuation">.</span>value <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> doubleQuoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">unquoteAttributeValue</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\t\n\f ]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> beforeAttributeName<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> selfClosingStartTag<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">[</span>currentAttribute<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> currentAttribute<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token function">emit</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"\u0000"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">'"'</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"'"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"&lt;"</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"="</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">"`"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 普通字符</span>
    currentAttribute<span class="token punctuation">.</span>value <span class="token operator">+=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> unquoteAttributeValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">selfClosingStartTag</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    currentToken<span class="token punctuation">.</span>isSelfClosing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">parseHTML</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> html<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「Algorithm」Array</title>
    <url>/2021/04/08/yuque/gi0z9u/</url>
    <content><![CDATA[<blockquote>
<p>数组（Array）是一种<strong>线性表</strong>数据结构。它用一组<strong>连续的内存空间</strong>，来存储一组具有相同类型的数据。</p>
</blockquote>
<ul>
<li>线性表（Linear List）：数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。而非线性表如二叉树，堆，图等，数据之间并不是简单的前后关系。</li>
<li>连续的内存空间和相同类型的数据：可以保证数组的随机访问，但是也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</li>
</ul>
<h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><p>实现方式：</p>
<p>比如一个长度为 10 的 int 类型的数组 int[] a = new int[10]，计算机给数组 a[10]，分配了一块连续内存空间 1000 ～ 1039，其中，内存块的首地址为 base_address = 1000。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1617871041179-4879e705-3ce3-41c1-90b1-67c3101be239.jpeg#align=left&amp;display=inline&amp;height=580&amp;originHeight=580&amp;originWidth=1142&amp;size=0&amp;status=done&amp;style=none&amp;width=1142" alt=""></p>
<p>计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：<code>a[i]_address = base_address + i * data_type_size</code>（data_type_size 表示数组中每个元素的大小，比如数组中存储的是 int 类型数据，那么 data_type_size 就为 4 个字节）。</p>
<p><strong>数组和链表的区别</strong></p>
<p>链表适合插入、删除，时间复杂度 O(1)；</p>
<p>数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，<strong>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</strong>。</p>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k ～ n 这部分的元素都顺序地往后挪一位。</p>
<p>分析：如果需要插入的位置在末尾，那就不需要移动数据，此时时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。 因为我们在每个位置插入元素的概率是一样的，插入位置是 0 需要移动 n 个数据，插入位置是 1 那么需要移动 n-1 个数据，一共有 n 中可能性，所以平均情况时间复杂度为<img src="https://g.yuque.com/gr/latex?%5Cfrac%7B1%2B2%2B3%2B...%2Bn-1%2Bn%7D%7Bn%7D%20%3D%20O(n" alt="">#card=math&amp;code=%5Cfrac%7B1%2B2%2B3%2B…%2Bn-1%2Bn%7D%7Bn%7D%20%3D%20O%28n%29&gt;) 。</p>
<p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p>
<p>在特定场景下，在第 k 个位置插入一个元素的时间复杂度就会降为 O(1)（应用在<strong>快速排序算法</strong>）。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>要删除第 k 个位置的数据，为了内存的连续性，也需要搬移数据，否则内存就不连续了，也会影响到随机访问。</p>
<p>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</p>
<p>实际上，在某些特殊场景下，并不一定非得追求数组中数据的连续性。若将多次删除操作集中在一起执行，删除的效率会提高很多。</p>
<p>例：数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h，此时我们需要依次删除 a，b，c。</p>
<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移（<strong>假删除</strong>，这就是 JVM 标记清除垃圾回收算法的核心思想）。</p>
<p>JVM 垃圾回收算法: 1.复制算法. 2.标记清除算法. 3.标记整理算法。 简单思想：数组中删除数据时，并不真正的删除，而是标记一下，先不进行数据的搬移工作，等数组空间不够用时，我们再执行删除操作，进行数据的搬移工作 —&gt; 这样可以减少因为删除操作导致的数据搬移，这种思想在 JVM 垃圾回收算法的标记清除算法中也有体现，第一遍扫描先标记垃圾对象，第二遍扫描再清除垃圾对象 —&gt; 这种垃圾回收算法容易产生内存碎片，导致出现虽然内存空间充足，但是无法放置大对象。</p>
<h3 id="警惕数组的访问越界"><a href="#警惕数组的访问越界" class="headerlink" title="警惕数组的访问越界"></a>警惕数组的访问越界</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该代码结果就是会无限打印“hello world”，数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3]访问越界。</p>
<p>在 C 语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>
<p>数组越界在 C 语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理。因为，访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误。</p>
<p>很多计算机病毒也正是利用到了代码中的数组越界可以访问非法地址的漏洞，来攻击系统，所以写代码的时候一定要警惕数组越界。但并非所有的语言都像 C 一样，把数组越界检查的工作丢给程序员来做，像 Java 本身就会做越界检查，比如下面这几行 Java 代码，就会抛出 java.lang.ArrayIndexOutOfBoundsException。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="容器-VS-数组"><a href="#容器-VS-数组" class="headerlink" title="容器 VS 数组"></a>容器 VS 数组</h3><p>针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList、C++ STL 中的 vector。在项目开发中，如何选择？</p>
<p>ArrayList 最大的优势就是可以<strong>将很多数组操作的细节封装起来</strong>。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是支持<strong>动态扩容</strong>。</p>
<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>
<p>而使用 ArrayList 时，每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。但是因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好<strong>在创建 ArrayList 的时候事先指定数据大小</strong>。</p>
<ol>
<li>Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li>
<li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</li>
<li>当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList &gt; array。</li>
</ol>
<p>对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p>
<h3 id="数组为什么要从-0-开始编号"><a href="#数组为什么要从-0-开始编号" class="headerlink" title="数组为什么要从 0 开始编号"></a>数组为什么要从 0 开始编号</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。计算 a[k]的内存地址只需要用这个公式：<code>a[k]_address = base_address + k * type_size</code>。</p>
<p>如果数组从 1 开始计数，那我们计算数组元素 a[k]的内存地址就会变为：<code>a[k]_address = base_address + (k-1)*type_size</code>。</p>
<p>所以如果数组从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>
<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。</p>
<p>不过最主要的原因可能是历史原因，C 语言设计者用 0 开始计数数组下标，之后的 Java、JavaScript 等高级语言都效仿了 C 语言，或者说，为了在一定程度上减少 C 语言程序员学习 Java 的学习成本，因此继续沿用了从 0 开始计数的习惯。实际上，很多语言中数组也并不是从 0 开始计数的，比如 Matlab。甚至还有一些语言支持负数下标，比如 Python。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>二维数组<code>arr[m][n]</code>的寻址地址？</p>
<p>对于<code>arr[i][j](i &lt; m, j &lt; n)</code>的寻址地址：<code>arr[i][j]_address = base_address + ( i * n + j) * type_size</code>。</p>
<p>二维数组在存储空间中也是以线性表的方式，所以创建一个二维数组时需要指定数组大小。</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」闭包</title>
    <url>/2020/10/13/yuque/hr2ubu/</url>
    <content><![CDATA[<blockquote>
<p>闭包是指有权访问另外一个函数作用域的变量的函数。——《JavaScript 高级程序设计》</p>
</blockquote>
<p>闭包的特点首先是函数，其次是它可以访问到父级作用域的变量对象，即使父级函数完成调用后”<strong>理应出栈销毁</strong>“。</p>
<blockquote>
<p>闭包是指那些能够访问自由变量的函数。——MDN</p>
</blockquote>
<p>教程：<a href="https://segmentfault.com/a/1190000017948999">前端进击的巨人（三）：从作用域走进闭包</a></p>
<p>创建闭包的常见方式，就是在一个函数内部创建另一个函数。<br>一般闭包的出现：</p>
<ul>
<li><strong>函数作为参数传递</strong></li>
<li><strong>函数作为返回值传递</strong></li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> fooVal <span class="token operator">=</span> <span class="token string">"2019"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar中使用到了自由变量fooVal</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> bar<span class="token punctuation">;</span> <span class="token comment">// 函数作为参数返回</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> getValue <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过闭包，我们在外部环境也可以获取到变量<code>fooVal</code>，虽然<code>foo()</code>函数执行完成了，但它并没从函数调用栈中销毁，其变量对象存储仍然可以通过<code>getValue()</code>能被访问到。<br><code>**bar**</code>之所以还能够访问这个变量，是因为内部函数的作用域链中包含<code>foo()</code>的作用域。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/250093/1603071589551-06a0d76c-c935-4ec5-a86e-0ad36f703498.png#height=362&amp;id=lQNvY&amp;originHeight=362&amp;originWidth=800&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=800" alt=""><br>为什么<code>foo</code>执行完成没有出栈？</p>
<blockquote>
<p>当某个函数被调用时，会创建一个执行环境（execution context）及相应的作用域链。然后，使用 arguments 和其他命名参数的值来初始化函数的活动对象（activation object）。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">value1<span class="token punctuation">,</span> value2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>全局环境内有 compare 和 result 两个变量对象。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/250093/1603073630621-14fadda5-8c75-4bc8-89f7-5c2d2a54aea9.png#height=694&amp;id=b1YBl&amp;originHeight=694&amp;originWidth=1716&amp;originalType=binary∶=1&amp;size=103808&amp;status=done&amp;style=none&amp;width=1716" alt="截屏2020-10-19 上午10.13.38.png"><br><strong>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。过度使用闭包可能会导致内存占用过多。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每个匿名函数的作用域链中都保存着 createFunctions() 函数的活动对象，所以它们引用的都是同一个变量 i 。 当 createFunctions()函数返回后，变量 i 的值是 10，此时每个函数都引用着保存变量 i 的同一个变量对象，所以在每个函数内部 i 的值都是 10。<br>通过创建另一个匿名函数：<br>÷</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」HTML</title>
    <url>/2021/12/20/yuque/iclyhn/</url>
    <content><![CDATA[<blockquote>
<p>定义：XML 和 SGML。</p>
</blockquote>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><h3 id="HTML-标签-语义"><a href="#HTML-标签-语义" class="headerlink" title="HTML 标签-语义"></a>HTML 标签-语义</h3><h3 id="HTML-语法"><a href="#HTML-语法" class="headerlink" title="HTML 语法"></a>HTML 语法</h3><h4 id="合法元素"><a href="#合法元素" class="headerlink" title="合法元素"></a>合法元素</h4><ul>
<li>Element：<code>&lt;tag&gt;&lt;/tag&gt;</code></li>
<li>Text：<code>text</code></li>
<li>Comment：<code>&lt;!-- comments --&gt;</code></li>
<li>DocunmentType：<code>&lt;!DOCTYPE html&gt;</code></li>
<li>ProcessingInstruction：<code>&lt;?a 1?&gt;</code></li>
<li>CDATA：<code>&lt;![CDATA[]]&gt;</code></li>
</ul>
<h4 id="字符引用"><a href="#字符引用" class="headerlink" title="字符引用"></a>字符引用</h4><ul>
<li><code>¡</code></li>
<li><code>&amp;</code></li>
<li><code>&lt;</code></li>
<li><code>&quot;</code></li>
</ul>
<p><img src="[https://gitee.com/httishere/blog-image/raw/master/img/image](https://gitee.com/httishere/blog-image/raw/master/img/image" alt=""> (1).png)</p>
<p><code>DocumentFragment</code>不存在任何 DOM 树上，但是也非常有用，它常常被用来高性能地批量添加节点。</p>
<h3 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h3><h4 id="导航类操作（可能会实时变化）"><a href="#导航类操作（可能会实时变化）" class="headerlink" title="导航类操作（可能会实时变化）"></a>导航类操作（可能会实时变化）</h4><ul>
<li>parentNode</li>
<li>childNodes</li>
<li>firstChild</li>
<li>lastChild</li>
<li>nextSibling</li>
<li>previousSibling</li>
</ul>
<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><ul>
<li>appendChild</li>
<li>insertBefore</li>
<li>removeChild</li>
<li>replaceChild</li>
</ul>
<p>PS：一个 Element 只有一个父元素，不可以被多次 append 或者 insert，如果重复 insert 的话会默认从之前的位置 remove 再 insert 到新位置。</p>
<h4 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h4><ul>
<li>compareDocumentPosition：用于比较两个节点中关系的函数。</li>
<li>contains：检查一个节点是否包含另一个节点的函数。</li>
<li>isEqualNode：检查两个节点是否完全相同。</li>
<li>isSameNode：检查两个节点是否是同一个节点，实际上在 JavaScript 中可以用“===”。</li>
<li>cloneNode：复制一个节点，如果传入参数 true，则会连同子元素做深拷贝。</li>
</ul>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget">Events</a></h3><ul>
<li>捕获过程（从 Root 节点开始找到目标节点）</li>
<li>冒泡过程（从目标节点向上触发事件）</li>
</ul>
<p>同一元素上先捕获再冒泡。</p>
<h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><blockquote>
<p>问题：如何把一个元素的所有子元素逆序。</p>
<p>我的解法：</p>
</blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">reverseChildren</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> element<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 不需要先去remove</span>
      element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">reverseChildren</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Range API</code>也是隶属于<code>DOM API</code>，<code>Range API</code>表示一个 HTML 上的范围，这个范围是以<strong>文字</strong>为最小单位的，所以 Range 不一定包含完整的节点，它可能是 Text 节点中的一段，也可以是头尾两个 Text 的一部分加上中间的元素。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
range<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
range<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 可以从用户选中区域创建，这样的 Range 用于处理用户选中区域</span>
<span class="token keyword">let</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="主要-API："><a href="#主要-API：" class="headerlink" title="主要 API："></a>主要 API：</h4><ul>
<li><code>[Range.setStart()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/setStart)</code>：“设置 <code>Range</code> 的起点。</li>
<li><code>[Range.setEnd()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/setEnd)</code>：设置 <code>Range</code> 的终点。</li>
</ul>
<h4 id="辅助-API："><a href="#辅助-API：" class="headerlink" title="辅助 API："></a>辅助 API：</h4><ul>
<li><code>[Range.setStartBefore()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/setStartBefore)</code>：以其它<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>为基准，设置 <code>Range</code> 的起点。</li>
<li><code>[Range.setStartAfter()](https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter)</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter"> (en-US)</a>：以其它<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>为基准，设置 <code>Range</code> 的起点。</li>
<li><code>[Range.setEndBefore()](https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore)</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore"> (en-US)</a>：以其它<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>为基准，设置 <code>Range</code> 的终点。</li>
<li><code>[Range.setEndAfter()](https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter)</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter"> (en-US)</a>：以其它<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>为基准，设置 <code>Range</code> 的终点。</li>
<li><code>[Range.selectNode()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/selectNode)</code>：使 <code>Range</code> 包含某个<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>及其内容。</li>
<li><code>[Range.selectNodeContents()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/selectNodeContents)</code>：使 <code>Range</code> 包含某个<code>[节点](https://developer.mozilla.org/zh-CN/docs/Web/API/Node)</code>的内容。</li>
<li><code>[Range.extractContents()](https://developer.mozilla.org/zh-CN/docs/Web/API/Range/extractContents)</code>：把 <code>Range</code> 的内容从文档树移动到一个<code>[文档片段](https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment)</code>中。</li>
</ul>
<h4 id="使用Range-API解决开头的问题："><a href="#使用Range-API解决开头的问题：" class="headerlink" title="使用Range API解决开头的问题："></a>使用<code>Range API</code>解决开头的问题：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 减少对DOM树操作的次数</span>
<span class="token keyword">function</span> <span class="token function">reverseChildrenByRange</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  range<span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 选取所有子节点</span>
  <span class="token keyword">let</span> fragment <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">extractContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移至文档片段</span>
  <span class="token keyword">let</span> l <span class="token operator">=</span> fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实践：适合类似富文本之类的开发。</p>
<h3 id="CSSOM"><a href="#CSSOM" class="headerlink" title="CSSOM"></a>CSSOM</h3><h4 id="document-styleSheets"><a href="#document-styleSheets" class="headerlink" title="document.styleSheets"></a><code>document.styleSheets</code></h4><h4 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h4><ul>
<li><code>document.styleSheets[0].cssRules</code></li>
<li><code>document.styleSheets[0].insertRule(&quot;p &#123;color: pink&#125;&quot;, 0)</code>，insert 的是字符串</li>
<li><code>document.styleSheets[0].removeRule(0)</code></li>
</ul>
<h4 id="Rule"><a href="#Rule" class="headerlink" title="Rule"></a>Rule</h4><ul>
<li>CSSStyleRule</li>
<li>CSSCharsetRule</li>
<li>CSSImportRule</li>
<li>…</li>
</ul>
<h5 id="CSSStyleRule"><a href="#CSSStyleRule" class="headerlink" title="CSSStyleRule"></a>CSSStyleRule</h5><ul>
<li>selectorText: String</li>
<li>style: k-v 结构</li>
</ul>
<h4 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle">getComputedStyle</a></h4><ul>
<li><code>window.getComputedStyle(elt, pseudoElt);</code><ul>
<li>elt: 想要获取的元素</li>
<li>pseudoElt（可选）：指定一个要匹配的伪元素的字符串</li>
</ul>
</li>
</ul>
<h3 id="window-API"><a href="#window-API" class="headerlink" title="window API"></a>window API</h3><ul>
<li><code>window.open()</code>: <code>window.open(&#39;about:blank&#39;, &#39;_blank&#39;)</code></li>
<li><code>widnow.moveBy()</code></li>
<li><code>widnow.moveTo()</code></li>
<li><code>window.close()</code></li>
<li>…还有部分滚动相关 API</li>
</ul>
<h3 id="获取所有-API"><a href="#获取所有-API" class="headerlink" title="获取所有 API"></a>获取所有 API</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> names <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">filterOut</span><span class="token punctuation">(</span><span class="token parameter">names<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ECMA 262</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"globalThis"</span><span class="token punctuation">,</span>
    <span class="token string">"console"</span><span class="token punctuation">,</span>
    <span class="token string">"BigInt"</span><span class="token punctuation">,</span>
    <span class="token string">"BigInt64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"BigUint64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Infinity"</span><span class="token punctuation">,</span>
    <span class="token string">"NaN"</span><span class="token punctuation">,</span>
    <span class="token string">"undefined"</span><span class="token punctuation">,</span>
    <span class="token string">"eval"</span><span class="token punctuation">,</span>
    <span class="token string">"isFinite"</span><span class="token punctuation">,</span>
    <span class="token string">"isNaN"</span><span class="token punctuation">,</span>
    <span class="token string">"parseFloat"</span><span class="token punctuation">,</span>
    <span class="token string">"parseInt"</span><span class="token punctuation">,</span>
    <span class="token string">"decodeURI"</span><span class="token punctuation">,</span>
    <span class="token string">"decodeURIComponent"</span><span class="token punctuation">,</span>
    <span class="token string">"encodeURI"</span><span class="token punctuation">,</span>
    <span class="token string">"encodeURIComponent"</span><span class="token punctuation">,</span>
    <span class="token string">"Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Date"</span><span class="token punctuation">,</span>
    <span class="token string">"RegExp"</span><span class="token punctuation">,</span>
    <span class="token string">"Promise"</span><span class="token punctuation">,</span>
    <span class="token string">"Proxy"</span><span class="token punctuation">,</span>
    <span class="token string">"Map"</span><span class="token punctuation">,</span>
    <span class="token string">"WeakMap"</span><span class="token punctuation">,</span>
    <span class="token string">"Set"</span><span class="token punctuation">,</span>
    <span class="token string">"WeakSet"</span><span class="token punctuation">,</span>
    <span class="token string">"Function"</span><span class="token punctuation">,</span>
    <span class="token string">"Boolean"</span><span class="token punctuation">,</span>
    <span class="token string">"String"</span><span class="token punctuation">,</span>
    <span class="token string">"Number"</span><span class="token punctuation">,</span>
    <span class="token string">"Symbol"</span><span class="token punctuation">,</span>
    <span class="token string">"Object"</span><span class="token punctuation">,</span>
    <span class="token string">"Error"</span><span class="token punctuation">,</span>
    <span class="token string">"EvalError"</span><span class="token punctuation">,</span>
    <span class="token string">"RangeError"</span><span class="token punctuation">,</span>
    <span class="token string">"ReferenceError"</span><span class="token punctuation">,</span>
    <span class="token string">"SyntaxError"</span><span class="token punctuation">,</span>
    <span class="token string">"TypeError"</span><span class="token punctuation">,</span>
    <span class="token string">"URIError"</span><span class="token punctuation">,</span>
    <span class="token string">"ArrayBuffer"</span><span class="token punctuation">,</span>
    <span class="token string">"SharedArrayBuffer"</span><span class="token punctuation">,</span>
    <span class="token string">"DataView"</span><span class="token punctuation">,</span>
    <span class="token string">"Float32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Float64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int8Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int16Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint8Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint16Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint8ClampedArray"</span><span class="token punctuation">,</span>
    <span class="token string">"Atomics"</span><span class="token punctuation">,</span>
    <span class="token string">"JSON"</span><span class="token punctuation">,</span>
    <span class="token string">"Math"</span><span class="token punctuation">,</span>
    <span class="token string">"Reflect"</span><span class="token punctuation">,</span>
    <span class="token string">"escape"</span><span class="token punctuation">,</span>
    <span class="token string">"unescape"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> js<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>js<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

names <span class="token operator">=</span> names
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e <span class="token operator">!=</span> <span class="token string">"Node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^webkit</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://html.spec.whatwg.org/#window</span>

<span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> names <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"BigInt"</span><span class="token punctuation">,</span>
    <span class="token string">"BigInt64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"BigUint64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Infinity"</span><span class="token punctuation">,</span>
    <span class="token string">"NaN"</span><span class="token punctuation">,</span>
    <span class="token string">"undefined"</span><span class="token punctuation">,</span>
    <span class="token string">"eval"</span><span class="token punctuation">,</span>
    <span class="token string">"isFinite"</span><span class="token punctuation">,</span>
    <span class="token string">"isNaN"</span><span class="token punctuation">,</span>
    <span class="token string">"parseFloat"</span><span class="token punctuation">,</span>
    <span class="token string">"parseInt"</span><span class="token punctuation">,</span>
    <span class="token string">"decodeURI"</span><span class="token punctuation">,</span>
    <span class="token string">"decodeURIComponent"</span><span class="token punctuation">,</span>
    <span class="token string">"encodeURI"</span><span class="token punctuation">,</span>
    <span class="token string">"encodeURIComponent"</span><span class="token punctuation">,</span>
    <span class="token string">"Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Date"</span><span class="token punctuation">,</span>
    <span class="token string">"RegExp"</span><span class="token punctuation">,</span>
    <span class="token string">"Promise"</span><span class="token punctuation">,</span>
    <span class="token string">"Proxy"</span><span class="token punctuation">,</span>
    <span class="token string">"Map"</span><span class="token punctuation">,</span>
    <span class="token string">"WeakMap"</span><span class="token punctuation">,</span>
    <span class="token string">"Set"</span><span class="token punctuation">,</span>
    <span class="token string">"WeakSet"</span><span class="token punctuation">,</span>
    <span class="token string">"Function"</span><span class="token punctuation">,</span>
    <span class="token string">"Boolean"</span><span class="token punctuation">,</span>
    <span class="token string">"String"</span><span class="token punctuation">,</span>
    <span class="token string">"Number"</span><span class="token punctuation">,</span>
    <span class="token string">"Symbol"</span><span class="token punctuation">,</span>
    <span class="token string">"Object"</span><span class="token punctuation">,</span>
    <span class="token string">"Error"</span><span class="token punctuation">,</span>
    <span class="token string">"EvalError"</span><span class="token punctuation">,</span>
    <span class="token string">"RangeError"</span><span class="token punctuation">,</span>
    <span class="token string">"ReferenceError"</span><span class="token punctuation">,</span>
    <span class="token string">"SyntaxError"</span><span class="token punctuation">,</span>
    <span class="token string">"TypeError"</span><span class="token punctuation">,</span>
    <span class="token string">"URIError"</span><span class="token punctuation">,</span>
    <span class="token string">"ArrayBuffer"</span><span class="token punctuation">,</span>
    <span class="token string">"SharedArrayBuffer"</span><span class="token punctuation">,</span>
    <span class="token string">"DataView"</span><span class="token punctuation">,</span>
    <span class="token string">"Float32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Float64Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int8Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int16Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Int32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint8Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint16Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint32Array"</span><span class="token punctuation">,</span>
    <span class="token string">"Uint8ClampedArray"</span><span class="token punctuation">,</span>
    <span class="token string">"Atomics"</span><span class="token punctuation">,</span>
    <span class="token string">"JSON"</span><span class="token punctuation">,</span>
    <span class="token string">"Math"</span><span class="token punctuation">,</span>
    <span class="token string">"Reflect"</span><span class="token punctuation">,</span>
    <span class="token string">"escape"</span><span class="token punctuation">,</span>
    <span class="token string">"unescape"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> js<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>js<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  names <span class="token operator">=</span> names
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e <span class="token operator">!=</span> <span class="token string">"Node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> windowprops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  objects <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"window"</span><span class="token punctuation">,</span>
    <span class="token string">"self"</span><span class="token punctuation">,</span>
    <span class="token string">"document"</span><span class="token punctuation">,</span>
    <span class="token string">"name"</span><span class="token punctuation">,</span>
    <span class="token string">"location"</span><span class="token punctuation">,</span>
    <span class="token string">"history"</span><span class="token punctuation">,</span>
    <span class="token string">"customElements"</span><span class="token punctuation">,</span>
    <span class="token string">"locationbar"</span><span class="token punctuation">,</span>
    <span class="token string">"menubar"</span><span class="token punctuation">,</span>
    <span class="token string">" personalbar"</span><span class="token punctuation">,</span>
    <span class="token string">"scrollbars"</span><span class="token punctuation">,</span>
    <span class="token string">"statusbar"</span><span class="token punctuation">,</span>
    <span class="token string">"toolbar"</span><span class="token punctuation">,</span>
    <span class="token string">"status"</span><span class="token punctuation">,</span>
    <span class="token string">"close"</span><span class="token punctuation">,</span>
    <span class="token string">"closed"</span><span class="token punctuation">,</span>
    <span class="token string">"stop"</span><span class="token punctuation">,</span>
    <span class="token string">"focus"</span><span class="token punctuation">,</span>
    <span class="token string">" blur"</span><span class="token punctuation">,</span>
    <span class="token string">"frames"</span><span class="token punctuation">,</span>
    <span class="token string">"length"</span><span class="token punctuation">,</span>
    <span class="token string">"top"</span><span class="token punctuation">,</span>
    <span class="token string">"opener"</span><span class="token punctuation">,</span>
    <span class="token string">"parent"</span><span class="token punctuation">,</span>
    <span class="token string">"frameElement"</span><span class="token punctuation">,</span>
    <span class="token string">"open"</span><span class="token punctuation">,</span>
    <span class="token string">"navigator"</span><span class="token punctuation">,</span>
    <span class="token string">"applicationCache"</span><span class="token punctuation">,</span>
    <span class="token string">"alert"</span><span class="token punctuation">,</span>
    <span class="token string">"confirm"</span><span class="token punctuation">,</span>
    <span class="token string">"prompt"</span><span class="token punctuation">,</span>
    <span class="token string">"print"</span><span class="token punctuation">,</span>
    <span class="token string">"postMessage"</span><span class="token punctuation">,</span>
    <span class="token string">"console"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> windowprops<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>windowprops<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//https://html.spec.whatwg.org/</span>

<span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  objects <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"ApplicationCache"</span><span class="token punctuation">,</span>
    <span class="token string">"AudioTrack"</span><span class="token punctuation">,</span>
    <span class="token string">"AudioTrackList"</span><span class="token punctuation">,</span>
    <span class="token string">"BarProp"</span><span class="token punctuation">,</span>
    <span class="token string">"BeforeUnloadEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"BroadcastChannel"</span><span class="token punctuation">,</span>
    <span class="token string">"CanvasGradient"</span><span class="token punctuation">,</span>
    <span class="token string">"CanvasPattern"</span><span class="token punctuation">,</span>
    <span class="token string">"CanvasRenderingContext2D"</span><span class="token punctuation">,</span>
    <span class="token string">"CloseEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"CustomElementRegistry"</span><span class="token punctuation">,</span>
    <span class="token string">"DOMStringList"</span><span class="token punctuation">,</span>
    <span class="token string">"DOMStringMap"</span><span class="token punctuation">,</span>
    <span class="token string">"DataTransfer"</span><span class="token punctuation">,</span>
    <span class="token string">"DataTransferItem"</span><span class="token punctuation">,</span>
    <span class="token string">"DataTransferItemList"</span><span class="token punctuation">,</span>
    <span class="token string">"DedicatedWorkerGlobalScope"</span><span class="token punctuation">,</span>
    <span class="token string">"Document"</span><span class="token punctuation">,</span>
    <span class="token string">"DragEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"ErrorEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"EventSource"</span><span class="token punctuation">,</span>
    <span class="token string">"External"</span><span class="token punctuation">,</span>
    <span class="token string">"FormDataEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"HTMLAllCollection"</span><span class="token punctuation">,</span>
    <span class="token string">"HashChangeEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"History"</span><span class="token punctuation">,</span>
    <span class="token string">"ImageBitmap"</span><span class="token punctuation">,</span>
    <span class="token string">"ImageBitmapRenderingContext"</span><span class="token punctuation">,</span>
    <span class="token string">"ImageData"</span><span class="token punctuation">,</span>
    <span class="token string">"Location"</span><span class="token punctuation">,</span>
    <span class="token string">"MediaError"</span><span class="token punctuation">,</span>
    <span class="token string">"MessageChannel"</span><span class="token punctuation">,</span>
    <span class="token string">"MessageEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"MessagePort"</span><span class="token punctuation">,</span>
    <span class="token string">"MimeType"</span><span class="token punctuation">,</span>
    <span class="token string">"MimeTypeArray"</span><span class="token punctuation">,</span>
    <span class="token string">"Navigator"</span><span class="token punctuation">,</span>
    <span class="token string">"OffscreenCanvas"</span><span class="token punctuation">,</span>
    <span class="token string">"OffscreenCanvasRenderingContext2D"</span><span class="token punctuation">,</span>
    <span class="token string">"PageTransitionEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"Path2D"</span><span class="token punctuation">,</span>
    <span class="token string">"Plugin"</span><span class="token punctuation">,</span>
    <span class="token string">"PluginArray"</span><span class="token punctuation">,</span>
    <span class="token string">"PopStateEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"PromiseRejectionEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"RadioNodeList"</span><span class="token punctuation">,</span>
    <span class="token string">"SharedWorker"</span><span class="token punctuation">,</span>
    <span class="token string">"SharedWorkerGlobalScope"</span><span class="token punctuation">,</span>
    <span class="token string">"Storage"</span><span class="token punctuation">,</span>
    <span class="token string">"StorageEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"TextMetrics"</span><span class="token punctuation">,</span>
    <span class="token string">"TextTrack"</span><span class="token punctuation">,</span>
    <span class="token string">"TextTrackCue"</span><span class="token punctuation">,</span>
    <span class="token string">"TextTrackCueList"</span><span class="token punctuation">,</span>
    <span class="token string">"TextTrackList"</span><span class="token punctuation">,</span>
    <span class="token string">"TimeRanges"</span><span class="token punctuation">,</span>
    <span class="token string">"TrackEvent"</span><span class="token punctuation">,</span>
    <span class="token string">"ValidityState"</span><span class="token punctuation">,</span>
    <span class="token string">"VideoTrack"</span><span class="token punctuation">,</span>
    <span class="token string">"VideoTrackList"</span><span class="token punctuation">,</span>
    <span class="token string">"WebSocket"</span><span class="token punctuation">,</span>
    <span class="token string">"Window"</span><span class="token punctuation">,</span>
    <span class="token string">"Worker"</span><span class="token punctuation">,</span>
    <span class="token string">"WorkerGlobalScope"</span><span class="token punctuation">,</span>
    <span class="token string">"WorkerLocation"</span><span class="token punctuation">,</span>
    <span class="token string">"WorkerNavigator"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> interfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>interfaces<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//http://www.ecma-international.org/ecma-402/5.0/index.html#Title</span>

names <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e <span class="token operator">!=</span> <span class="token string">"Intl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15</span>

names <span class="token operator">=</span> <span class="token function">filterOut</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">"WebGLVertexArrayObject"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLTransformFeedback"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLSync"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLSampler"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLQuery"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGL2RenderingContext"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLContextEvent"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLObject"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLBuffer"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLFramebuffer"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLProgram"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLRenderbuffer"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLShader"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLTexture"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLUniformLocation"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLActiveInfo"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLShaderPrecisionFormat"</span><span class="token punctuation">,</span>
  <span class="token string">"WebGLRenderingContext"</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://www.w3.org/TR/webaudio/</span>

names <span class="token operator">=</span> <span class="token function">filterOut</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">"AudioContext"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AnalyserNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioBuffer"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioBufferSourceNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioDestinationNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioParam"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioListener"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioWorklet"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioWorkletGlobalScope"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioWorkletNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioWorkletProcessor"</span><span class="token punctuation">,</span>
  <span class="token string">"BiquadFilterNode"</span><span class="token punctuation">,</span>
  <span class="token string">"ChannelMergerNode"</span><span class="token punctuation">,</span>
  <span class="token string">"ChannelSplitterNode"</span><span class="token punctuation">,</span>
  <span class="token string">"ConstantSourceNode"</span><span class="token punctuation">,</span>
  <span class="token string">"ConvolverNode"</span><span class="token punctuation">,</span>
  <span class="token string">"DelayNode"</span><span class="token punctuation">,</span>
  <span class="token string">"DynamicsCompressorNode"</span><span class="token punctuation">,</span>
  <span class="token string">"GainNode"</span><span class="token punctuation">,</span>
  <span class="token string">"IIRFilterNode"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaElementAudioSourceNode"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaStreamAudioSourceNode"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaStreamTrackAudioSourceNode"</span><span class="token punctuation">,</span>
  <span class="token string">"MediaStreamAudioDestinationNode"</span><span class="token punctuation">,</span>
  <span class="token string">"PannerNode"</span><span class="token punctuation">,</span>
  <span class="token string">"PeriodicWave"</span><span class="token punctuation">,</span>
  <span class="token string">"OscillatorNode"</span><span class="token punctuation">,</span>
  <span class="token string">"StereoPannerNode"</span><span class="token punctuation">,</span>
  <span class="token string">"WaveShaperNode"</span><span class="token punctuation">,</span>
  <span class="token string">"ScriptProcessorNode"</span><span class="token punctuation">,</span>
  <span class="token string">"AudioProcessingEvent"</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://encoding.spec.whatwg.org/#dom-textencoder</span>

names <span class="token operator">=</span> <span class="token function">filterOut</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">"TextDecoder"</span><span class="token punctuation">,</span>
  <span class="token string">"TextEncoder"</span><span class="token punctuation">,</span>
  <span class="token string">"TextDecoderStream"</span><span class="token punctuation">,</span>
  <span class="token string">"TextEncoderStream"</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://streams.spec.whatwg.org/#blqs-class</span>

names <span class="token operator">=</span> <span class="token function">filterOut</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token string">"ReadableStream"</span><span class="token punctuation">,</span>
  <span class="token string">"ReadableStreamDefaultReader"</span><span class="token punctuation">,</span>
  <span class="token string">"ReadableStreamBYOBReader"</span><span class="token punctuation">,</span>
  <span class="token string">"ReadableStreamDefaultController"</span><span class="token punctuation">,</span>
  <span class="token string">"ReadableByteStreamController"</span><span class="token punctuation">,</span>
  <span class="token string">"ReadableStreamBYOBRequest"</span><span class="token punctuation">,</span>
  <span class="token string">"WritableStream"</span><span class="token punctuation">,</span>
  <span class="token string">"WritableStreamDefaultWriter"</span><span class="token punctuation">,</span>
  <span class="token string">"WritableStreamDefaultController"</span><span class="token punctuation">,</span>
  <span class="token string">"TransformStream"</span><span class="token punctuation">,</span>
  <span class="token string">"TransformStreamDefaultController"</span><span class="token punctuation">,</span>
  <span class="token string">"ByteLengthQueuingStrategy"</span><span class="token punctuation">,</span>
  <span class="token string">"CountQueuingStrategy"</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface</span>

names <span class="token operator">=</span> <span class="token function">filterOut</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"SyncManager"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」浏览器的工作-2</title>
    <url>/2021/06/29/yuque/iew14d/</url>
    <content><![CDATA[<blockquote>
<p>如何解析请求回来的 HTML 代码，DOM 树又是如何构建的。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1624957540017-1335aa73-05b5-4026-8f2d-2dc46497da0d.png#align=left&amp;display=inline&amp;height=279&amp;originHeight=279&amp;originWidth=732&amp;size=40030&amp;status=done&amp;style=none&amp;width=732" alt="image.png"></p>
<h3 id="解析代码"><a href="#解析代码" class="headerlink" title="解析代码"></a>解析代码</h3><p>HTTP 的 Response 的 body。<br>HTML 的结构不算太复杂，我们日常开发需要的 90% 的“词”（指编译原理的术语 token，表示最小的有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA 节点几种。</p>
<h4 id="词（token）是如何被拆分的"><a href="#词（token）是如何被拆分的" class="headerlink" title="词（token）是如何被拆分的"></a>词（token）是如何被拆分的</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>text text text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>起始标签也是会包含属性的，最小的意义单元其实是 <code>&lt;p</code>。<br>继续拆分，可以把这段代码依次拆成词（token）：</p>
<ul>
<li>开始标签： <code>&lt;p</code></li>
<li>属性： <code>class=&quot;a&quot;</code></li>
<li>开始标签的结束： <code>&gt;</code></li>
<li>文本： <code>text text text</code></li>
<li>结束标签： <code>&lt;/p&gt;</code></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1625018471742-e211f6dd-480e-41dd-8e98-89eb7537bad2.png#align=left&amp;display=inline&amp;height=252&amp;originHeight=252&amp;originWidth=624&amp;size=40366&amp;status=done&amp;style=none&amp;width=624" alt="image.png"><br>代码开始从 HTTP 协议收到的字符流读取字符：<br>比如，假设我们接受了一个字符“ &lt; ” 我们一下子就知道这不是一个文本节点啦。<br>之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和 CDATA 了，接下来我们就一直读，直到遇到“&gt;”或者空格，这样就得到了一个完整的词（token）了。<br>在这样的条件下，浏览器工程师要想实现把字符流解析成词（token），最常见的方案就是使用状态机。</p>
<h4 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h4><p>绝大多数语言的词法部分都是用状态机实现的。token 的解析<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1625018668766-dcb91c36-b69d-4fc1-8443-097fa7cb156f.png#align=left&amp;display=inline&amp;height=739&amp;originHeight=739&amp;originWidth=768&amp;size=226214&amp;status=done&amp;style=none&amp;width=768" alt="image.png"><br><a href="https://html.spec.whatwg.org/multipage/parsing.html#tokenization">HTML 官方文档</a>规定了 80 个状态（顺便一说，HTML 是我见过唯一一个标准中规定了状态机实现的语言，对大部分语言来说，状态机是一种实现而非定义）。</p>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」DOM API</title>
    <url>/2021/06/30/yuque/igiedu/</url>
    <content><![CDATA[<h3 id="文档对象模型（Document-Object-Model，DOM）"><a href="#文档对象模型（Document-Object-Model，DOM）" class="headerlink" title="文档对象模型（Document Object Model，DOM）"></a>文档对象模型（Document Object Model，DOM）</h3><p>文档对象模型是用来描述文档（特指 HTML 文档）。<br>同时它又是一个“对象模型”，这意味着它使用的是对象这样的概念来描述 HTML 文档。<br>HTML 文档是一个由标签嵌套而成的树形结构，因此，DOM 也是使用树形的对象模型来描述一个 HTML 文档。</p>
<h2 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h2><ul>
<li>节点：DOM 树形结构中的节点相关 API。</li>
<li>事件：触发和监听事件相关 API。</li>
<li>Range：操作文字范围相关 API。</li>
<li>遍历：遍历 DOM 需要的 API。</li>
</ul>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>DOM 的树形结构所有的节点有统一的接口 Node。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1625034748183-76575f66-e3c5-4784-8665-56fd243e4519.png#align=left&amp;display=inline&amp;height=634&amp;originHeight=634&amp;originWidth=955&amp;size=260574&amp;status=done&amp;style=none&amp;width=955" alt="image.png"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Element: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tagname</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tagname</span><span class="token punctuation">></span></span> Text: text Comment:
<span class="token comment">&lt;!-- comments --></span>
DocumentType: <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span> ProcessingInstruction:
<span class="token prolog">&lt;?a 1?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在编写 HTML 代码并且运行后，就会在内存中得到这样一棵 DOM 树，HTML 的写法会被转化成对应的文档模型，就可以通过 JavaScript 等语言去访问这个文档模型。<br>要重点掌握的是：Document、Element、Text 节点。<br>DocumentFragment 也非常有用，它常常被用来高性能地批量添加节点。<br>因为 Comment、DocumentType 和 ProcessingInstruction 很少需要运行时去修改和操作，所以有所了解即可。</p>
<h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node 是 DOM 树继承关系的根节点，它定义了 DOM 节点在 DOM 树上的操作，首先，Node 提供了一组属性，来表示它在 DOM 树中的关系：</p>
<ul>
<li>parentNode</li>
<li>childNodes</li>
<li>firstChild</li>
<li>lastChild</li>
<li>nextSibling</li>
<li>previousSibling</li>
</ul>
<p>操作 DOM 树的 API：</p>
<ul>
<li>appendChild</li>
<li>insertBefore</li>
<li>removeChild</li>
<li>replaceChild</li>
</ul>
<p>appendChild 和 insertBefore 的这个设计，是一个“最小原则”的设计，这两个 API 是满足插入任意位置的必要 API，而 insertAfter，则可以由这两个 API 实现出来。<br>所有这几个修改型的 API，全都是在父元素上操作的，比如我们要想实现“删除一个元素的上一个元素”，必须要先用 parentNode 获取其父元素。<br>一些高级 API：</p>
<ul>
<li>compareDocumentPosition：用于比较两个节点中关系的函数。</li>
<li>contains：检查一个节点是否包含另一个节点的函数。</li>
<li>isEqualNode：检查两个节点是否完全相同。</li>
<li>isSameNode：检查两个节点是否是同一个节点，实际上在 JavaScript 中可以用“===”。</li>
<li>cloneNode：复制一个节点，如果传入参数 true，则会连同子元素做深拷贝。</li>
</ul>
<p>DOM 标准规定了节点必须从文档的 create 方法创建出来，不能够使用原生的 JavaScript 的 new 运算。于是 document 对象有：</p>
<ul>
<li>createElement</li>
<li>createTextNode</li>
<li>createCDATASection</li>
<li>createComment</li>
<li>createProcessingInstruction</li>
<li>createDocumentFragment</li>
<li>createDocumentType</li>
</ul>
<h4 id="Element-与-Attribute"><a href="#Element-与-Attribute" class="headerlink" title="Element 与 Attribute"></a>Element 与 Attribute</h4><p>Element 表示元素，它是 Node 的子类。<br>元素对应了 HTML 中的标签，它既有子节点，又有属性。所以 Element 子类中，有一系列操作属性的方法：</p>
<ul>
<li>getAttribute</li>
<li>setAttribute</li>
<li>removeAttribute</li>
<li>hasAttribute</li>
</ul>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul>
<li>querySelector</li>
<li>querySelectorAll</li>
<li>getElementById</li>
<li>getElementsByName</li>
<li>getElementsByTagName</li>
<li>getElementsByClassName</li>
</ul>
<p>getElementsByName、getElementsByTagName、getElementsByClassName 获取的集合并非数组，而是一个能够动态更新的集合。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> collection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"htt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token keyword">var</span> winter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
winter<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"htt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>winter<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明浏览器内部是有高速的索引机制，来动态更新这样的集合的。<br>所以，尽管 querySelector 系列的 API 非常强大，我们还是应该尽量使用 getElement 系列的 API。</p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>通过 Node 的相关属性，可以用 JavaScript 遍历整个树。<br>实际上，DOM API 中还提供了 NodeIterator 和 TreeWalker 来遍历树。<br>比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p>
<p>NodeIterator:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> iterator <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
  NodeFilter<span class="token punctuation">.</span><span class="token constant">SHOW_TEXT</span> <span class="token operator">|</span> NodeFilter<span class="token punctuation">.</span><span class="token constant">SHOW_COMMENT</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>TreeWalker:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> walker <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTreeWalker</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
  NodeFilter<span class="token punctuation">.</span><span class="token constant">SHOW_ELEMENT</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> node<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"p"</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>建议需要遍历 DOM 的时候，直接使用递归和 Node 的属性。</p>
<h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>Range API 表示一个 HTML 上的范围，这个范围是以<strong>文字</strong>为最小单位的，所以 Range 不一定包含完整的节点，它可能是 Text 节点中的一段，也可以是头尾两个 Text 的一部分加上中间的元素。<br>通过 Range API 可以比节点 API 更精确地操作 DOM 树，凡是 节点 API 能做到的，Range API 都可以做到，而且可以做到更高性能，但是 Range API 使用起来比较麻烦，所以在实际项目中，并不常用，只有做底层框架和富文本编辑对它有强需求。</p>
<p>创建 Range 一般是通过设置它的起止来实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  firstText <span class="token operator">=</span> p<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  secondText <span class="token operator">=</span> em<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>
range<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>firstText<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// do not forget the leading space</span>
range<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>secondText<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过 Range 也可以从用户选中区域创建，这样的 Range 用于处理用户选中区域：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更改 Range 选中区段内容的方式主要是取出和插入，分别由 extractContents 和 insertNode 来实现：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fragment <span class="token operator">=</span> range<span class="token punctuation">.</span><span class="token function">extractContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
range<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」浏览器原理-排版 &amp; 渲染</title>
    <url>/2021/10/12/yuque/ir6rqt/</url>
    <content><![CDATA[<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><blockquote>
<p>确定元素的位置。</p>
</blockquote>
<h3 id="主轴和交叉轴"><a href="#主轴和交叉轴" class="headerlink" title="主轴和交叉轴"></a>主轴和交叉轴</h3><h4 id="Main-Axis"><a href="#Main-Axis" class="headerlink" title="Main Axis"></a>Main Axis</h4><p>元素的排布方向。</p>
<h4 id="Cross-Axis"><a href="#Cross-Axis" class="headerlink" title="Cross Axis"></a>Cross Axis</h4><p>与主轴垂直的方向。</p>
<h3 id="STEP-1-确定主轴-amp-交叉轴"><a href="#STEP-1-确定主轴-amp-交叉轴" class="headerlink" title="STEP 1: 确定主轴&amp;交叉轴"></a>STEP 1: 确定主轴&amp;交叉轴</h3><h3 id="STEP-2-收集元素进行（hang）"><a href="#STEP-2-收集元素进行（hang）" class="headerlink" title="STEP 2: 收集元素进行（hang）"></a>STEP 2: 收集元素进行（hang）</h3><ul>
<li>分行（这个行不是 row 是主轴行的意思）<ul>
<li>根据主轴尺寸，把元素分进行</li>
<li>若设置了 no-wrap，则强行分配进第一行</li>
</ul>
</li>
</ul>
<h3 id="STEP-3-计算主轴"><a href="#STEP-3-计算主轴" class="headerlink" title="STEP 3: 计算主轴"></a>STEP 3: 计算主轴</h3><ul>
<li>找出所有 flex 元素；</li>
<li>把主轴方向的剩余尺寸按比例分配给 flex 元素；</li>
<li>若剩余空间为负数，所有 flex 元素置为 0，等比压缩剩余元素；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 剩余空间不足，仅在single line的情况下</span>
  <span class="token keyword">let</span> scale <span class="token operator">=</span> style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">-</span> mainSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
      itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">*</span> scale<span class="token punctuation">;</span>

    itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
    itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// process each flex line</span>
  flexLines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> mainSpace <span class="token operator">=</span> items<span class="token punctuation">.</span>mainSpace<span class="token punctuation">;</span>
    <span class="token comment">// 按flex进行分配</span>
    <span class="token keyword">let</span> flexTotal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> itemStyle<span class="token punctuation">.</span>flex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        flexTotal <span class="token operator">+=</span> itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>flexTotal <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// There is flexible flex items</span>
      <span class="token keyword">let</span> currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
          itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> flexTotal<span class="token punctuation">)</span> <span class="token operator">*</span> itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
          itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 没有flex元素，但是还存在剩余空间，justify-content开始工作</span>
      <span class="token keyword">let</span> currentMain<span class="token punctuation">,</span> <span class="token comment">// 元素排布的起点</span>
        step<span class="token punctuation">;</span> <span class="token comment">// 元素间距</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"flex-start"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
        step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"flex-end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        currentMain <span class="token operator">=</span> mainSpace <span class="token operator">*</span> mainSign <span class="token operator">+</span> mainBase<span class="token punctuation">;</span>
        step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"space-between"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// n个元素之间有n-1个间距</span>
        step <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> mainSign<span class="token punctuation">;</span>
        currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"space-around"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 左右两边是半个step，元素之间是一个step</span>
        step <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> mainSign<span class="token punctuation">;</span>
        currentMain <span class="token operator">=</span> mainBase <span class="token operator">+</span> step <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
          itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
          itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">+</span> step<span class="token punctuation">;</span> <span class="token comment">// 加上间距</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="STEP-4-计算交叉轴"><a href="#STEP-4-计算交叉轴" class="headerlink" title="STEP 4: 计算交叉轴"></a>STEP 4: 计算交叉轴</h3><ul>
<li>根据每一行中最大元素的尺寸计算行高</li>
<li>根据行高 flex-align 和 item-align，确定元素具体位置</li>
</ul>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
 * @Author: httishere
 * @Date: 2021-09-29 11:53:07
 * @LastEditTime: 2021-10-12 14:10:51
 * @LastEditors: Please set LastEditors
 * @Description: 元素排版
 * @FilePath: /Note/toy-browser/CSS/layout.js
 */</span>

<span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>style<span class="token punctuation">)</span> element<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> p <span class="token operator">=</span> element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token comment">// copy</span>
    element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">px$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9\.]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> element<span class="token punctuation">.</span>style<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> elementStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>elementStyle<span class="token punctuation">.</span>display <span class="token operator">!==</span> <span class="token string">"flex"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> items <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>order <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>order <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> style <span class="token operator">=</span> elementStyle<span class="token punctuation">;</span>

  <span class="token comment">// width height 处理</span>
  <span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"auto"</span> <span class="token operator">||</span> style<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      style<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设计属性默认值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>flexDirection <span class="token operator">||</span> style<span class="token punctuation">.</span>flexDirection <span class="token operator">===</span> <span class="token string">"auto"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">.</span>flexDirection <span class="token operator">=</span> <span class="token string">"row"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>alignItems <span class="token operator">||</span> style<span class="token punctuation">.</span>alignItems <span class="token operator">===</span> <span class="token string">"auto"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">.</span>alignItems <span class="token operator">=</span> <span class="token string">"stretch"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">||</span> style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"auto"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">.</span>justifyContent <span class="token operator">=</span> <span class="token string">"flex-start"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>flexWrap <span class="token operator">||</span> style<span class="token punctuation">.</span>flexWrap <span class="token operator">===</span> <span class="token string">"auto"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">.</span>flexWrap <span class="token operator">=</span> <span class="token string">"nowrap"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">||</span> style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"auto"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    style<span class="token punctuation">.</span>alignContent <span class="token operator">=</span> <span class="token string">"stretch"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 使用变量进行抽象方向</span>
  <span class="token comment">// base: 起点, sign: 排布方向</span>
  <span class="token keyword">let</span> mainSize<span class="token punctuation">,</span>
    mainStart<span class="token punctuation">,</span>
    mainEnd<span class="token punctuation">,</span>
    mainSign<span class="token punctuation">,</span>
    mainBase<span class="token punctuation">,</span> <span class="token comment">// 主轴</span>
    crossSize<span class="token punctuation">,</span>
    crossStart<span class="token punctuation">,</span>
    crossEnd<span class="token punctuation">,</span>
    crossSign<span class="token punctuation">,</span>
    crossBase<span class="token punctuation">;</span> <span class="token comment">// 交叉轴</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexDirection <span class="token operator">===</span> <span class="token string">"row"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>mainSize <span class="token operator">=</span> <span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainStart <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainEnd <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>mainSign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>crossSize <span class="token operator">=</span> <span class="token string">"height"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossStart <span class="token operator">=</span> <span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossEnd <span class="token operator">=</span> <span class="token string">"bottom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexDirection <span class="token operator">===</span> <span class="token string">"row-reverse"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>mainSize <span class="token operator">=</span> <span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainStart <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainEnd <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>mainSign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainBase <span class="token operator">=</span> style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>crossSize <span class="token operator">=</span> <span class="token string">"height"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossStart <span class="token operator">=</span> <span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossEnd <span class="token operator">=</span> <span class="token string">"bottom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexDirection <span class="token operator">===</span> <span class="token string">"column"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>mainSize <span class="token operator">=</span> <span class="token string">"height"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainStart <span class="token operator">=</span> <span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainEnd <span class="token operator">=</span> <span class="token string">"bottom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>mainSign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>crossSize <span class="token operator">=</span> <span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossStart <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossEnd <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexDirection <span class="token operator">===</span> <span class="token string">"column-reverse"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span>mainSize <span class="token operator">=</span> <span class="token string">"height"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainStart <span class="token operator">=</span> <span class="token string">"bottom"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainEnd <span class="token operator">=</span> <span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span>mainSign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mainBase <span class="token operator">=</span> style<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>crossSize <span class="token operator">=</span> <span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossStart <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>crossEnd <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexWrap <span class="token operator">===</span> <span class="token string">"wrap-reverse"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> crossStart<span class="token punctuation">;</span>
    crossStart <span class="token operator">=</span> crossEnd<span class="token punctuation">;</span>
    crossEnd <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    crossSign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    crossSign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> isAutoMainSize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 父元素没有设置main size</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// auto sizing</span>
    elementStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 将main size标记为子元素size和</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        elementStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">+=</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    isAutoMainSize <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 元素行设置</span>
  <span class="token keyword">let</span> flexLine <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    flexLines <span class="token operator">=</span> <span class="token punctuation">[</span>flexLine<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> mainSpace <span class="token operator">=</span> elementStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 剩余空间</span>
    crossSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 所占的每行的交叉轴的空间</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
      itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">!</span>itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 子元素可伸缩，一定可以进入当前行</span>
      flexLine<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexWrap <span class="token operator">===</span> <span class="token string">"nowrap"</span> <span class="token operator">&amp;&amp;</span> isAutoMainSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      mainSpace <span class="token operator">-=</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        crossSpace <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>crossSpace<span class="token punctuation">,</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 强行塞入当前行</span>
      flexLine<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 单个子元素main size大于容器则将其缩小</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">></span> style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// main logic</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">&lt;</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        flexLine<span class="token punctuation">.</span>mainSpace <span class="token operator">=</span> mainSpace<span class="token punctuation">;</span>
        flexLine<span class="token punctuation">.</span>crossSpace <span class="token operator">=</span> crossSpace<span class="token punctuation">;</span>
        <span class="token comment">// 另起一行</span>
        flexLine <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>
        flexLines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>flexLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mainSpace <span class="token operator">=</span> style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
        crossSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        flexLine<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        crossSpace <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>crossSpace<span class="token punctuation">,</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      mainSpace <span class="token operator">-=</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  flexLine<span class="token punctuation">.</span>mainSpace <span class="token operator">=</span> mainSpace<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexWrap <span class="token operator">===</span> <span class="token string">"nowrap"</span> <span class="token operator">||</span> isAutoMainSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    flexLine<span class="token punctuation">.</span>crossSpace <span class="token operator">=</span>
      style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">:</span> crossSpace<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    flexLine<span class="token punctuation">.</span>crossSpace <span class="token operator">=</span> crossSpace<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flexLine<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 计算主轴</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 剩余空间不足，仅在single line的情况下</span>
    <span class="token keyword">let</span> scale <span class="token operator">=</span> style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>style<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">-</span> mainSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">*</span> scale<span class="token punctuation">;</span>

      itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
      itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
        itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// process each flex line</span>
    flexLines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> mainSpace <span class="token operator">=</span> items<span class="token punctuation">.</span>mainSpace<span class="token punctuation">;</span>
      <span class="token comment">// 按flex进行分配</span>
      <span class="token keyword">let</span> flexTotal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
          itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> itemStyle<span class="token punctuation">.</span>flex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          flexTotal <span class="token operator">+=</span> itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">;</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>flexTotal <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// There is flexible flex items</span>
        <span class="token keyword">let</span> currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> flexTotal<span class="token punctuation">)</span> <span class="token operator">*</span> itemStyle<span class="token punctuation">.</span>flex<span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>

          itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
          itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
            itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
          currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 没有flex元素，但是还存在剩余空间，justify-content开始工作</span>
        <span class="token keyword">let</span> currentMain<span class="token punctuation">,</span> <span class="token comment">// 元素排布的起点</span>
          step<span class="token punctuation">;</span> <span class="token comment">// 元素间距</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"flex-start"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
          step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"flex-end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          currentMain <span class="token operator">=</span> mainSpace <span class="token operator">*</span> mainSign <span class="token operator">+</span> mainBase<span class="token punctuation">;</span>
          step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"space-between"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// n个元素之间有n-1个间距</span>
          step <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> mainSign<span class="token punctuation">;</span>
          currentMain <span class="token operator">=</span> mainBase<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">===</span> <span class="token string">"space-around"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// 左右两边是半个step，元素之间是一个step</span>
          step <span class="token operator">=</span> <span class="token punctuation">(</span>mainSpace <span class="token operator">/</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> mainSign<span class="token punctuation">;</span>
          currentMain <span class="token operator">=</span> mainBase <span class="token operator">+</span> step <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
          itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">=</span> currentMain<span class="token punctuation">;</span>
          itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
            itemStyle<span class="token punctuation">[</span>mainStart<span class="token punctuation">]</span> <span class="token operator">+</span> mainSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>mainSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
          currentMain <span class="token operator">=</span> itemStyle<span class="token punctuation">[</span>mainEnd<span class="token punctuation">]</span> <span class="token operator">+</span> step<span class="token punctuation">;</span> <span class="token comment">// 加上间距</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 计算交叉轴</span>
  <span class="token comment">// align-items and align-self</span>
  <span class="token comment">// let crossSpace; // 实际的行高</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// auto sizing</span>
    crossSpace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    elementStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flexLines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      elementStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">=</span>
        elementStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">+</span> flexLines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>crossSpace<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    crossSpace <span class="token operator">=</span> style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flexLines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      crossSpace <span class="token operator">-=</span> flexLines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>crossSpace<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>flexWrap <span class="token operator">===</span> <span class="token string">"wrap-reverse"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">=</span> style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> lineSize <span class="token operator">=</span> style<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">/</span> flexLines<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">let</span> step<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"flex-start"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"flex-end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">+=</span> crossSign <span class="token operator">*</span> crossSpace<span class="token punctuation">;</span>
    step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"center"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">+</span> <span class="token punctuation">(</span>crossSign <span class="token operator">*</span> crossSpace<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"space-between"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    step <span class="token operator">=</span> crossSpace <span class="token operator">/</span> <span class="token punctuation">(</span>flexLines<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"space-around"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    step <span class="token operator">=</span> crossSpace <span class="token operator">/</span> flexLines<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    crossBase <span class="token operator">+=</span> <span class="token punctuation">(</span>crossSign <span class="token operator">*</span> step<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"stretch"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    crossBase <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  flexLines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> lineCrossSize <span class="token operator">=</span>
      style<span class="token punctuation">.</span>alignContent <span class="token operator">===</span> <span class="token string">"stretch"</span>
        <span class="token operator">?</span> items<span class="token punctuation">.</span>crossSpace <span class="token operator">+</span> crossSpace <span class="token operator">/</span> flexLines<span class="token punctuation">.</span>length
        <span class="token operator">:</span> items<span class="token punctuation">.</span>crossSpace<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        itemStyle <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> align <span class="token operator">=</span> itemStyle<span class="token punctuation">.</span>alignself <span class="token operator">||</span> style<span class="token punctuation">.</span>alignItems<span class="token punctuation">;</span>

      <span class="token comment">// 计算单个元素的位置</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 强制撑高</span>
        itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">=</span> align <span class="token operator">===</span> <span class="token string">"stretch"</span> <span class="token operator">?</span> lineCrossSize <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>align <span class="token operator">===</span> <span class="token string">"flex-start"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">=</span> crossBase<span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
          itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">+</span> crossSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>align <span class="token operator">===</span> <span class="token string">"flex-end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">=</span> crossBase <span class="token operator">+</span> crossSign <span class="token operator">*</span> lineCrossSize<span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">=</span>
          itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">-</span> crossSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>align <span class="token operator">===</span> <span class="token string">"center"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">=</span>
          crossBase <span class="token operator">+</span> <span class="token punctuation">(</span>crossSign <span class="token operator">*</span> <span class="token punctuation">(</span>lineCrossSize <span class="token operator">-</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
          itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">+</span> crossSign <span class="token operator">*</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>align <span class="token operator">===</span> <span class="token string">"stretch"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span> <span class="token operator">=</span> crossBase<span class="token punctuation">;</span>
        itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">=</span>
          crossBase <span class="token operator">+</span>
          crossSign <span class="token operator">*</span>
            <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>
            itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span>
              <span class="token operator">?</span> itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span>
              <span class="token operator">:</span> lineCrossSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

        itemStyle<span class="token punctuation">[</span>crossSize<span class="token punctuation">]</span> <span class="token operator">=</span>
          crossSign <span class="token operator">*</span> <span class="token punctuation">(</span>itemStyle<span class="token punctuation">[</span>crossEnd<span class="token punctuation">]</span> <span class="token operator">-</span> itemStyle<span class="token punctuation">[</span>crossStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    crossBase <span class="token operator">+=</span> crossSign <span class="token operator">*</span> <span class="token punctuation">(</span>lineCrossSize <span class="token operator">+</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  layout<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><h3 id="前提：轻量级跨平台图像编解码库"><a href="#前提：轻量级跨平台图像编解码库" class="headerlink" title="前提：轻量级跨平台图像编解码库"></a>前提：<a href="https://www.npmjs.com/package/images">轻量级跨平台图像编解码库</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="STEP-1-绘制单个元素"><a href="#STEP-1-绘制单个元素" class="headerlink" title="STEP 1: 绘制单个元素"></a>STEP 1: 绘制单个元素</h3><ul>
<li>绘制需要依赖一个图形环境</li>
<li>采用 npm 包 images</li>
<li>绘制在一个 viewport 上进行</li>
<li>与绘制相关的属性：background-color，border，background-image 等</li>
</ul>
<h3 id="STEP-2-绘制-DOM"><a href="#STEP-2-绘制-DOM" class="headerlink" title="STEP 2: 绘制 DOM"></a>STEP 2: 绘制 DOM</h3><p>递归渲染所有的子元素。</p>
<h3 id="主要代码-1"><a href="#主要代码-1" class="headerlink" title="主要代码"></a>主要代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
 * @Author: httishere
 * @Date: 2021-10-12 14:13:01
 * @LastEditTime: 2021-10-12 14:50:14
 * @LastEditors: Please set LastEditors
 * @Description: 元素渲染
 * @FilePath: /Note/toy-browser/render.js
 */</span>

<span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">viewport<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token function">images</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"background-color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> color <span class="token operator">=</span> element<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"background-color"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"rgb(255, 255, 255)"</span><span class="token punctuation">;</span>
      color<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">rgb\((\d+),(\d+),(\d+)\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 暂时仅支持rgb格式</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      img<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 绘制</span>
      viewport<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> element<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">render</span><span class="token punctuation">(</span>viewport<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> render<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="toy-browser-项目-github-地址"><a href="#toy-browser-项目-github-地址" class="headerlink" title="toy-browser 项目(github 地址)"></a><a href="https://github.com/httIsHere/FrontEndTrainingCamp-Note/tree/main/toy-browser">toy-browser 项目</a>(github 地址)</h2><p>———————————————————————————————- 浏览器原理篇 END ———————————————————————————————-</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」脚本 vs 模块</title>
    <url>/2021/05/18/yuque/kg66zp/</url>
    <content><![CDATA[<p>JavaScript 有两种源文件，一种叫做脚本，一种叫做模块。</p>
<p>这个区分是在 ES6 引入了模块机制开始的，在 ES5 和之前的版本中，就只有一种源文件类型（就只有脚本）。脚本是可以由浏览器或者 node 环境引入执行的，而模块只能由 JavaScript 代码用<code>import</code>引入执行。</p>
<p>从概念上，脚本是你具有主动性的 JavaScript 代码段，是控制宿主完成一定任务的代码；而模块是被动性的 JavaScript 代码段，是等待被调用的库。</p>
<p>实际上模块和脚本之间的区别仅仅在于是否包含 import 和 export。脚本是一种兼容之前的版本的定义，在这个模式下，没有 import 就不需要处理加载“.js”文件问题。现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，<strong>必须给 script 标签添加 type=“module”</strong>，如果引入脚本，则不需要 type。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxxx.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>脚本中可以包含语句。</p>
<p>模块中可以包含三种内容：import 声明，export 声明和语句。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1621322989107-d866e463-32fb-4c31-88e7-0125ace294a7.jpeg#height=596&amp;id=yjRTx&amp;originHeight=596&amp;originWidth=1040&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1040" alt=""></p>
<h4 id="import-声明"><a href="#import-声明" class="headerlink" title="import 声明"></a>import 声明</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"mod"</span><span class="token punctuation">;</span> <span class="token comment">//引入一个模块</span>
<span class="token keyword">import</span> v <span class="token keyword">from</span> <span class="token string">"mod"</span><span class="token punctuation">;</span> <span class="token comment">//把模块默认的导出值放入变量v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p>
<p>带 from 的 import 意思是引入模块中的一部分信息，可以把它们变成本地的变量。</p>
<ul>
<li><code>import x from &quot;./a.js&quot;</code>，引入模块中导出的默认值。</li>
<li><code>import &#123;a as x, modify&#125; from &quot;./a.js&quot;;</code>，引入模块中的变量。</li>
<li><code>import * as x from &quot;./a.js&quot;</code>，把模块中所有的变量以类似对象属性的方式引入。</li>
</ul>
<p>语法要求不带 as 的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模块a</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 模块b</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> modify <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们调用修改变量的函数后，b 模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量实际上并没有新建一个变量而是引用了原来的变量。</p>
<h4 id="export-声明"><a href="#export-声明" class="headerlink" title="export 声明"></a>export 声明</h4><p>与 import 相对，export 声明承担的是导出的任务。模块中导出变量的方式有两种，一种是独立使用 export 声明，另一种是直接在声明型语句前添加 export 关键字。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">var</span> <span class="token operator">~</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token operator">~</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token operator">~</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token operator">~</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>export default</code>表示导出一个<strong>默认变量值</strong>，它可以用于 function 和 class。这里导出的变量是没有名称的，可以使用<code>import x from &quot;./a.js&quot;</code>这样的语法，在模块中引入。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>导出的是值，导出的就是普通变量 a 的值，以后 a 的变化与导出的值就无关了，修改变量 a，不会使得其他模块中引入的 default 值发生改变。</p>
<h4 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h4><p>执行函数的行为通常是在 JavaScript 代码执行时，<strong>注册</strong>宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括号中间的部分）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"go go go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>宏任务中可能会执行的代码包括“脚本 (script)”，“模块（module）”和“函数体（function body）”。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// normal</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 异步函数体</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 生成器函数体</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 异步生成器函数体</span>
<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1621322988912-dd04d85c-a828-4f56-a49c-6fb19df8dac5.jpeg#height=461&amp;id=YDuve&amp;originHeight=461&amp;originWidth=914&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=914" alt=""></p>
<h4 id="两个-JavaScript-语法的全局机制：预处理和指令序言。"><a href="#两个-JavaScript-语法的全局机制：预处理和指令序言。" class="headerlink" title="两个 JavaScript 语法的全局机制：预处理和指令序言。"></a>两个 JavaScript 语法的全局机制：预处理和指令序言。</h4><h5 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h5><p>JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 let 这些语句，以确定其中变量的意义。</p>
<ul>
<li><code>var</code>声明：永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量（变量提升）。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只知道a已经被声明，但是不知道a被赋的值</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>预处理过程在执行之前，所以有函数体级的变量 a，就不会去访问外层作用域中的变量 a 了，而函数体级的变量 a 此时还没有赋值，所以是 undefined。<br>因为早年 JavaScript 没有 let 和 const，只能用 var，又因为 var 除了脚本和函数体都会穿透，人民群众发明了“<strong>立即执行的函数表达式（IIFE）</strong>”这一用法，用来产生作用域：</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span>
    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如果不使用 IIFE 则会打印出 20 个 20，因为全局只有一个 i，而执行完循环后 i 变成 20。</li>
<li><code>function</code>声明：在全局（脚本、模块和函数体），function 声明表现跟 var 相似，不同之处在于，function 声明不但在作用域中加入变量，还会给它赋值。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ foo()&#123;&#125;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>但是 function 声明出现在 if 等逻辑语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>function 在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，<strong>赋值行为发生在了执行阶段</strong>。</li>
<li><code>class</code>声明：在 class 声明之前使用 class 名，会抛错。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 该情况下也会报错，说明后面的声明对作用域内的变量使用也会产生影响</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用。<br>class 设计比 function 和 var 更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</li>
</ul>
<h5 id="指令序言机制"><a href="#指令序言机制" class="headerlink" title="指令序言机制"></a>指令序言机制</h5><p>脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。这里的指令序言最早是为了 use strict 设计的，它规定了一种给 JavaScript 代码添加元信息的方式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里定义了函数 f，f 中打印 this 值，然后用 call 的方法调用 f，传入 null 作为 this 值，我们可以看到最终结果是 null 原封不动地被当做 this 值打印了出来，这是严格模式的特征。</p>
<p>在非严格模式下，则打印出 global。</p>
<p>“use strict”是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给 JavaScript 的引擎和实现者一些统一的表达方式，在静态扫描时指定 JavaScript 代码的一些特性。</p>
<p>JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p>
<p>Final：试着用 babel，分析一段 JavaScript 的模块代码，并且找出它中间的所有 export 的变量。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「Daily」学习方法</title>
    <url>/2021/05/13/yuque/lqophl/</url>
    <content><![CDATA[<ul>
<li><strong>关于前端，你会什么？</strong></li>
</ul>
<p>真的一点也想不出来自己会啥，html？css？js？根本不知道自己会什么。<br>如果面试，怎么回答？<br>实际上就是自己<strong>知识体系</strong>的问题。</p>
<p><strong>关于前端，你不会什么？</strong><br>**<br><strong>前端技能模型：</strong></p>
<ul>
<li>领域知识（step 1）</li>
<li>前端知识（step 2）</li>
<li>编程能力&amp;架构能力&amp;工程能力（step 3）</li>
</ul>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」数组遍历方法</title>
    <url>/2020/10/13/yuque/lw5tof/</url>
    <content><![CDATA[<ul>
<li>forEach</li>
<li>map</li>
<li>filter</li>
<li>find</li>
<li>reduce</li>
</ul>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>没有返回值，本质上等同于 for 循环，对每一项执行 function 函数;</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4, 5];</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> _arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> num<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> _new_arr <span class="token operator">=</span> _arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    item<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, &#123;id: 9&#125;, 11]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>map 需要返回值，若没有 return 则返回 undefined；</li>
<li>map 操作会返回新数组不改变原数组（除引用类型外）；</li>
</ul>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>主要用于过滤所有符合条件的数组元素并组成新数组返回。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>主要应用于查找第一个符合条件的数组元素。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">>=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」链接🔗</title>
    <url>/2021/05/06/yuque/mbzto4/</url>
    <content><![CDATA[<p>链接是 HTML 中的一种机制，它是 HTML 文档和其它文档或者资源的连接关系，在 HTML 中，链接有两种类型。一种是超链接型标签，一种是外部资源链接。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1620270517981-020e14be-3c75-4002-bc3b-53dda82085dd.png#height=1100&amp;id=pgt3Z&amp;originHeight=1100&amp;originWidth=702&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=702" alt=""></p>
<h3 id="link-标签"><a href="#link-标签" class="headerlink" title="link 标签"></a>link 标签</h3><p>HTML 标准并没有规定浏览器如何使用元信息，我们还讲到了元信息中有不少是被设计成“无需被浏览器识别，而是专门用于搜索引擎看的”。</p>
<p>link 标签也是元信息的一种，在很多时候，它也是不会对浏览器产生任何效果的。</p>
<p>link 标签会生成一个链接，它可能生成超链接，也可能生成外部资源链接。</p>
<p>一些 link 标签会生成超链接，这些超链接又不会像 a 标签那样显示在网页中，这就是超链接型的 link 标签。这意味着多数浏览器中，这些 link 标签不产生任何作用。但是，这些 link 标签能够被搜索引擎和一些浏览器插件识别，从而产生关键性作用。</p>
<p>另外一些 link 标签则会把外部的资源链接到文档中，也就是说，会实际下载这些资源，并且做出一些处理，比如我们常见的用 link 标签引入样式表。</p>
<p>除了元信息的用法之外，多数外部资源型的 link 标签还能够被放在 body 中使用，从而起到把外部资源链接进文档的作用。</p>
<p>link 标签的链接类型主要通过 <strong>rel 属性</strong>来区分，<code>&lt;link rel=&quot;xx&quot; ...&gt;</code>。</p>
<h4 id="超链接类-link-标签"><a href="#超链接类-link-标签" class="headerlink" title="超链接类 link 标签"></a>超链接类 link 标签</h4><p>超链接型 link 标签是一种被动型链接，在用户不操作的情况下，它们不会被主动下载。</p>
<p>link 标签具有特定的 rel 属性，会成为特定类型的 link 标签。产生超链接的 link 标签包括：具有 rel=“canonical” 的 link、具有 rel=”alternate”的 link、具有 rel=“prev” rel=”next”的 link 等等。</p>
<ul>
<li>canonical 型 link，<code>&lt;link rel=&quot;canonical&quot; href=&quot;...&quot;&gt;</code>：这个标签提示页面它的主 URL，在网站中常常有多个 URL 指向同一页面的情况，搜索引擎访问这类页面时会去掉重复的页面，这个 link 会提示搜索引擎保留哪一个 URL。</li>
<li>alternate 型 link，<code>&lt;link rel=&quot;alternate&quot; href=&quot;...&quot;&gt;</code>：这个标签提示页面它的变形形式，这个所谓的变形可能是当前页面内容的不同格式、不同语言或者为不同的设备设计的版本，这种 link 通常也是提供给搜索引擎来使用的。alternate 型的 link 的一个典型应用场景是，页面提供 rss 订阅时，可以用这样的 link 来引入：<code>&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;...&quot;&gt;</code>。</li>
<li>prev 型 link &amp; next 型 link：在互联网应用中，很多网页都属于一个序列，比如分页浏览的场景，或者图片展示的场景，每个网页是序列中的一个项。这种时候，就适合使用 prev 和 next 型的 link 标签，来告诉搜索引擎或者浏览器它的前一项和后一项，这有助于页面的批量展示。因为 next 型 link 告诉浏览器“这是很可能访问的下一个页面”，HTML 标准还建议对 next 型 link 做预处理，在本课后面的内容，我们会讲到预处理类的 link。</li>
<li>其它超链接类的 link：表示一个跟当前文档相关联的信息，可以把这样的 link 标签视为一种带链接功能的 meta 标签。<ul>
<li>rel=“author” 链接到本页面的作者，一般是 mailto: 协议</li>
<li>rel=“help” 链接到本页面的帮助页</li>
<li>rel=“license” 链接到本页面的版权信息页</li>
<li>rel=“search” 链接到本页面的搜索页面（一般是站内提供搜索时使用）</li>
</ul>
</li>
</ul>
<h4 id="外部资源类-link-标签"><a href="#外部资源类-link-标签" class="headerlink" title="外部资源类 link 标签"></a>外部资源类 link 标签</h4><p>外部资源型 link 标签<strong>会被主动下载</strong>，并且根据 rel 类型做不同的处理。外部资源型的标签包括：具有 icon 型的 link、预处理类 link、modulepreload 型的 link、stylesheet、pingback。</p>
<ul>
<li>icon 型的 link：表示页面的 icon。<br>多数浏览器会读取 icon 型 link，并且把页面的 icon 展示出来。icon 型 link 是唯一一个外部资源类的元信息 link，其它元信息类 link 都是超链接，这意味着，icon 型 link 中的图标地址默认会被浏览器下载和使用。<br>如果没有指定这样的 link，多数浏览器会使用域名根目录下的 favicon.ico，即使它并不存在，所以从性能的角度考虑，建议一定要保证页面中有 icon 型的 link。<br>只有 icon 型 link 有有效的 sizes 属性，HTML 标准允许一个页面出现多个 icon 型 link，并且用 sizes 指定它适合的 icon 尺寸。</li>
<li>预处理类 link：导航到一个网站需要经过 dns 查询域名、建立连接、传输数据、加载进内存和渲染等一系列的步骤。<br>预处理类 link 标签就是允许我们控制浏览器，提前针对一些资源去做这些操作，以提高性能（当然如果乱用的话，性能反而更差）。<ul>
<li>dns-prefetch 型 link 提前对一个域名做 dns 查询，这样的 link 里面的 href 实际上只有域名有意义。</li>
<li>preconnect 型 link 提前对一个服务器建立 tcp 连接。</li>
<li>prefetch 型 link 提前取 href 指定的 url 的内容。</li>
<li>preload 型 link 提前加载 href 指定的 url。</li>
<li>prerender 型 link 提前渲染 href 指定的 url。</li>
</ul>
</li>
<li>modulepreload 型的 link：作用是预先加载一个 JavaScript 的模块，可以保证 JS 模块不必等到执行时才加载（完成下载并放入内存，并不会执行对应的 JavaScript）。</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modulepreload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modulepreload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpers.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modulepreload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>irc.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modulepreload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fog-machine.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>假设 app.js 中有 import “irc” 和 import “fog-machine”, 而 irc.js 中有 import “helpers”。这段代码使用 moduleload 型 link 来预加载了四个 js 模块。通过加入对四个 JS 文件的 link 标签，使得四个 JS 文件有机会被并行地下载，这样提高了性能。</li>
<li>stylesheet 型 link：基本用法是从一个 CSS 文件创建一个样式表，type 属性可以没有，如果有，必须是”text/css”才会生效。</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>pingback 型 link：表示本网页被引用时，应该使用的 pingback 地址，这个机制是一份独立的标准，遵守 pingback 协议的网站在引用本页面时，会向这个 pingback url 发送一个消息。</li>
</ul>
<h4 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h4><p>a 标签是“anchor”的缩写，它是锚点的意思，anchor 标签的意思是标识文档中的特定位置。其同时充当了链接和目标点的角色，当 a 标签有 href 属性时，它是链接，当它有 name 时，它是链接的目标。具有 href 的 a 标签跟一些 link 一样，会产生超链接，也就是在用户不操作的情况下，它们不会被主动下载的被动型链接。a 标签基本解决了在页面中<strong>插入文字型和整张图片超链接</strong>的需要。</p>
<p>重点的内容是，a 标签也可以有 rel 属性：alternate，author，help，license，next，prev，search。</p>
<p>a 标签独有的 rel 类型：</p>
<ul>
<li>tag 表示本网页所属的标签；</li>
<li>bookmark 到上级章节的链接。</li>
</ul>
<p>a 标签还有一些辅助的 rel 类型，用于提示浏览器或者搜索引擎做一些处理：</p>
<ul>
<li>nofollow 此链接不会被搜索引擎索引；</li>
<li>noopener 此链接打开的网页无法使用 opener 来获得当前页面的窗口；</li>
<li>noreferrer 此链接打开的网页无法使用 referrer 来获得当前页面的 url；</li>
<li>opener 打开的网页可以使用 window.opener 来访问当前页面的 window 对象，这是 a 标签的默认行为。</li>
</ul>
<h3 id="area-标签：区域型的链接"><a href="#area-标签：区域型的链接" class="headerlink" title="area 标签：区域型的链接"></a>area 标签：区域型的链接</h3><p>area 是整个 html 规则中唯一支持非矩形热区的标签，它的 shape 属性支持三种类型。</p>
<ul>
<li>圆形：circle 或者 circ，coords 支持三个值，分别表示中心点的 x,y 坐标和圆形半径 r。</li>
<li>矩形：rect 或者 rectangle，coords 支持两个值，分别表示两个对角顶点 x1，y1 和 x2，y2。</li>
<li>多边形：poly 或者 polygon，coords 至少包括 6 个值，表示多边形的各个顶点。</li>
</ul>
<p>area 必须跟 img 和 map 标签配合使用。使用示例如下（例子来自 html 标准）：在一张图片上画热区并且产生链接，分别使用了矩形、圆形和多边形三种 area。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  Please select a shape:
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shapes.png<span class="token punctuation">"</span></span>
    <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#shapes<span class="token punctuation">"</span></span>
    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Four shapes are available: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star.<span class="token punctuation">"</span></span>
  <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shapes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50,50,100,100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- the hole in the red box --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25,25,125,125<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red.html<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Red box.<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span>
      <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span>
      <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200,75,50<span class="token punctuation">"</span></span>
      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green.html<span class="token punctuation">"</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Green circle.<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span>
      <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span>
      <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>325,25,262,125,388,125<span class="token punctuation">"</span></span>
      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue.html<span class="token punctuation">"</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blue triangle.<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span>
      <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span>
      <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60<span class="token punctuation">"</span></span>
      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow.html<span class="token punctuation">"</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Yellow star.<span class="token punctuation">"</span></span>
    <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CSS/Less</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」文法</title>
    <url>/2021/04/01/yuque/mdsqnm/</url>
    <content><![CDATA[<p>文法是编译原理中对语言的写法的一种规定，一般来说，文法分成词法和语法两种。</p>
<blockquote>
<p>词法规定了语言的最小语义单元：token，可以翻译成“标记”或者“词”。<br>词法分析技术上可以使用状态机或者正则表达式来进行。</p>
</blockquote>
<h2 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h2><p>分类：</p>
<ul>
<li>WhiteSpace 空白字符</li>
<li>LineTerminator 换行符</li>
<li>Comment 注释</li>
<li>Token 词<ul>
<li>IdentifierName 标识符名称，典型案例是我们使用的变量名，注意这里关键字也包含在内了。</li>
<li>Punctuator 符号，我们使用的运算符和大括号等符号。</li>
<li>NumericLiteral 数字直接量，就是我们写的数字。</li>
<li>StringLiteral 字符串直接量，就是我们用单引号或者双引号引起来的直接量。</li>
<li>Template 字符串模板，用反引号` 括起来的直接量。</li>
</ul>
</li>
</ul>
<p>除法和正则表达式冲突问题。在 JavaScript 内不但支持除法运算符“ / ”和“ /= ”，还支持用斜杠括起来的正则表达式“ /abc/ ”。</p>
<p>但是，这时候对词法分析来说，其实是没有办法处理的，所以 JavaScript 的解决方案是定义两组词法，然后靠语法分析传一个标志给词法分析器，让它来决定使用哪一套词法。</p>
<p>还有比如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>理论上，“ ${ } ”内部可以放任何 JavaScript 表达式代码，而这些代码是以“ } ” 结尾的，也就是说，这部分词法不允许出现“ } ”运算符。</p>
<p>是否允许“ } ”的两种情况，与除法和正则表达式的两种情况相乘就是四种词法定义，所以你在 JavaScript 标准中，可以看到四种定义：</p>
<ul>
<li>InputElementDiv；</li>
<li>InputElementRegExp；</li>
<li>InputElementRegExpOrTemplateTail；</li>
<li>InputElementTemplateTail。</li>
</ul>
<p>为了解决这两个问题，标准中还不得不把除法、正则表达式直接量和“ } ”从 token 中单独抽出来，用词上，也把原本的 Token 改为 CommonToken。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」JS Type</title>
    <url>/2021/03/08/yuque/nhlvq8/</url>
    <content><![CDATA[<ul>
<li>为什么有的编程规范要求用 void 0 代替 undefined？</li>
<li>字符串有最大长度吗？</li>
<li>0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？</li>
<li>ES6 新加入的 Symbol 是个什么东西？</li>
<li>为什么给对象添加的方法能用在基本类型上？</li>
</ul>
<blockquote>
<p>运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型。</p>
</blockquote>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
<li>Symbol</li>
<li>Object</li>
</ul>
<h4 id="q1-为什么有的编程规范要求用-void-0-代替-undefined？"><a href="#q1-为什么有的编程规范要求用-void-0-代替-undefined？" class="headerlink" title="q1: 为什么有的编程规范要求用 void 0 代替 undefined？"></a>q1: 为什么有的编程规范要求用 void 0 代替 undefined？</h4><p>void 运算符通常只用于获取<code>undefined</code>的原始值，一般使用<code>void(0)</code>（等同于<code>void 0</code>），因为 <code>JavaScript</code> 的代码 <code>undefined</code> 是一个变量，而并非是一个关键字，这是 <code>JavaScript</code> 语言公认的设计失误之一，所以为了避免无意中被篡改，建议使用<code>void 0</code>来获取 undefined 值。</p>
<h4 id="q2-字符串有最大长度吗？"><a href="#q2-字符串有最大长度吗？" class="headerlink" title="q2: 字符串有最大长度吗？"></a>q2: 字符串有最大长度吗？</h4><p>String 的最长长度是<code>2^53 - 1</code>，String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。<br>JavaScript 中的字符串是永远无法变更的，一旦字符串构造出来，无法用任何方式改变字符串的内容，所以字符串具有值类型的特征。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> aa <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span>
aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"S"</span><span class="token punctuation">;</span>
aa<span class="token punctuation">;</span> <span class="token comment">// string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="q3-0-1-0-2-不是等于-0-3-么？为什么-JavaScript-里不是这样的？"><a href="#q3-0-1-0-2-不是等于-0-3-么？为什么-JavaScript-里不是这样的？" class="headerlink" title="q3: 0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？"></a>q3: 0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？</h4><p>根据双精度浮点数的定义，非整数 Number 无法使用==/===进行比较，正确的比较方法是使用 JS 提供的最小精度值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="q4-ES6-新加入的-Symbol-是个什么东西？"><a href="#q4-ES6-新加入的-Symbol-是个什么东西？" class="headerlink" title="q4: ES6 新加入的 Symbol 是个什么东西？"></a>q4: ES6 新加入的 Symbol 是个什么东西？</h4><p>ES6 内引入的新类型，是一切非字符串的对象 key 的集合。</p>
<blockquote>
<p><strong>symbol</strong> 是一种<strong>基本数据类型</strong> （<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">primitive data type</a>）。<code>Symbol()</code>函数会返回<strong>symbol</strong>类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：”<code>new Symbol()</code>“。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"my symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以使用 Symbol 的某些属性实现一些功能，比如可以使用<code>Symbol.iterator</code>(迭代器)来自定义<code>for...of</code>在对象上的行为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> v<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> v <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> o<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 ... 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="q5-为什么给对象添加的方法能用在基本类型上？"><a href="#q5-为什么给对象添加的方法能用在基本类型上？" class="headerlink" title="q5: 为什么给对象添加的方法能用在基本类型上？"></a>q5: 为什么给对象添加的方法能用在基本类型上？</h4><p>对象的定义是“属性的集合”。属性分为数据属性和访问器属性，二者都是 key-value 结构，key 可以是字符串或者 Symbol 类型。<br>JavaScript 中的“类”仅仅是运行时对象的一个私有属性，而 JavaScript 中是无法自定义类型的（TypeScript 解决了 JavaScript 的类型问题）。</p>
<p>3 与 new Number(3) 是完全不同的值，它们一个是 Number 类型， 一个是对象类型。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">3</span> <span class="token operator">===</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，产生新的对象</span>
<span class="token number">3</span> <span class="token operator">===</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，强制进行类型转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。</p>
<p>运算符提供了<strong>装箱操作</strong>，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//symbol，a并非对象</span>
a<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello，有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="StringToNumber"><a href="#StringToNumber" class="headerlink" title="StringToNumber"></a>StringToNumber</h4><p>在不传入第二个参数的情况下，parseInt 只支持 16 进制前缀“0x”，而且会忽略非数字字符，也不支持科学计数法。在一些古老的浏览器环境中，parseInt 还支持 0 开头的数字作为 8 进制前缀，这是很多错误的来源。所以在任何环境下，都建议传入 parseInt 的第二个参数，而 parseFloat 则直接把原字符串作为十进制来解析，它不会引入任何的其他进制。</p>
<p>简易的字符串转数字：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">convertStringToNumber2</span><span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> charts <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> charts<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> charts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    number <span class="token operator">=</span> number <span class="token operator">*</span> x<span class="token punctuation">;</span>
    number <span class="token operator">+=</span> charts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>charts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"."</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> fraction <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 小数</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> charts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fraction <span class="token operator">=</span> fraction <span class="token operator">/</span> x<span class="token punctuation">;</span>
    number <span class="token operator">+=</span> <span class="token punctuation">(</span>charts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction<span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> number<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>在进行字符串到数字的类型转换时尽量使用 Number()进行转换。</strong></p>
<h4 id="NumberToString"><a href="#NumberToString" class="headerlink" title="NumberToString"></a>NumberToString</h4><p>当 Number 绝对值较大或者较小时，字符串表示则是使用科学计数法表示的。</p>
<h4 id="装箱转换"><a href="#装箱转换" class="headerlink" title="装箱转换"></a>装箱转换</h4><p>每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象。</p>
<p>全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">symbolObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbolObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject <span class="token keyword">instanceof</span> <span class="token class-name">Symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> symbolObject <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>每一类装箱对象皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获取：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>symbolObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[object Symbol]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="拆箱转换"><a href="#拆箱转换" class="headerlink" title="拆箱转换"></a>拆箱转换</h4><p>在 JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换。</p>
<p>对象到 String 和 Number 的转换都遵循“先拆箱再转换”的规则，拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或者没有返回基本类型，则会产生类型错误 TypeError。</p>
<p>先执行 valueOf 还是 toSting 取决于你的后续操作。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"valueOf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
o <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// valueOf toSring TypeError</span>

<span class="token function">String</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// toString valueOf TypeError</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"valueOf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"toPrimitive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
o <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// toPrimitive hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="其他规范类型"><a href="#其他规范类型" class="headerlink" title="其他规范类型"></a>其他规范类型</h4><ul>
<li>List 和 Record： 用于描述函数传参过程。</li>
<li>Set：主要用于解释字符集等。</li>
<li>Completion Record：用于描述异常、跳出等语句执行过程。</li>
<li>Reference：用于描述对象属性访问、delete 等。</li>
<li>Property Descriptor：用于描述对象的属性。</li>
<li>Lexical Environment 和 Environment Record：用于描述变量和作用域。</li>
<li>Data Block：用于描述二进制数据。</li>
</ul>
<h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>不用原生的 Number 和 parseInt，用 JavaScript 代码实现 String 到 Number 的转换，该怎么做呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span>
<span class="token operator">+</span>num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」数据结构</title>
    <url>/2020/09/27/yuque/mmsmfe/</url>
    <content><![CDATA[<ul>
<li>栈（Stack）</li>
<li>堆（Heap）</li>
<li>队列（Queue）</li>
<li>链表（Linked）</li>
<li>数组（Array）</li>
<li>树（Tree）</li>
<li>集合（Set）</li>
<li>哈希表（Map）</li>
</ul>
<p>js 内变量类型：</p>
<ul>
<li>基础类型（Undefined, Null, Boolean, Number, String, Symbol）</li>
<li>引用类型（Object）</li>
</ul>
<h3 id="栈：先进后出，后进先出（LIFO）"><a href="#栈：先进后出，后进先出（LIFO）" class="headerlink" title="栈：先进后出，后进先出（LIFO）"></a>栈：先进后出，后进先出（LIFO）</h3><p>数组的<code>push</code>和<code>pop</code>方法就是应用了栈的存取方式。</p>
<h4 id="变量应用：基础类型的值保存在栈中，这些类型的值有固定大小，“按值来访问”；"><a href="#变量应用：基础类型的值保存在栈中，这些类型的值有固定大小，“按值来访问”；" class="headerlink" title="变量应用：基础类型的值保存在栈中，这些类型的值有固定大小，“按值来访问”；"></a>变量应用：基础类型的值保存在栈中，这些类型的值有固定大小，<strong>“按值来访问”</strong>；</h4><h4 id="应用：四则远算表达式处理"><a href="#应用：四则远算表达式处理" class="headerlink" title="应用：四则远算表达式处理"></a>应用：四则远算表达式处理</h4><p>给出一个四则远算表达式，计算结果，参考：<a href="https://blog.csdn.net/u011268787/article/details/78878991">堆栈实现四则运算</a>。<br>如：”19+(3-1)<em>3+10/2-(2+30)</em>2”</p>
<p>机器不会知道相对的优先级，所以需要我们自己去转化优先级方案，我们的<code>19+(3-1)*3+10/2-(2+30)*2</code>自然表达式是一个中缀表达式，需要将其转换为后缀表达式，便于优先级的计算。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/250093/1601349113526-ceb91087-5a79-4d5a-8de4-e830dc6f4b3a.png#height=1052&amp;id=o62A8&amp;originHeight=1052&amp;originWidth=944&amp;originalType=binary∶=1&amp;size=162902&amp;status=done&amp;style=none&amp;width=944" alt="截屏2020-09-29 上午11.11.36.png"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_i <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"Stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唯一标识，防止直接操作当前对象，只能通过开放方法操作</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> _last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 释放内存</span>
    <span class="token keyword">return</span> _last<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 栈顶节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>先将表达式转成后序表达式：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ^ 中缀表达式转后缀表达式</span>
<span class="token keyword">function</span> <span class="token function">matchInBrackets</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> f_stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _num <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 存储当前数字</span>
  <span class="token keyword">let</span> f_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 当前元素是数字</span>
      _num <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        _num <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录当前数字</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      _num <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录当前数字</span>
      _num <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _peek <span class="token operator">=</span> f_stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶元素</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_peek<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">let</span> _p <span class="token operator">=</span> f_stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// pop 出"()"内所有的元素</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>_p <span class="token operator">&amp;&amp;</span> _p <span class="token operator">!==</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _p <span class="token operator">=</span> f_stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>f_stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"("</span><span class="token punctuation">)</span> f_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"("</span> <span class="token operator">||</span> <span class="token function">compareSymbols</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _peek<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          f_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareSymbols</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _peek<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">let</span> _p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token comment">// pop出栈内比当前优先级低的</span>
          <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            _p <span class="token operator">=</span> f_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compareSymbols</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> _p<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>f_stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          f_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        f_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>f_stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>f_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ^ 比较算数符号的优先级</span>
<span class="token keyword">function</span> <span class="token function">compareSymbols</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> _arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _i <span class="token operator">=</span> _arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _j <span class="token operator">=</span> _arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ! 1: 优先级高，0: 同等优先级，-1: 优先级低</span>
  <span class="token keyword">return</span> _i <span class="token operator">-</span> _j <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> _i <span class="token operator">-</span> _j <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ^ 两个数字的四则运算</span>
<span class="token keyword">function</span> <span class="token function">numCalculate</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> b <span class="token operator">/</span> a<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算结果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">calculateS</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token function">matchInBrackets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// [19,  3,   1, '-', 3, '*', '+', 10,  2, '/', '+', 2, 30,  '+', 2, '*', '-']</span>
  <span class="token keyword">let</span> r_stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      r_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> a <span class="token operator">=</span> r_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> b <span class="token operator">=</span> r_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> _r <span class="token operator">=</span> <span class="token function">numCalculate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      r_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  result <span class="token operator">=</span> r_stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">delete</span> r_stack<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="实践：执行上下文和执行栈"><a href="#实践：执行上下文和执行栈" class="headerlink" title="实践：执行上下文和执行栈"></a>实践：执行上下文和执行栈</h4><p>—-参考：<a href="https://segmentfault.com/a/1190000017890535">前端进击的巨人（一）：执行上下文与执行栈，变量对象</a><br>js 执行到一个环境时，就会为该环境创建一个执行上下文，只要作用是确定当前环境的一个执行顺序，并做一些准备工作（确定作用域，创建局部变量）等。</p>
<ol>
<li>执行上下文（包括全局执行上下文、函数执行上下文、eval 执行上下文）</li>
</ol>
<p>生命周期：</p>
<ul>
<li>创建（创建执行上下文，函数被调用时，进入函数环境，为其创建一个执行上下文）<ol>
<li>创建变量对象（函数环境会初始化创建<code>Arguments</code>对象并赋值，函数声明并赋值，变量声明和函数表达式声明不赋值）</li>
<li>确定<code>this</code>指向</li>
<li>确定作用域</li>
</ol>
</li>
<li>执行（执行代码，执行函数内代码）<ol>
<li>变量对象赋值（变量赋值，函数表达式赋值）</li>
<li>调用函数</li>
<li>顺序执行其他代码</li>
</ol>
</li>
</ul>
<ol>
<li>执行栈（函数调用栈）</li>
</ol>
<p>程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中(入栈)；<br>程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出(出栈)，控制权交由下一个执行上下文。<br>因为 JS 执行中最先进入全局环境，所以处于<strong>“栈底的永远是全局环境的执行上下文”</strong>。而处于<strong>“栈顶的是当前正在执行函数的执行上下文”</strong>，当函数调用完成              后，它就会从栈顶被推出（理想的情况下，闭包会阻止该操作，闭包后续文章深入详解）。<br><strong>“全局环境只有一个，对应的全局执行上下文也只有一个，只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底”。</strong></p>
<blockquote>
<p>JavaScript 中函数的执行过程，其实就是一个入栈出栈的过程:</p>
<ol>
<li>当脚本要调用一个函数时，JS 解析器把该函数推入栈中（push）并执行；</li>
<li>当函数运行结束后，JS 解析器将它从堆栈中推出（pop）；</li>
</ol>
</blockquote>
<p><strong>变量对象和活动对象</strong><br>当进入到一个执行上下文后，这个变量对象才会被激活，所以叫活动对象(AO)，这时候活动对象上的各种属性才能被访问。<br><strong>“创建阶段对函数声明做赋值，变量及函数表达式仅做声明，真正的赋值操作要等到执行上下文代码执行阶段”</strong>。</p>
<ul>
<li>变量提升</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出undefined</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"I am here"</span><span class="token punctuation">;</span> <span class="token comment">// 赋值</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>函数声明优先级</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出bar的函数声明</span>
<span class="token comment">// ƒ bar() &#123;</span>
      <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/div>warning
**函数声明，变量声明，函数表达式的优先级**

- 函数声明，如果有同名属性，会替换掉
- 变量，函数表达式
- 函数声明优先 > 变量，函数表达式

**函数声明和变量声明在准备阶段都会被声明，但函数声明会被优先赋值，变量声明赋值在执行阶段。**&lt;/div>


**总结：**

1. JavaScript是单线程；
2. 栈顶的执行上下文处于执行中，其它需要排队；
3. 全局上下文只有一个处于栈底，页面关闭时出栈；
4. 函数执行上下文可存在多个，但应避免递归时堆栈溢出；
5. 函数调用时就会创建新的上下文，即使调用自身，也会创建不同的执行上下文；


### 堆：只需要属性名即可取数据，与数据存储顺序无关，且不限制出入口
> 为了便于存储和索引，在应用时常常使用二叉堆「优先级队列」解决问题，决定哪个事件先执行。-- 参考：[内存与数据结构](https://www.yuque.com/coreadvance/kagkke/lpabps#10F9H)



#### 变量应用：引用类型的值保存在堆中，栈中存储的是引用类型的引用地址（地址指针），**"按引用访问"**，引用类型的值没有固定大小，可扩展（一个对象我们可以添加多个属性）。
![](https://cdn.nlark.com/yuque/0/2020/png/250093/1602295756238-02579881-d6c4-47e2-acf5-419d745b59e4.png#height=413&amp;id=JCGXl&amp;originHeight=413&amp;originWidth=560&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=560)

- **浅拷贝：栈存储拷贝**
- **深拷贝：栈堆存储拷贝"**

**所以在进行对象拷贝时可利用利用JSON对象方法实现深拷贝，**</span><span class="token template-punctuation string">`</span></span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">。
函数调用时，会对参数赋值。而参数传递过程其实同样是变量复制的过程，所以它是按值传递。</span><span class="token template-punctuation string">`</span></span><span class="token keyword">var</span> person <span class="token operator">=</span> person<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，因为传递参数是对象时，变量复制仅复制的栈存储（浅拷贝），所以修改对象属性会造成外部变量对象的修改。
</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript
<span class="token keyword">let</span> _o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span>_o<span class="token punctuation">)</span><span class="token punctuation">;</span>
_o<span class="token punctuation">.</span>age <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="队列：FIFO，First-in-first-out"><a href="#队列：FIFO，First-in-first-out" class="headerlink" title="队列：FIFO，First in, first out"></a>队列：FIFO，<strong>First in, first out</strong></h3><p>是一种先进先出的数据结构。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/105266/1599036437935-98501859-8a05-48a3-8235-3cbc7184d0ea.png?x-oss-process=image%2Fresize%2Cw_1492#height=441&amp;id=U9wGg&amp;originHeight=441&amp;originWidth=1492&amp;originalType=binary∶=1&amp;status=done&amp;style=none&amp;width=1492" alt=""></p>
<h4 id="应用：优先级队列"><a href="#应用：优先级队列" class="headerlink" title="应用：优先级队列"></a>应用：优先级队列</h4><p>根据优先级排队，始终让优先级最高的成员处于队列队首，因此任何队列成员的变动都需要重新排序，确保队列队首成员优先级最高。</p>
<h4 id="实践：事件轮询（Event-Loop）的执行机制"><a href="#实践：事件轮询（Event-Loop）的执行机制" class="headerlink" title="实践：事件轮询（Event Loop）的执行机制"></a>实践：事件轮询（Event Loop）的执行机制</h4><h3 id="链表：递归的数据结构"><a href="#链表：递归的数据结构" class="headerlink" title="链表：递归的数据结构"></a>链表：递归的数据结构</h3><p>由多个节点组成，节点直接通过引用相互关联。</p>
<ul>
<li>在内存内，链表是不连续的内存，通过引用关联节点；</li>
<li>链表没有序列，如果引用是单向的，则只能通过上一个节点查询下一个节点；</li>
<li>节点之间的引用可以是单向的（“单向链表”），也可以是双向的（“双向链表”），还可以首位连接（“循环链表”）；</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Node</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  next<span class="token operator">:</span> Node<span class="token punctuation">,</span>
  prev<span class="token operator">:</span> Node<span class="token punctuation">,</span>
  <span class="token comment">// 其他...</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="实践：原型链"><a href="#实践：原型链" class="headerlink" title="实践：原型链"></a>实践：原型链</h4><p>每个实例对象都有一个<code>__proto__</code>属性，用于指向该实例的原型对象，该原型对象也会有个<code>__proyo__</code>对象指向自身的原型对象。<br>因此原型链是一个由<code>__proto__</code>进行关联的链表。</p>
<h3 id="数组：有顺的连续内存地址"><a href="#数组：有顺的连续内存地址" class="headerlink" title="数组：有顺的连续内存地址"></a>数组：有顺的连续内存地址</h3><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」表达式</title>
    <url>/2021/05/21/yuque/no7d0b/</url>
    <content><![CDATA[<p>在执行过程中，真正能干活的就只有表达式语句，其它语句的作用都是产生各种结构，来控制表达式语句执行，或者改变表达式语句的意义。</p>
<blockquote>
<p>表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的。</p>
</blockquote>
<p>一般来说，表达式语句要么是函数调用，要么是赋值，要么是自增、自减。</p>
<h4 id="PrimaryExpression-主要表达式"><a href="#PrimaryExpression-主要表达式" class="headerlink" title="PrimaryExpression 主要表达式"></a>PrimaryExpression 主要表达式</h4><p>包含了各种“直接量”，直接量就是直接用某种语法写出来的具有特定类型的值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"abc"</span><span class="token punctuation">;</span>
<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还能够直接量的形式定义对象，针对函数、类、数组、正则表达式等特殊对象类型，JavaScript 提供了语法层面的支持。在语法层面，function、{ 和 class 开头的表达式语句与声明语句有语法冲突，所以，我们要想使用这样的表达式，必须加上括号来回避语法冲突。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Primary Expression 还可以是 this 或者变量，在语法上，把变量称作“标识符引用”。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">;</span>
myVar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="MemberExpression-成员表达式"><a href="#MemberExpression-成员表达式" class="headerlink" title="MemberExpression 成员表达式"></a>MemberExpression 成员表达式</h4><p>通常是用于访问对象成员的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>

f<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 标签模版</span>

<span class="token keyword">new</span> <span class="token class-name">Cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不带参数的new运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用标识符的属性访问和用字符串的属性访问。new.target 是个新加入的语法，用于判断函数是否是被 new 调用，super 则是构造函数中，用于访问父类的属性的语法。</p>
<p><strong>f</strong><code>**a$&#123;b&#125;c**</code>带函数的模板，这个带函数名的模板表示把模板的各个部分算好后传递给一个函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">&#125;</span>
f<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// Arguments[Array(2), 2, ...] => &#123;0: ["a", "b"], 1: 2&#125;</span>
f<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">b</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">c</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// &#123;0: ["a", "b", "c"], 1: 2, 2: 2&#125;</span>
f<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">b</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>c<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">cc</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// &#123;0: ["a", "b", "", "cc"], 1: 2, 2: 2, 3: 3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>$&#123;b&#125;</code>会将其他分割成数组作为函数第一个参数，然后将<code>$&#123;&#125;</code>内的值作为之后的参数。</p>
<p><code>new Cls();</code>另一个是带参数列表的 new 运算，注意，不带参数列表的 new 运算优先级更低，不属于 Member Expression。</p>
<h4 id="NewExpression-NEW-表达式"><a href="#NewExpression-NEW-表达式" class="headerlink" title="NewExpression NEW 表达式"></a>NewExpression NEW 表达式</h4><p>Member Expression 加上 new 就是 New Expression（当然，不加 new 也可以构成 New Expression，JavaScript 中默认独立的高优先级表达式都可以构成低优先级表达式）。这里的 New Expression 特指没有参数列表的表达式。(<strong>有点没太看懂？？？</strong>)</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Cls</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">||</span>
\<span class="token operator">/</span>
<span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cls</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> or <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cls</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际上<code>new new Cls(1);</code>等价的是第一种：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Cls</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span>
      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"returned"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Cls</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// cls 1</span>
<span class="token comment">// returned undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以 1 被当做调用 Cls 时的参数传入了。</p>
<h4 id="CallExpression-函数调用表达式"><a href="#CallExpression-函数调用表达式" class="headerlink" title="CallExpression 函数调用表达式"></a>CallExpression 函数调用表达式</h4><p>基本形式是 Member Expression 后加一个括号里的参数列表，或者可以用上 super 关键字代替 Member Expression。</p>
<p>Member Expression 中的某一子结构具有函数调用，那么整个表达式就成为了一个 Call Expression。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一些变形</span>
a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">xyz</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="LeftHandSideExpression-左值表达式"><a href="#LeftHandSideExpression-左值表达式" class="headerlink" title="LeftHandSideExpression 左值表达式"></a>LeftHandSideExpression 左值表达式</h4><p>New Expression 和 Call Expression 统称 LeftHandSideExpression，左值表达式。左值表达式就是可以放到等号左边的表达式。</p>
<h4 id="AssignmentExpression-赋值表达式"><a href="#AssignmentExpression-赋值表达式" class="headerlink" title="AssignmentExpression 赋值表达式"></a>AssignmentExpression 赋值表达式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> b<span class="token punctuation">;</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> d<span class="token punctuation">;</span> <span class="token comment">// 从右往左赋值</span>
a <span class="token operator">+=</span> b<span class="token punctuation">;</span> <span class="token comment">// *=、/=、%=、+=、-=、&lt;&lt;=、>>=、>>>=、&amp;=、^=、|=、**=都可以这么使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="Expression-表达式"><a href="#Expression-表达式" class="headerlink" title="Expression 表达式"></a>Expression 表达式</h4><p>在 JavaScript 中，表达式就是用逗号运算符连接的赋值表达式，比赋值运算优先级更低的就是逗号运算符了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><ol>
<li>所有运算符的优先级<br>一元(delete,~,!等)&gt;算术&gt;关系&gt;位移&gt;二进制位运算&gt;逻辑&gt;条件&gt;赋值&gt;逗号。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators</a></li>
<li><code>react</code>源码内变量声明的意图？</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">validateFormat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#123;</span>
  <span class="token function-variable function">validateFormat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">format</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"invariant requires an error message argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」CSS-语法知识</title>
    <url>/2021/12/13/yuque/nmonw0/</url>
    <content><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1639641975124-bb1e4e2c-3a9d-4b9c-9a23-8c1278ab8d71.png#clientId=u85802699-b937-4&amp;from=ui&amp;id=u4219e71f&amp;originHeight=1652&amp;originWidth=2652&amp;originalType=binary∶=1&amp;size=372313&amp;status=done&amp;style=none&amp;taskId=u426682d6-ab10-4108-8821-6f2f43bf916" alt="选择器.png"></p>
<h3 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h3><ul>
<li>*</li>
<li>div svg|a (namespace)</li>
<li>.cls</li>
<li><code>#id</code></li>
<li>[attr=value]</li>
<li>:hover</li>
<li>::before</li>
</ul>
<h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul>
<li>&lt;简单选择器&gt; &lt;简单选择器&gt; &lt;简单选择器&gt;（同时满足）</li>
<li>*或者 div 必须写在前面</li>
</ul>
<h3 id="复杂选择器"><a href="#复杂选择器" class="headerlink" title="复杂选择器"></a>复杂选择器</h3><ul>
<li>&lt;复合选择器&gt;&lt;复合选择器&gt;（子孙选择器）</li>
<li>&lt;复合选择器&gt;”&gt;”&lt;复合选择器&gt;（子选择器）</li>
<li>&lt;复合选择器&gt;”~”&lt;复合选择器&gt;</li>
<li>&lt;复合选择器&gt;”+”&lt;复合选择器&gt;</li>
<li>&lt;复合选择器&gt;”||”&lt;复合选择器&gt;（level 4 的新增）（table 内选择一列的关系）</li>
</ul>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器。</p>
<p><a href="https://www.w3.org/TR/selectors/#specificity">https://www.w3.org/TR/selectors/#specificity</a></p>
<h3 id="简单选择器计数"><a href="#简单选择器计数" class="headerlink" title="简单选择器计数"></a>简单选择器计数</h3><p>只有简单选择器存在优先级计数，复合选择器和复杂选择器就是将所有计数相加。</p>
<p>优先级分为 4 级，四元组（内联样式，ID 选择器，类选择器/属性选择器/伪类，元素选择器）。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">1 2 #id div.a#id</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span> // [0<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul>
<li><code>div#a.b .c[id=x]</code>：[0, 1, 3, 1]（[id=x]的优先级要比#x 低）</li>
<li><code>#a:not(#b)</code>：[0, 1, 1, 0]❌，[0, 2, 0, 0]（:not 不占优先级）</li>
<li><code>*.a</code>：[0, 0, 1, 0]（通配符不改变优先级）</li>
<li><code>div.a</code>：[0, 0, 1, 1]</li>
</ul>
<h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><h3 id="链接-行为"><a href="#链接-行为" class="headerlink" title="链接/行为"></a>链接/行为</h3><ul>
<li>:any-link</li>
<li>:link :visited</li>
<li>:hover：只会被鼠标触发</li>
<li>:active</li>
<li>:focus</li>
<li>:target</li>
</ul>
<h3 id="树结构"><a href="#树结构" class="headerlink" title="树结构"></a>树结构</h3><ul>
<li>:empty</li>
<li>:nth-child()</li>
<li>:nth-last-child()</li>
<li>:first-child :last-child :only-child</li>
</ul>
<h3 id="逻辑型"><a href="#逻辑型" class="headerlink" title="逻辑型"></a>逻辑型</h3><ul>
<li>:not</li>
<li>:where :has</li>
</ul>
<h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><ul>
<li>::before (无中生有)</li>
<li>::after (无中生有)</li>
<li>::firstLetter</li>
<li>::firstLine</li>
</ul>
<h4 id="可用属性"><a href="#可用属性" class="headerlink" title="可用属性"></a>可用属性</h4><p><img src="/2021/12/13/yuque/nmonw0/httishere/Downloads/Xnip2021-11-22_17-35-54.jpg#id=g4EyP&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h3 id=""><a href="#" class="headerlink" title="??"></a>??</h3><blockquote>
<p>为什么 first-letter 可以设置 float 之类的，而 first-line 不行？</p>
</blockquote>
<p>float 是脱离流，所以与 first-line 定义矛盾，那么就会重新选择 first line，就会陷入无限循环。</p>
<p>所以 first line 不能设置 float。</p>
<p>实际上并非是计算出真正的第一行并为其设置属性，而是根据浏览器将其属性置于 first line 的文字上（因为实际渲染上从左向右进行文字渲染），所以 first line 仅有文字属性并没有盒属性。</p>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>编写 match 函数（toy-browser）。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」VD 1</title>
    <url>/2020/09/21/yuque/nsvtoo/</url>
    <content><![CDATA[<blockquote>
<p>VD 其实就是一个 JS 对象，包括 tag（标签名），props（属性），children（子元素对象）。</p>
</blockquote>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"wrapper"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的 VD 对应的就是下面这段 HTML：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当 html 内包括多个子元素时：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      Hello World!
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">hh</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token punctuation">&#123;</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"wrapper"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"ul"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    			<span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"list-item"</span>
  			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hh"</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们在写代码时都会写到一个 render 函数，里面写的是页面的 html 模版，然后实现 VD 与实际 DOM 的映射。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> _html <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      Hello World!
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">hh</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> _html<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过 JSX 编译之后生成：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> _html <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">"div"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"wrapper"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">"ul"</span><span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token function">createElement</span><span class="token punctuation">(</span>
        <span class="token string">"li"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">"list-item"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string">"hh"</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> _html<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里面的<code>createElement</code>其实就是构造 VD 的函数，返回的就是我们的 VD 对象：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 至少三个参数，children可能是数组所以需要对children进行jie gou</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    tag<span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">flatten</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」ES6新增特性</title>
    <url>/2020/10/12/yuque/nsgoo9/</url>
    <content><![CDATA[<ul>
<li><strong>表达式</strong>：声明、解构赋值</li>
<li><strong>内置对象</strong>：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect</li>
<li><strong>语句与运算</strong>：Class、Module、Iterator</li>
<li><strong>异步编程</strong>：Promise、Generator、Async</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/250093/1642472893895-f443c021-050e-4720-901d-6b93f1e4d31a.png#clientId=udcac0dec-24da-4&amp;from=ui&amp;id=ua9e470cb&amp;originHeight=4062&amp;originWidth=4724&amp;originalType=binary∶=1&amp;size=2435257&amp;status=done&amp;style=none&amp;taskId=udb437a8b-00e1-4861-8ce2-b2f7d81da9a" alt="ES2015.png"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「CSS」CSS那些事</title>
    <url>/2020/12/23/yuque/oe1ft6/</url>
    <content><![CDATA[<h3 id="各种选择器"><a href="#各种选择器" class="headerlink" title="各种选择器"></a>各种选择器</h3><blockquote>
<p>指定特定元素对其进行样式加工;</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>选择器</th>
<th>说明</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>基础选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tag</td>
<td>类型选择器</td>
<td>1</td>
</tr>
<tr>
<td>#id</td>
<td>id 选择器</td>
<td>1</td>
</tr>
<tr>
<td>.class</td>
<td>类选择器</td>
<td>1</td>
</tr>
<tr>
<td>*</td>
<td>通配选择器</td>
<td>2</td>
</tr>
<tr>
<td><strong>层级选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>elemA elemB</td>
<td>后代元素</td>
<td>1</td>
</tr>
<tr>
<td>elemA&gt;elemB</td>
<td>子代元素</td>
<td>2</td>
</tr>
<tr>
<td>elemA+elemB</td>
<td>相邻同胞</td>
<td>2</td>
</tr>
<tr>
<td>elemA~elemB</td>
<td>元素后面的同胞元素</td>
<td>3</td>
</tr>
<tr>
<td><strong>集合选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>elemA, elemB</td>
<td>并集</td>
<td>1</td>
</tr>
<tr>
<td>elemA.class/elemA#id</td>
<td>交集</td>
<td>1</td>
</tr>
<tr>
<td><strong>条件选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:lang</td>
<td>指定标记语言</td>
<td>2</td>
</tr>
<tr>
<td>:dir()</td>
<td>指定编写方向，文字书写方向为 ltr 或 rtl</td>
<td>4</td>
</tr>
<tr>
<td>:has</td>
<td>包含指定元素，如： <code>a:has(&gt; img)</code> （只会匹配直接包含 <code>&lt;img&gt;</code>  子元素的 <code>&lt;a&gt;</code>  元素）</td>
<td>4</td>
</tr>
<tr>
<td>:is</td>
<td>指定条件，如：<code>:is(section, article, aside, nav) h1</code></td>
<td>4</td>
</tr>
<tr>
<td>:not</td>
<td>非指定条件，如：<code>p:not(.fancy)</code>，类名不是 <code>.fancy</code> 的 <p> 元素</p></td>
<td>4</td>
</tr>
<tr>
<td>:where</td>
<td>指定条件，优先级总是为 0</td>
<td>4</td>
</tr>
<tr>
<td>:scope</td>
<td>css 伪类，作为选择器要匹配的参考点的元素</td>
<td>4</td>
</tr>
<tr>
<td>:any-link</td>
<td>选择器代表一个有链接锚点的元素，匹配每一个有 href 属性的 <a>、<area> 或 <link> 元素</a></td>
<td>4</td>
</tr>
<tr>
<td>:local-link</td>
<td>所有包含<code>href</code></td>
</tr>
<tr>
<td>且属于绝对地址的<code>链接元素</code></td>
<td>4</td>
</tr>
<tr>
<td><strong>结构选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:first-child</td>
<td>元素中为首的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>:last-child</td>
<td>元素中为尾的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:root</td>
<td>文档根元素</td>
<td>3</td>
</tr>
<tr>
<td>:empty</td>
<td>无子元素的元素</td>
<td>3</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>元素中指定顺序索引的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>元素中指定逆序索引的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:only-child</td>
<td>父元素仅有该元素的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>标签中指定顺序索引的<code>标签</code></td>
<td>3</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>标签中指定逆序索引的<code>标签</code></td>
<td>3</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>标签中为首的<code>标签</code></td>
<td>3</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>标签中为尾<code>标签</code></td>
<td>3</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>父元素仅有该标签的<code>标签</code></td>
<td>3</td>
</tr>
<tr>
<td>状态选择器</td>
<td></td>
<td></td>
</tr>
<tr>
<td>:active</td>
<td>鼠标激活的<code>元素</code></td>
<td>1</td>
</tr>
<tr>
<td>:hover</td>
<td>鼠标悬浮的<code>元素</code></td>
<td>1</td>
</tr>
<tr>
<td>:link</td>
<td>未访问的链接元素</td>
<td>1</td>
</tr>
<tr>
<td>:visited</td>
<td>已访问的链接元素</td>
<td>1</td>
</tr>
<tr>
<td>:target</td>
<td>当前锚点的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:focus</td>
<td>输入聚焦的<code>表单元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:required</td>
<td>输入必填的<code>表单元素</code></td>
<td>3</td>
</tr>
<tr>
<td>:valid</td>
<td>输入合法</td>
<td>3</td>
</tr>
<tr>
<td>:invalid</td>
<td>输入不合法</td>
<td>3</td>
</tr>
<tr>
<td>:in-range</td>
<td>输入范围内</td>
<td>3</td>
</tr>
<tr>
<td>:out-of-range</td>
<td>输入范围外</td>
<td>3</td>
</tr>
<tr>
<td>:checked</td>
<td>选项选中</td>
<td>3</td>
</tr>
<tr>
<td>:optional</td>
<td>选项可选</td>
<td>3</td>
</tr>
<tr>
<td>:enabled</td>
<td>事件启用</td>
<td>3</td>
</tr>
<tr>
<td>:disabled</td>
<td>事件禁用</td>
<td>3</td>
</tr>
<tr>
<td>:read-only</td>
<td>只读</td>
<td>3</td>
</tr>
<tr>
<td>:read-write</td>
<td>可读可写</td>
<td>3</td>
</tr>
<tr>
<td>:target-within</td>
<td>内部锚点元素处于激活状态的<code>元素</code></td>
<td>4</td>
</tr>
<tr>
<td>:focus-within</td>
<td>内部表单元素处于聚焦状态的<code>元素</code></td>
<td>4</td>
</tr>
<tr>
<td>:focus-visible</td>
<td>输入聚焦的<code>表单元素</code></td>
<td>4</td>
</tr>
<tr>
<td>:blank</td>
<td>输入为空</td>
<td>4</td>
</tr>
<tr>
<td>:user-invalid</td>
<td>输入合法</td>
<td>4</td>
</tr>
<tr>
<td>:indeterminate</td>
<td>选项未定</td>
<td>4</td>
</tr>
<tr>
<td>:placeholder-shown</td>
<td>占位显示</td>
<td>4</td>
</tr>
<tr>
<td>:current()</td>
<td>浏览中</td>
<td>4</td>
</tr>
<tr>
<td>:past()</td>
<td>已浏览</td>
<td>4</td>
</tr>
<tr>
<td>:future()</td>
<td>未浏览</td>
<td>4</td>
</tr>
<tr>
<td>:playing</td>
<td>开始播放</td>
<td>4</td>
</tr>
<tr>
<td>:paused</td>
<td>暂定播放</td>
<td>4</td>
</tr>
<tr>
<td><strong>属性选择器</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[attr]</td>
<td>指定属性的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>[attr=val]</td>
<td>属性等于指定值的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>[attr*=val]</td>
<td>属性包含指定值的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>[attr^=val]</td>
<td>属性以指定值开头的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>[attr$=val]</td>
<td>属性以指定值结尾的<code>元素</code></td>
<td>2</td>
</tr>
<tr>
<td>[attr~=val]</td>
<td>属性包含指定值(完整单词)的<code>元素</code></td>
</tr>
<tr>
<td>(不推荐)</td>
<td>2</td>
</tr>
<tr>
<td>[att</td>
<td>r=val]</td>
<td>属性以指定值(完整单词)开头的<code>元素</code></td>
</tr>
<tr>
<td>(不推荐)</td>
<td>2</td>
</tr>
<tr>
<td><strong>伪元素</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>::first-letter</td>
<td>元素的首字母，可实现首字母下沉等</td>
<td>1</td>
</tr>
<tr>
<td>::first-line</td>
<td>元素的<code>首行</code></td>
<td>1</td>
</tr>
<tr>
<td>::before</td>
<td>在元素前插入的<code>内容</code></td>
<td>2</td>
</tr>
<tr>
<td>::after</td>
<td>在元素后插入的<code>内容</code></td>
<td>2</td>
</tr>
<tr>
<td>::selection</td>
<td>鼠标选中的<code>元素</code></td>
<td>3</td>
</tr>
<tr>
<td>::backdrop</td>
<td>全屏模式的<code>元素</code></td>
<td>4</td>
</tr>
<tr>
<td>::placeholder</td>
<td>表单元素的<code>占位</code></td>
<td>4</td>
</tr>
</tbody>
</table>
</div>
<p><strong>有时候可以通过选择器在 css 层面就可以解决一下逻辑样式问题。</strong></p>
<h3 id="自定义属性—"><a href="#自定义属性—" class="headerlink" title="自定义属性—"></a>自定义属性—</h3><blockquote>
<p>带有前缀—的属性名，比如—example—name，表示的是带有值的自定义属性，其可以通过 var 函数在全文档范围内复用的。</p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--first-color</span><span class="token punctuation">:</span> #488cff<span class="token punctuation">;</span>
  <span class="token property">--second-color</span><span class="token punctuation">:</span> #ffff8c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">#firstParagraph</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--first-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--second-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="实践："><a href="#实践：" class="headerlink" title="实践："></a>实践：</h4><p>在需要多个同级子元素且不同样式时可以对其进行设置，可以减少冗余代码。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>strip-loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--line-index</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">li &#123; --time: calc((var(--line-index) - 1) * 200ms); border-radius: 3px; width:
6px; height: 30px; background-color: #f66; animation: beat 1.5s ease-in-out
var(--time) infinite; &amp; + li &#123; margin-left: 5px; &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>参考：<a href="https://juejin.cn/post/6908879198933221383#heading-12">8 个硬核技巧带你迅速提升 CSS 技术 ｜ 掘金直播总结</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS（层叠样式表）</a></p>
]]></content>
      <categories>
        <category>CSS/Less</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」泛型，合并和其他拓展</title>
    <url>/2021/08/23/yuque/pu3zmq/</url>
    <content><![CDATA[<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote>
<p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createArray</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面是用数组泛型来定义返回值的类型，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：</p>
<p><code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>T</code> 用来指代任意输入的类型。</p>
<p>如果在调用时不手动指定具体类型的话，也可以根据类型推论自动推断出来。</p>
<h4 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">swap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"seven"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['seven', 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code> 属性的变量。这就是泛型约束：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">&#123;</span>
  length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果传入的参数不包含 length 属性，那么在编译阶段就会报错。</p>
<p>多个类型参数之间也可以互相约束：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">copyFields</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    target<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>source<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">copyFields</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> b<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>使用接口的方式来定义一个函数需要符合的形状：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> createArray<span class="token operator">:</span> CreateArrayFunc<span class="token punctuation">;</span>
<span class="token function-variable function">createArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> createArray<span class="token operator">:</span> CreateArrayFunc<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token function-variable function">createArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
  zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h4><p>可以为泛型中的类型参数指定默认类型，当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型。</p>
<h4 id="函数合并"><a href="#函数合并" class="headerlink" title="函数合并"></a>函数合并</h4><p>使用重载定义多个函数类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="接口合并"><a href="#接口合并" class="headerlink" title="接口合并"></a>接口合并</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  price<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 属性名相同，但是类型不一致，会报错</span>
  weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>合并的属性的类型必须是唯一的</strong>。</p>
<p>接口中方法的合并，与函数的合并一样：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">&#123;</span>
  weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类的合并"><a href="#类的合并" class="headerlink" title="类的合并"></a>类的合并</h4><p>同接口合并规则。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul>
<li><a href="http://www.typescriptlang.org/docs/handbook/basic-types.html#never">Never</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic">中文版</a> Types.html#never)）：永远不存在值的类型，一般用于错误处理函数</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/variable-declarations.html">Variable Declarations</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable">中文版</a> Declarations.html)）：使用 <code>let</code> 和 <code>const</code> 替代 <code>var</code>，这是 <a href="http://es6.ruanyifeng.com/#docs/let">ES6 的知识</a><code>[this](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this)</code>：箭头函数的运用，这是 <a href="http://es6.ruanyifeng.com/#docs/function">ES6 的知识</a><a href="http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics">Using Class Types in Generics</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B">中文版</a>）：创建工厂函数时，需要引用构造函数的类类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type">Best common type</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type">中文版</a> Inference.html#最佳通用类型)）：数组的类型推论</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type">Contextual Type</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type">中文版</a> Inference.html#上下文类型)）：函数输入的类型推论</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-compatibility.html">Type Compatibility</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type">中文版</a> Compatibility.html)）：允许不严格符合类型，只需要在一定规则下兼容即可</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types">Advanced Types</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced">中文版</a> Types.html#交叉类型（intersection-types）)）：使用 <code>&amp;</code> 将多种类型的共有部分叠加成一种类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types">Type Guards and Differentiating Types</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced">中文版</a> Types.html#类型保护与区分类型（type-guards-and-differentiating-types）)）：联合类型在一些情况下被识别为特定的类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions">Discriminated Unions</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced">中文版</a> Types.html#可辨识联合（discriminated-unions）)）：使用 <code>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types">Polymorphic </a><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types">this</a><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types"> types</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced">中文版</a> Types.html#多态的 this 类型)）：父类的某个方法返回 <code>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/symbols.html">Symbols</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html">中文版</a>）：新原生类型，这是 <a href="http://es6.ruanyifeng.com/#docs/symbol">ES6 的知识</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html">Iterators and Generators</a>（<a href="[https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators">中文版</a> and Generators.html)）：迭代器，这是 <a href="http://es6.ruanyifeng.com/#docs/iterator">ES6 的知识</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/namespaces.html">Namespaces</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html">中文版</a>）：避免全局污染，现在已被 <a href="http://es6.ruanyifeng.com/#docs/module">ES6 Module</a> 替代</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/decorators.html">Decorators</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html">中文版</a>）：修饰器，这是 <a href="http://es6.ruanyifeng.com/#docs/decorator">ES7 的一个提案</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/mixins.html">Mixins</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html">中文版</a>）：一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href="http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0">ES6 中 Mixin 模式的实现</a></li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」CSS-动画</title>
    <url>/2021/12/17/yuque/qvtbgk/</url>
    <content><![CDATA[<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><ul>
<li><a href="/keyframes">@keyframes </a> （关键帧）定义</li>
<li>animation 使用</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li>animation-name: none（时间曲线）；</li>
<li>animation-duration: 0s（动画时长）；</li>
<li>animation-timing-function: ease（动画的时间曲线，<code>[cubic-bezier](https://cubic-bezier.com/#.17,.67,.83,.67)</code>）；</li>
<li>animation-delay: 0s（动画开始前的延迟）；</li>
<li>animation-iteration-count: 1（动画的播放次数）；</li>
<li>animation-direction: normal（动画的方向）；</li>
<li>animation-fill-mode: none；</li>
<li>animation-play-state: running；</li>
</ul>
<h4 id="cubic-bezier-https-cubic-bezier-com-34-74-86-59"><a href="#cubic-bezier-https-cubic-bezier-com-34-74-86-59" class="headerlink" title="[cubic-bezier](https://cubic-bezier.com/#.34,.74,.86,.59)"></a><code>[cubic-bezier](https://cubic-bezier.com/#.34,.74,.86,.59)</code></h4><ul>
<li>ease（推荐）</li>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out</li>
</ul>
<h2 id="渲染与颜色"><a href="#渲染与颜色" class="headerlink" title="渲染与颜色"></a>渲染与颜色</h2><ul>
<li>hsl</li>
<li>rgb</li>
</ul>
<h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><ul>
<li>border</li>
<li>box-shadow</li>
<li>border-radius</li>
<li>data uri + svg</li>
</ul>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」类型别名，字面量，元组，枚举</title>
    <url>/2021/08/20/yuque/qzn99t/</url>
    <content><![CDATA[<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><blockquote>
<p>给一个类型起个新名字，类型别名常用于联合类型。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">NameResolver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">NameOrResolver</span> <span class="token operator">=</span> Name <span class="token operator">|</span> NameResolver<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>n<span class="token operator">:</span> NameOrResolver<span class="token punctuation">)</span><span class="token operator">:</span> Name <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h3><blockquote>
<p>用来约束取值只能是某几个字符串中的一个。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">EventNames</span> <span class="token operator">=</span> <span class="token string">"click"</span> <span class="token operator">|</span> <span class="token string">"scroll"</span> <span class="token operator">|</span> <span class="token string">"mousemove"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>ele<span class="token operator">:</span> Element<span class="token punctuation">,</span> event<span class="token operator">:</span> EventNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">&#125;</span>

<span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"scroll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// success</span>
<span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dblclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error，event 不能为 'dblclick'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：<strong>类型别名与字符串字面量类型都是使用 </strong><code>**type**</code><strong> 进行定义。</strong></p>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当直接对元组类型的变量进行初始化或者赋值时：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Tom"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// error，需要提供所有元组类型中指定的项。</span>

tom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error，当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><blockquote>
<p>用于取值被限定在一定范围内的场景。</p>
</blockquote>
<h4 id="默认赋值"><a href="#默认赋值" class="headerlink" title="默认赋值"></a>默认赋值</h4><p>默认从 0 开始赋值：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">&#123;</span>
  Sun<span class="token punctuation">,</span>
  Mon<span class="token punctuation">,</span>
  Tue<span class="token punctuation">,</span>
  Wed<span class="token punctuation">,</span>
  Thu<span class="token punctuation">,</span>
  Fri<span class="token punctuation">,</span>
  Sat<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h4><p>未手动赋值的枚举项会接着上一个枚举项递增：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">&#123;</span>
  Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
  Mon <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Tue<span class="token punctuation">,</span>
  Wed<span class="token punctuation">,</span>
  Thu<span class="token punctuation">,</span>
  Fri<span class="token punctuation">,</span>
  Sat<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 手动赋值的枚举项也可以为小数或负数，依旧以1递增</span>
<span class="token keyword">enum</span> Days <span class="token punctuation">&#123;</span>
  Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
  Mon <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span>
  Tue<span class="token punctuation">,</span>
  Wed<span class="token punctuation">,</span>
  Thu<span class="token punctuation">,</span>
  Fri<span class="token punctuation">,</span>
  Sat<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果未手动赋值的枚举项与手动赋值的重复，则后赋值的会覆盖前赋值：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">&#123;</span>
  Sun <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
  Mon <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Tue<span class="token punctuation">,</span>
  Wed<span class="token punctuation">,</span>
  Thu<span class="token punctuation">,</span>
  Fri<span class="token punctuation">,</span>
  Sat<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
Days<span class="token punctuation">[</span><span class="token string">"Wed"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
Days<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Wed</span>
Days<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Sun"</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以需要注意<strong>不要出现赋值覆盖</strong>的情况。</p>
<h4 id="常数项和计算所得项"><a href="#常数项和计算所得项" class="headerlink" title="常数项和计算所得项"></a>常数项和计算所得项</h4><blockquote>
<p>枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。</p>
</blockquote>
<p>以上两种情况就是常数项。</p>
<p>计算所得项：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>
  Red<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是<strong>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span>
  Red <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>
  Green<span class="token punctuation">,</span>
  Blue<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// index.ts(1,33): error TS1061: Enum member must have initializer.</span>
<span class="token comment">// index.ts(1,40): error TS1061: Enum member must have initializer.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>当满足以下条件时，枚举成员被当作是常数：</p>
<ul>
<li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 <code>1</code>。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 <code>0</code>。</li>
<li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：<ul>
<li>数字字面量</li>
<li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li>
<li>带括号的常数枚举表达式</li>
<li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li>
<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li>
</ul>
</li>
</ul>
<p>所有其它情况的枚举成员被当作是需要计算得出的值。</p>
</blockquote>
<h4 id="常数枚举-const-enum"><a href="#常数枚举-const-enum" class="headerlink" title="常数枚举 const enum"></a>常数枚举 <code>const enum</code></h4><p>它会在编译阶段被删除，并且不能包含计算成员。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">&#123;</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="外部枚举-declare-enum"><a href="#外部枚举-declare-enum" class="headerlink" title="外部枚举 declare enum"></a>外部枚举 <code>declare enum</code></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">&#123;</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」基本数据类型</title>
    <url>/2021/08/16/yuque/rhx3w1/</url>
    <content><![CDATA[<p>类型检查，语言扩展，工具属性。</p>
<h4 id="类型基础："><a href="#类型基础：" class="headerlink" title="类型基础："></a>类型基础：</h4><ul>
<li>强类型和弱类型<ul>
<li>强类型：不允许改变变量的数据类型，除非强制类型转换；</li>
<li>弱类型：变量可以被赋予为不同的变量类型；</li>
</ul>
</li>
<li>动态类型语言和静态类型语言<ul>
<li>静态类型语言：在<strong>编译阶段</strong>确定所有变量的类型（对类型要求严格，可以立即发现错误，运行时性能好，自文档化）；</li>
<li>动态类型语言：在<strong>执行阶段</strong>确定所有变量的类型（对类型要求宽松，不能及时察觉 bug，运行时性能差，可读性差）；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1629201781685-ea175f59-f835-492b-b38d-86db3b3bae78.jpeg#height=560&amp;id=UL50m&amp;originHeight=560&amp;originWidth=1030&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1030" alt=""></p>
<p>项目构建问题：</p>
<ul>
<li><code>Cannot find module &#39;webpack-cli/bin/config-yargs&#39;</code>：安装 webpack-cli 3.* 版本；</li>
<li><code>loaderContext.getOptions is not a function</code>：loader 版本过高；</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="ES6-数据类型"><a href="#ES6-数据类型" class="headerlink" title="ES6 数据类型"></a>ES6 数据类型</h4><ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Array</li>
<li>Function</li>
<li>Object</li>
<li>Symbol</li>
<li>undefined</li>
<li>null</li>
</ul>
<h4 id="TS-数据类型"><a href="#TS-数据类型" class="headerlink" title="TS 数据类型"></a>TS 数据类型</h4><ul>
<li>以上基本类型</li>
<li>void</li>
<li>any</li>
<li>never</li>
<li>元祖（不允许越界访问）</li>
<li>枚举（一组有名字的常量集合）</li>
<li>高级类型</li>
</ul>
<h5 id="类型注解（类型约束）"><a href="#类型注解（类型约束）" class="headerlink" title="类型注解（类型约束）"></a>类型注解（类型约束）</h5><blockquote>
<p>相当于强类型语言中的类型声明，<code>(变量/函数):type</code>。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/*
 * @Author: your name
 * @Date: 2021-08-16 20:50:56
 * @LastEditTime: 2021-08-16 21:22:30
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: /Note/src/datatype.ts
 */</span>
<span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token builtin">string</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 联合类型</span>
<span class="token keyword">let</span> arr3<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 元祖</span>
<span class="token keyword">let</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">compute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token function-variable function">compute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>

<span class="token keyword">let</span> obj<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// obj.x = 5; // error</span>
<span class="token keyword">let</span> obj1<span class="token operator">:</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> s1<span class="token operator">:</span> <span class="token builtin">symbol</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1 <span class="token operator">===</span> s2<span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">let</span> un<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> nu<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// un = 1 // error</span>

<span class="token comment">// void</span>
<span class="token keyword">let</span> <span class="token function-variable function">noReturn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// any</span>
<span class="token keyword">let</span> x<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// never: 永远不会有返回值</span>
<span class="token keyword">let</span> <span class="token function-variable function">error</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 枚举</span>
<span class="token keyword">enum</span> Role <span class="token punctuation">&#123;</span>
  Reporter<span class="token punctuation">,</span>
  Developer<span class="token punctuation">,</span>
  Manager<span class="token punctuation">,</span>
  Guest<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
Role<span class="token punctuation">.</span>Reporter<span class="token punctuation">;</span> <span class="token comment">// 默认从0开始</span>

<span class="token keyword">enum</span> Role2 <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
  d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
  e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">enum</span> Char <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">enum</span> Many <span class="token punctuation">&#123;</span>
  a<span class="token punctuation">,</span>
  b <span class="token operator">=</span> Char<span class="token punctuation">.</span>b<span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
  d <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  e <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> aa<span class="token operator">:</span> Role <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bb<span class="token operator">:</span> Role2 <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
<span class="token comment">// aa === bb // false, 不同的枚举类型无法比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：</p>
<ul>
<li><code>undefined</code> 和 <code>null</code> 是所有类型的子类型，即 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量；</li>
<li><strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值</strong>；</li>
<li>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型，<strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 </strong><code>**any**</code><strong> 类型</strong>；</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber <span class="token operator">=</span> <span class="token string">"seven"</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// error</span>

<span class="token keyword">let</span> myFavoriteNumber<span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token string">"seven"</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在使用联合类型时，<strong>只能访问此联合类型的所有类型里共有的属性或方法</strong>，联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型；</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」断言，声明文件，内置对象</title>
    <url>/2021/08/17/yuque/rkgfw0/</url>
    <content><![CDATA[<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><blockquote>
<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>
</blockquote>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span>值 <span class="token keyword">as</span> 类型<span class="token punctuation">)</span> <span class="token operator">&lt;</span> 类型 <span class="token operator">></span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注：在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 <code>值 as 类型</code>，否则会产生歧义，因为如 <code>&lt;Foo&gt;</code> 的语法在 tsx 中表示的是一个 <code>ReactNode</code>。</p>
<h4 id="作用（不能滥用）"><a href="#作用（不能滥用）" class="headerlink" title="作用（不能滥用）"></a>作用（不能滥用）</h4><ul>
<li>在使用联合类型进行属性访问时：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将父类断言为具体的子类</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>
  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>
  statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将任何一个类型断言为 any</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">window<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// Property 'foo' does not exist on type 'Window &amp; typeof globalThis'.</span>

<span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 在 any 类型的变量上，访问任何属性都是允许的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>将 any 断言为某一具体类型</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Cat</code> 包含了 <code>Animal</code> 中的所有属性，除此之外，它还有一个额外的方法 <code>run</code>。TypeScript 只会看它们最终的结构有什么关系——所以它与 <code>Cat extends Animal</code> 是等价的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当 <code>Animal</code> 兼容 <code>Cat</code> 时，它们就可以互相进行类型断言了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">testAnimal</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> animal <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">testCat</span><span class="token punctuation">(</span>cat<span class="token operator">:</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> cat <span class="token keyword">as</span> Animal<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="双重断言"><a href="#双重断言" class="headerlink" title="双重断言"></a>双重断言</h4><ul>
<li>任何类型都可以被断言为 any</li>
<li>any 可以被断言为任何类型</li>
</ul>
<p>那么是否可以使用双重断言 <code>as any as Foo</code> 来将任何一个类型断言为任何另一个类型呢？</p>
<p>在语法上时可以的，但是很可能会导致运行时的错误，所以<strong>不到万不得已，不要使用双重断言</strong>。</p>
<h4 id="类型断言-vs-类型转换"><a href="#类型断言-vs-类型转换" class="headerlink" title="类型断言 vs 类型转换"></a>类型断言 vs 类型转换</h4><blockquote>
<p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除。</p>
</blockquote>
<p>编译之后并不会有很大的类型约束，所以类型断言不是类型转换，它不会真的影响到变量的类型，所以若要进行类型转换，需要直接调用类型转换的方法。</p>
<h4 id="类型断言-vs-类型声明"><a href="#类型断言-vs-类型声明" class="headerlink" title="类型断言 vs 类型声明"></a>类型断言 vs 类型声明</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>

<span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>产生的结果也几乎是一样的——<code>tom</code> 在接下来的代码中都变成了 <code>Cat</code> 类型。</p>
<p>但是：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom <span class="token operator">=</span> animal <span class="token keyword">as</span> Cat<span class="token punctuation">;</span> <span class="token comment">// 由于 Animal 兼容 Cat，故可以将 animal 断言为 Cat 赋值给 tom</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> animal<span class="token punctuation">;</span> <span class="token comment">// error，不能将父类的实例赋值给类型为子类的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>核心区别</p>
<ul>
<li><code>animal</code> 断言为 <code>Cat</code>，只需要满足 <code>Animal</code> 兼容 <code>Cat</code> 或 <code>Cat</code> 兼容 <code>Animal</code> 即可</li>
<li><code>animal</code> 赋值给 <code>tom</code>，需要满足 <code>Cat</code> 兼容 <code>Animal</code> 才行</li>
</ul>
<h4 id="类型断言-vs-泛型"><a href="#类型断言-vs-泛型" class="headerlink" title="类型断言 vs 泛型"></a>类型断言 vs 泛型</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getCacheData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getCacheData</span><span class="token generic class-name"><span class="token operator">&lt;</span>Cat<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过给 <code>getCacheData</code> 函数添加了一个泛型 <code>&lt;T&gt;</code>，我们可以更加规范的实现对 <code>getCacheData</code> 返回值的约束，这也同时去除掉了代码中的 <code>any</code>，是最优的一个解决方案。</p>
<h2 id="这一块好难，后面回来继续"><a href="#这一块好难，后面回来继续" class="headerlink" title="#这一块好难，后面回来继续"></a>#这一块好难，后面回来继续</h2><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><h4 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h4><p>在使用第三库的时候，往往是不知道第三方的方法或者变量的类型的，所以此时需要使用 <code>declare var</code> 来定义它的类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">"#foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>声明语句中只能定义类型，切勿在声明语句中定义具体的实现。</strong></p>
<h4 id="声明文件-1"><a href="#声明文件-1" class="headerlink" title="声明文件"></a>声明文件</h4><p>通常我们会把声明语句放到一个单独的文件，如<code>jQuery.d.ts</code>。</p>
<p><strong>声明文件必需以 </strong><code>**.d.ts**</code><strong> 为后缀。</strong></p>
<p>ts 会解析项目中所有的 <code>*.ts</code> 文件，当然也包含以 <code>.d.ts</code> 结尾的文件。所以当我们将 <code>jQuery.d.ts</code> 放到项目中时，其他所有 <code>*.ts</code> 文件就都可以获得 <code>jQuery</code> 的类型定义了。</p>
<h4 id="书写声明文件"><a href="#书写声明文件" class="headerlink" title="书写声明文件"></a>书写声明文件</h4><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><blockquote>
<p>通过 <code>&lt;script&gt;</code> 标签引入第三方库，注入全局变量</p>
</blockquote>
<p>主要是使用：</p>
<ul>
<li><code>declare var</code>：声明全局变量<br>与 <code>declare let</code> 类似，但是若是使用 <code>declare const</code>则次时代饿全局变量是一个常量，不允许被修改；</li>
<li><code>declare function</code>：声明全局方法</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>也可以支持函数重载：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token function-variable function">domReadyCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>declare class</code>：声明全局类</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>declare class</code> 语句也只能用来定义类型，不能用来定义具体的实现。</li>
<li><code>declare enum</code>：声明全局枚举类型</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">&#123;</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>declare enum</code> 仅用来定义类型，而不是具体的值。</li>
<li><code>declare namespace</code>：声明（含有子属性的）全局对象<br>随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 <code>namespace</code>，而推荐使用 ES6 的模块化方案了，但是在声明文件中，<code>declare namespace</code> 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在 <code>declare namespace</code> 内部，我们直接使用 <code>function ajax</code> 来声明函数，而不是使用 <code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code> 等语句。<br>如果对象拥有深层的层级，则需要用嵌套的 <code>namespace</code> 来声明深层的属性的类型：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">namespace</span> fn <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>interface 和 type</code>：声明全局类型<br>可以直接使用 <code>interface</code> 或 <code>type</code> 来声明一个全局的接口或类型：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">AjaxSettings</span> <span class="token punctuation">&#123;</span>
  method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"GET"</span> <span class="token operator">|</span> <span class="token string">"POST"</span><span class="token punctuation">;</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>暴露在最外层的 <code>interface</code> 或 <code>type</code> 会作为全局类型作用于整个项目中，故最好将他们放到 <code>namespace</code> 下：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">&#123;</span>
  <span class="token keyword">interface</span> <span class="token class-name">AjaxSettings</span> <span class="token punctuation">&#123;</span>
    method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"GET"</span> <span class="token operator">|</span> <span class="token string">"POST"</span><span class="token punctuation">;</span>
    data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> AjaxSettings<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h5><blockquote>
<p>一般我们通过 <code>import foo from &#39;foo&#39;</code> 导入一个 npm 包，这是符合 ES6 模块规范的。</p>
</blockquote>
<p>尝试给一个 npm 包创建声明文件之前，需要先看看它的声明文件是否已经存在：</p>
<ol>
<li>与该 npm 包绑定在一起。判断依据是 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 npm 包的时候，最好也将声明文件与 npm 包绑定在一起。</li>
<li>发布到 <code>@types</code> 里。我们只需要尝试安装一下对应的 <code>@types</code> 包就知道是否存在该声明文件，安装命令是 <code>npm install @types/foo --save-dev</code>。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 <code>@types</code> 里了。</li>
</ol>
<p>以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了：</p>
<ol>
<li>创建一个 <code>node_modules/@types/foo/index.d.ts</code> 文件，存放 <code>foo</code> 模块的声明文件。这种方式不需要额外的配置，但是 <code>node_modules</code> 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。</li>
<li>创建一个 <code>types</code> 目录，专门用来管理自己写的声明文件，将 <code>foo</code> 的声明文件放到 <code>types/foo/index.d.ts</code> 中。这种方式需要配置下 <code>tsconfig.json</code> 中的 <code>paths</code> 和 <code>baseUrl</code> 字段。</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>
    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>
    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"types/*"</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>npm 包的声明文件主要有以下几种语法：</p>
<ul>
<li><code>export</code> 导出变量<br>在 npm 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。需要在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// types/foo/index.d.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token comment">// 或者</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> getName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> getName <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>export namespace</code> 导出（含有子属性的）对象</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">namespace</span> bar <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>export default</code> ES6 默认导出<br>在 ES6 模块系统中，使用 <code>export default</code> 可以导出一个默认值，使用方可以用 <code>import foo from &#39;foo&#39;</code> ：</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><strong>注：只有 </strong><code>**function**</code><strong>、</strong><code>**class**</code><strong> 和 </strong><code>**interface**</code><strong> 可以直接默认导出，其他的变量需要先定义出来，再默认导出。</strong></li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> Directions<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">&#123;</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>export =</code> commonjs 导出模块</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 整体导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> foo<span class="token punctuation">;</span>
<span class="token comment">// 单个导出</span>
exports<span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 方式1</span>
<span class="token comment">// 整体导入</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bar<span class="token punctuation">;</span>

<span class="token comment">// 方式2</span>
<span class="token comment">// 整体导入</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>

<span class="token comment">// 方式3，ts官方推荐</span>
<span class="token comment">// 整体导入</span>
<span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">import</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="UMD-库"><a href="#UMD-库" class="headerlink" title="UMD 库"></a>UMD 库</h5><p>既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入的库，称为 UMD 库。</p>
<p>相比于 npm 包的类型声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 <code>export as namespace</code>。</p>
<p><code>export as namespace</code></p>
<p>一般使用 <code>export as namespace</code> 时，都是先有了 npm 包的声明文件，再基于它添加一条 <code>export as namespace</code> 语句，即可将声明好的一个变量声明为全局变量：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> foo<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><blockquote>
<p>内置对象是指根据标准在全局作用域（Global）上存在的对象。<br><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a></p>
</blockquote>
<h4 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h4><p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> b<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> e<span class="token operator">:</span> Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d<span class="token operator">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r<span class="token operator">:</span> RegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h4><p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> body<span class="token operator">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
<span class="token keyword">let</span> allDiv<span class="token operator">:</span> NodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Do something</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="TypeScript-核心库的定义文件"><a href="#TypeScript-核心库的定义文件" class="headerlink" title="TypeScript 核心库的定义文件"></a><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a></h4><p>定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p>
<p>当在使用一些常用的方法的时候，TypeScript 实际上已经做了很多类型判断的工作了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>targetCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>
<span class="token comment">//  e 被推断成了 MouseEvent，而 MouseEvent 是没有 targetCurrent 属性的，所以报错了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注：TypeScript 核心库的定义中不包含 Node.js 部分。</strong></p>
<h4 id="用-TypeScript-写-Node-js"><a href="#用-TypeScript-写-Node-js" class="headerlink" title="用 TypeScript 写 Node.js"></a>用 TypeScript 写 Node.js</h4><p>Node.js 不是内置对象的一部分，如果需要用 TypeScript 写 Node.js，则需要引入第三方声明文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @types/node --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「React Practice」Base</title>
    <url>/2021/07/07/yuque/ronixb/</url>
    <content><![CDATA[<blockquote>
<p>「React Practice」系列教程是学习王沛老师的【React 实战进阶】课程的学习记录，demo 参考来自<a href="https://codesandbox.io/s/6n20nrzlxz">https://codesandbox.io/s/6n20nrzlxz</a>。<br><strong>非原创，仅作为学习记录。</strong></p>
</blockquote>
<h3 id="React-组件（props-state-gt-view）"><a href="#React-组件（props-state-gt-view）" class="headerlink" title="React 组件（props + state =&gt; view）"></a>React 组件（props + state =&gt; view）</h3><ul>
<li>React 组件一般不提供方法，而是某种状态机；</li>
<li>React 组件可以理解为一个纯函数；</li>
<li>单向数据绑定；</li>
</ul>
<h4 id="组件类型"><a href="#组件类型" class="headerlink" title="组件类型"></a>组件类型</h4><ul>
<li>受控组件：表单元素状态由使用者维护；</li>
<li>非受控组件：表单元素状态 DOM 自身维护；</li>
</ul>
<h4 id="创建组件，单一职责原则"><a href="#创建组件，单一职责原则" class="headerlink" title="创建组件，单一职责原则"></a>创建组件，单一职责原则</h4><ul>
<li>每个组件只做一件事；</li>
<li>如果组件变得复杂，就需要拆分成小组件（拆分复杂度，优化性能，无需重新渲染整个大组件）；</li>
</ul>
<h4 id="数据状态管理，DRY-原则"><a href="#数据状态管理，DRY-原则" class="headerlink" title="数据状态管理，DRY 原则"></a>数据状态管理，DRY 原则</h4><ul>
<li>能计算得到的状态不要单独储存；</li>
<li>组件尽量无状态，所需数据通过 props 获取；</li>
</ul>
<h3 id="JSX，不是模版语言，而是语法糖"><a href="#JSX，不是模版语言，而是语法糖" class="headerlink" title="JSX，不是模版语言，而是语法糖"></a>JSX，不是模版语言，而是语法糖</h3><p>在 JavaScript 代码内直接写 HTML 标记。<br>本质是<strong>动态创建组件的语法糖</strong>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'htt'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 更直观</span>

<span class="token operator">||</span>
<span class="token operator">||</span>
\<span class="token operator">/</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'htt'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Hello, '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="在-JSX-内使用表达式"><a href="#在-JSX-内使用表达式" class="headerlink" title="在 JSX 内使用表达式"></a>在 JSX 内使用表达式</h4><ul>
<li>JSX 本身也是表达式</li>
<li>在属性中使用表达式</li>
<li>延展属性</li>
<li>表达式作为子元素</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>声明式创建界面的直观</li>
<li>代码动态创建界面的灵活</li>
<li>无需学习新的模版语言</li>
</ul>
<h4 id="规范：自定义组件以大写字母开头"><a href="#规范：自定义组件以大写字母开头" class="headerlink" title="规范：自定义组件以大写字母开头"></a>规范：自定义组件以大写字母开头</h4><ul>
<li>React 认为小写的 tag 是原生 DOM 节点</li>
<li>JSX 标记可以直接使用属性语法，例如 <code>&lt;menu.item /&gt;</code></li>
</ul>
<h3 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1625625250571-e908437a-78eb-4c2e-a756-c9a040c0cb03.png#align=left&amp;display=inline&amp;height=630&amp;originHeight=1260&amp;originWidth=2254&amp;size=229873&amp;status=done&amp;style=none&amp;width=1127" alt="image.png"><br>图片来源：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a><br><code>commit</code>：React 把当前的状态映射到 DOM，实际的更新 DOM 节点。</p>
<h4 id="挂载时："><a href="#挂载时：" class="headerlink" title="挂载时："></a>挂载时：</h4><ul>
<li><code>constructor</code> ：用于初始化内部状态，较少使用；唯一可以直接赋值修改 state 的地方；</li>
<li><code>getDerivedStateFromProps</code> ：当 state 需要从 props 初始化时使用；尽量不要使用：维护两者状态一致性会增加复杂度；每次 render 都会调用；典型场景：表单控件获取默认值；</li>
<li><code>componentDidMount</code> ：UI 渲染完成后调用；只执行一次；典型场景：获取外部资源；</li>
</ul>
<h4 id="更新时：传入新的-props-内部-state-改变-force-update；"><a href="#更新时：传入新的-props-内部-state-改变-force-update；" class="headerlink" title="更新时：传入新的 props/内部 state 改变/force update；"></a>更新时：传入新的 props/内部 state 改变/force update；</h4><ul>
<li><code>shouldComponentUpdate</code> ：决定 Virtual DOM 是否需要重绘，无需变化可以返回 false；一般由 PureComponent 自动实现；典型场景：性能优化；</li>
<li><code>getSnapshotBeforeUpdate</code> ：在 render 之前调用，state 已更新；典型场景：获取 render 之前的 DOM 状态；注：getSnapshotBeforeUpdate() should be used with componentDidUpdate()；</li>
<li><code>componentDidUpdate</code>：每次 UI 更新时调用；典型场景：页面需要根据 props 变化重新获取数据；</li>
</ul>
<h4 id="卸载时："><a href="#卸载时：" class="headerlink" title="卸载时："></a>卸载时：</h4><ul>
<li><code>componentWillUnmount</code> ：组件移除时调用；典型场景：资源释放；</li>
</ul>
<h4 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h4><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clock constructed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clock did mount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clock will unmount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Clock did update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">It is </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> PureComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SnapshotSample</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">handleNewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">msg </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prev<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token operator">...</span>prev<span class="token punctuation">.</span>messages<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleNewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleNewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> prevScrollHeight</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span>
      scrollTop <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">.</span>scrollHeight <span class="token operator">-</span> prevScrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>snapshot-sample<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rootNode <span class="token operator">=</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Virtual-DOM，JSX-运行基础"><a href="#Virtual-DOM，JSX-运行基础" class="headerlink" title="Virtual DOM，JSX 运行基础"></a>Virtual DOM，JSX 运行基础</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>Diff：对前后两个 DOM 树进行<strong>广度优先分层比较</strong>，对节点进行一层一层的比较；复杂度为 <code>O(n)</code> ，否则两棵树的比较复杂度为 O(n)；<br>针对 UI 这种树结构相对稳定的场景下不会造成较大的性能问题；</p>
<ul>
<li>组件的 DOM 结构相对稳定；</li>
<li>类型相同的兄弟节点可以被唯一标识（key 属性，可以提高性能）；</li>
</ul>
<h4 id="DEMO-1"><a href="#DEMO-1" class="headerlink" title="DEMO"></a>DEMO</h4><p><a href="https://supnate.github.io/react-dom-diff/index.html">https://supnate.github.io/react-dom-diff/index.html</a></p>
<h3 id="高阶组件-amp-函数作为子组件（设计模式）"><a href="#高阶组件-amp-函数作为子组件（设计模式）" class="headerlink" title="高阶组件&amp;函数作为子组件（设计模式）"></a>高阶组件&amp;函数作为子组件（设计模式）</h3><blockquote>
<p>实现更多场景的组件复用。</p>
</blockquote>
<h4 id="高阶组件（HOC，Higher-Order-Component）"><a href="#高阶组件（HOC，Higher-Order-Component）" class="headerlink" title="高阶组件（HOC，Higher Order Component）"></a>高阶组件（HOC，Higher Order Component）</h4><blockquote>
<p>接受组件作为参数，返回新的组件。</p>
</blockquote>
<p>可以实现一些通用函数，但自身并不包含 UI。</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 高阶组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">withTimer</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">&#123;</span>
    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token attr-name">time</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>time<span class="token punctuation">&#125;</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 需要调用的组件</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> withTimer <span class="token keyword">from</span> <span class="token string">"./withTimer.jsx"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">showTimer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>time<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withTimer</span><span class="token punctuation">(</span>showTimer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 暴露被高阶包装过的组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="函数作为子组件"><a href="#函数作为子组件" class="headerlink" title="函数作为子组件"></a>函数作为子组件</h4><p>用法：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"HTT"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 调用时</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Demo：</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> PureComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedTabSelector</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object<span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>
    <span class="token literal-property property">onChange</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">onChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">children</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> options<span class="token punctuation">,</span> value<span class="token punctuation">,</span> onChange <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab-selector<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">opt</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
              <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>opt<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span></span>
              <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">tab-item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>
                opt<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token string">"selected"</span> <span class="token operator">:</span> <span class="token string">""</span>
              <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span>
              <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
            <span class="token punctuation">></span></span><span class="token plain-text">
              </span><span class="token punctuation">&#123;</span>opt<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">

        </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"red"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Blue"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"orange"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Tiger"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"tiger"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Elephant"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"elephant"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Cow"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"cow"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedTabSelectorSample</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Select color: </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AdvancedTabSelector</span></span>
          <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>colors<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>color<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
              <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">"inline-block"</span><span class="token punctuation">,</span>
                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> color<span class="token punctuation">,</span>
                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"40px"</span><span class="token punctuation">,</span>
                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">"40px"</span><span class="token punctuation">,</span>
              <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>
            <span class="token punctuation">/></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AdvancedTabSelector</span></span><span class="token punctuation">></span></span><span class="token plain-text">

        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Select animal: </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AdvancedTabSelector</span></span>
          <span class="token attr-name">options</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>animals<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>animal<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">animal</span><span class="token operator">:</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>
        <span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">animal</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../../images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>animal<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AdvancedTabSelector</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Context-API（React-16-3-新特性，之前版本都是内部-API）"><a href="#Context-API（React-16-3-新特性，之前版本都是内部-API）" class="headerlink" title="Context API（React 16.3 新特性，之前版本都是内部 API）"></a>Context API（React 16.3 新特性，之前版本都是内部 API）</h3><ul>
<li>根节点：Provider</li>
<li>子节点：Consumer</li>
</ul>
<blockquote>
<p>无需手动去监听组件外部状态的变化然后去重新更新组件，context api 会自动监听状态变化。</p>
</blockquote>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> enStrings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">submit</span><span class="token operator">:</span> <span class="token string">"Submit"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cancel</span><span class="token operator">:</span> <span class="token string">"Cancel"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cnStrings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">submit</span><span class="token operator">:</span> <span class="token string">"提交"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cancel</span><span class="token operator">:</span> <span class="token string">"取消"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> LocaleContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>enStrings<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用于提供上下文数据，并切换上下文</span>
<span class="token keyword">class</span> <span class="token class-name">LocaleProvider</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">locale</span><span class="token operator">:</span> cnStrings <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">toggleLocale</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>locale <span class="token operator">===</span> enStrings <span class="token operator">?</span> cnStrings <span class="token operator">:</span> enStrings<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> locale <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocaleContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>locale<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleLocale<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">切换语言</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocaleContext.Provider</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">LocaledButtons</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocaleContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">locale</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>locale<span class="token punctuation">.</span>cancel<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>locale<span class="token punctuation">.</span>submit<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocaleContext.Consumer</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocaleProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocaledButtons</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocaleProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span><span class="token comment">/* 这个组件就没有locale属性 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocaledButtons</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="脚手架工具"><a href="#脚手架工具" class="headerlink" title="脚手架工具"></a>脚手架工具</h3><p>• create-react-app（入门，小项目，简易项目）<br>• Rekit（基于 create-react-app 提供了更多功能，适合大项目）<br>• Codesandbox（在线创建）</p>
<h3 id="打包和部署"><a href="#打包和部署" class="headerlink" title="打包和部署"></a>打包和部署</h3><h4 id="打包（webpack-gt-loader）"><a href="#打包（webpack-gt-loader）" class="headerlink" title="打包（webpack-&gt;loader）"></a>打包（webpack-&gt;loader）</h4><p>• 编译 ES6 语法特性，编译 JSX；<br>• 整合资源，例如图片，less/sass；<br>• 优化代码体积；<br>注：<br>• 设置 nodejs 环境为 production；<br>• 禁用开发专用代码，比如 logger；<br>• 设置应用根路径；</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」Selector</title>
    <url>/2021/04/12/yuque/sclve5/</url>
    <content><![CDATA[<p>选择器的基本意义是：根据一些特征，选中元素树上的一批元素。</p>
<blockquote>
<ul>
<li>简单选择器：针对某一特征判断是否选中元素。</li>
<li>复合选择器：连续写在一起的简单选择器，针对元素自身特征选择单个元素。</li>
<li>复杂选择器：由“（空格）”“ &gt;”“ ~”“ +”“ ||”等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。</li>
<li>选择器列表：由逗号分隔的复杂选择器，表示“或”的关系。</li>
</ul>
</blockquote>
<h3 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h3><ul>
<li>类型选择器：根据元素的标签名来选中元素；</li>
<li>全体选择器：可以选中任何元素；</li>
<li>id 选择器：根据特定属性的选择器，”#”后面跟随元素 id 属性值；</li>
<li>class 选择器：根据特定属性的选择器，”.”后面跟随元素 class 属性值；</li>
<li>属性选择器<ul>
<li>[attr]</li>
<li>[attr=val]</li>
<li>[attr~=val]</li>
<li>[attr|=val]</li>
</ul>
</li>
<li>伪类选择器<ul>
<li>树结构关系伪类选择器</li>
<li>链接与行为伪类选择器</li>
<li>逻辑伪类选择器</li>
<li>其他伪类选择器</li>
</ul>
</li>
</ul>
<h4 id="类型选择器-amp-全体选择器"><a href="#类型选择器-amp-全体选择器" class="headerlink" title="类型选择器&amp;全体选择器"></a>类型选择器&amp;全体选择器</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>根据一个元素的标签名来选中元素，但是实际上，我们还必须要考虑 HTML 或者 XML 元素的命名空间问题。</p>
<p>比如 svg 元素，实际上在： <a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a> 命名空间之下。svg 和 HTML 中都有 a 元素，我们若要想区分选择 svg 中的 a 和 HTML 中的 a，就必须用带命名空间的类型选择器。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span>
      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>
      <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span>
      <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 100 28<span class="token punctuation">"</span></span>
      <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>
      <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>desc</span><span class="token punctuation">></span></span>Example link01 - a link on an ellipse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>desc</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void 0;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@namespace</span> svg <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://www.w3.org/2000/svg<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@namespace</span> html <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://www.w3.org/1999/xhtml<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="token selector">svg|a</span> <span class="token punctuation">&#123;</span>
  <span class="token property">stroke</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">stroke-width</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">html|a</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="id-选择器-amp-class-选择器"><a href="#id-选择器-amp-class-选择器" class="headerlink" title="id 选择器&amp;class 选择器"></a>id 选择器&amp;class 选择器</h4><p>id 选择器和 class 选择器都是针对特定属性的选择器。id 选择器是“#”号后面跟随 id 名，class 选择器是“.”后面跟随 class 名。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.my_class</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.my_id</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>属性选择器根据 HTML 元素的属性来选中元素。属性选择器有四种形态：</p>
<ul>
<li>第一种，[att]直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中。</li>
<li>第二种，[att=val]精确匹配，检查一个元素属性的值是否是 val。</li>
<li>第三种，[att~=val]多种匹配，检查一个元素的值是否是若干值之一，这里的 val 不是一个单一的值了，可以是用空格分隔的一个序列。</li>
<li>第四种，[att|=val]，开头匹配，检查一个元素的值是否是以 val 开头，它跟精确匹配的区别是属性只要以 val 开头即可，后面内容不管。<blockquote>
<p>PS：<br>[attribute] 用于选取带有指定属性的元素。<br>[attribute=value] 用于选取带有指定属性和值的元素。<br>[attribute~=value] 用于选取属性值中包含指定词汇的元素。<br>[attribute|=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。<br>[attribute^=value] 匹配属性值以指定值开头的每个元素。<br>[attribute$=value] 匹配属性值以指定值结尾的每个元素。<br>[attribute*=value] 匹配属性值中包含指定值的每个元素。</p>
</blockquote>
</li>
</ul>
<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>伪类选择器是一系列由 CSS 规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。</p>
<ul>
<li>树结构关系伪类选择器<br>:root 伪类表示树的根元素，在选择器是针对完整的 HTML 文档情况，我们一般用 HTML 标签即可选中根元素。但是随着 scoped css 和 shadow root 等场景出现，选择器可以针对某一子树来选择，这时候就很需要 root 伪类了。<ul>
<li>:empty 伪类表示没有子节点的元素，这里有个例外就是子节点为空白文本节点的情况。</li>
<li>:nth-child 和 :nth-last-child 这是两个函数型的伪类<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1618219519156-dc7dbf22-2a9f-47f3-bce9-fd55cc73b758.png#height=188&amp;id=IotxV&amp;originHeight=188&amp;originWidth=619&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=619" alt=""></li>
<li>:nth-last-child 的区别仅仅是从后往前数。</li>
<li>:first-child :last-child 分别表示第一个和最后一个元素。</li>
<li>:only-child 按字面意思理解即可，选中唯一一个子元素。</li>
</ul>
</li>
</ul>
<p>of-type 系列，是一个变形的语法糖，S:nth-of-type(An+B) 是:nth-child(|An+B| of S) 的另一种写法。以此类推，还有 nth-last-of-type、first-of-type、last-of-type、only-of-type。</p>
<ul>
<li>链接与行为伪类选择器<ul>
<li>:any-link 表示任意的链接，包括 a、area 和 link 标签都可能匹配到这个伪类。</li>
<li>:link 表示未访问过的链接，</li>
<li>:visited 表示已经访问过的链接。</li>
<li>:hover 表示鼠标悬停在上的元素。</li>
<li>:active 表示用户正在激活这个元素，如用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。</li>
<li>:focus 表示焦点落在这个元素之上。</li>
<li>:target 用于选中浏览器 URL 的 hash 部分所指示的元素。</li>
</ul>
</li>
<li>逻辑伪类选择器<br>一个逻辑伪类 —— :not 伪类。这个伪类是个函数型伪类，它的作用时选中内部的简单选择器命中的元素。</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">*|*<span class="token punctuation">:</span> <span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span> hover<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>选择器 3 级标准中，not 只支持简单选择器，在选择器 4 级标准，则允许 not 接受一个选择器列表，这意味着选择器支持嵌套，仅靠 not 即可完成选择器的一阶真值逻辑完备，但目前还没有看到浏览器实现它。</li>
</ul>
<h3 id="选择器的组合"><a href="#选择器的组合" class="headerlink" title="选择器的组合"></a>选择器的组合</h3><p>选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器；复合选择器则是连写的简单选择器组合。</p>
<h4 id="组合符号优先级"><a href="#组合符号优先级" class="headerlink" title="组合符号优先级"></a>组合符号优先级</h4><p>优先级第一：“无连接符号”；优先级第二：“空格”，“~”，“+”，“&gt;”，“||”；优先级第三：“，”；</p>
<p>例：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.c,
.a > .b.d</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/*......*/</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>.c,.a&gt;.b.d<ul>
<li>.c</li>
<li>.a&gt;.b.d<ul>
<li>.a<ul>
<li>.b.d<ul>
<li>.b</li>
<li>.d</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>复合选择器表示简单选择器中“且”的关系，例如，例子中的“ .b.d ”，表示选中的元素必须同时具有 b 和 d 两个 class。</p>
<ul>
<li>“空格”：后代，表示选中所有符合条件的后代节点， 例如“ .a .b ”表示选中所有具有 class 为 a 的后代节点中 class 为 b 的节点。</li>
<li>“&gt;” ：子代，表示选中符合条件的子节点，例如“ .a&gt;.b ”表示：选中所有“具有 class 为 a 的子节点中，class 为 b 的节点”。</li>
<li>“~” : 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点，例如“ .a~.b ”表示选中所有具有 class 为 a 的后继中，class 为 b 的节点。</li>
<li>“+”：直接后继，表示选中符合条件的直接后继节点，直接后继节点即 nextSlibling。例如 “.a+.b ”表示选中所有具有 class 为 a 的下一个 class 为 b 的节点。</li>
<li>“||”：列选择器，表示选中对应列中符合条件的单元格。</li>
</ul>
<p>同一优先级的选择器遵循“后面的覆盖前面的”原则。</p>
<p>在实践中，建议“根据 id 选单个元素”“class 和 class 的组合选成组元素”“tag 选择器确定页面风格”这样的简单原则来使用选择器，不要搞出过于复杂的选择器，否则容易造成样式覆盖。</p>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>没有把它放在简单选择器中，是因为伪元素本身不单单是一种选择规则，它还是一种机制。</p>
<p>目前兼容性达到可用的伪元素有以下几种：</p>
<ul>
<li>::first-line</li>
<li>::first-letter</li>
<li>::before</li>
<li>::after</li>
</ul>
<h4 id="first-line-amp-first-letter"><a href="#first-line-amp-first-letter" class="headerlink" title="::first-line &amp; ::first-letter"></a>::first-line &amp; ::first-letter</h4><p>比较类似的伪元素，其中一个表示元素的第一行，一个表示元素的第一个字母。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  This is a somewhat long HTML paragraph that will be broken into several lines.
  The first line will be identified by a fictional tag sequence. The other lines
  will be treated as ordinary lines in the paragraph.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p::first-line</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">p::first-letter</span> <span class="token punctuation">&#123;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CSS 标准规定了 first-line 必须出现在最内层的块级元素之内。例：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Second paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Second paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div > p#a</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">div > p#b</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">div::first-line</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终，第一块文本的第一行是蓝色的，因为 p 是块级元素，所以伪元素出现在块级元素之内，所以内层的 color 覆盖了外层的 color 属性。第二块文本的第一行是绿色的。</p>
<p>::first-letter 的行为又有所不同，它的位置在所有标签之内。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div > span#b</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">div::first-letter</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首字母变成了蓝色，这说明伪元素出现在 span 之内。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1618219519144-ae05e6de-eec9-4fc8-b343-73cf6d192f4c.png#height=526&amp;id=baGPb&amp;originHeight=526&amp;originWidth=1187&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1187" alt=""></p>
<h4 id="before-amp-after"><a href="#before-amp-after" class="headerlink" title="::before &amp; ::after"></a>::before &amp; ::after</h4><p>不是把已有的内容套上一个元素，而是真正的无中生有，造出一个元素。::before 表示在元素内容之前插入一个虚拟的元素，::after 则表示在元素内容之后插入。这两个伪元素所在的 CSS 规则必须指定 content 属性才会生效。</p>
<p>::before 和 ::after 还支持 content 为 counter。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>special<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I'm real element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

p.special::before &#123; display: block; content: "pseudo! "; &#125; body &#123; counter-reset:
chapno; &#125; p.special::before &#123; display: block; counter-increment: chapno;
content: counter(chapno, upper-roman) ". "; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>CSS/Less</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」知识框架</title>
    <url>/2021/03/08/yuque/snyrx5/</url>
    <content><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1615195778192-d2c3af8b-e537-4978-8a21-d34ef377e021.jpeg#align=left&amp;display=inline&amp;height=1972&amp;originHeight=1972&amp;originWidth=2670&amp;status=done&amp;style=none&amp;width=2670" alt=""></p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」浏览器的工作-1</title>
    <url>/2021/06/29/yuque/rpkxit/</url>
    <content><![CDATA[<blockquote>
<p>仅学习记录，非原创。</p>
</blockquote>
<p>这个过程是这样的：</p>
<ul>
<li>浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；</li>
<li>把请求回来的 HTML 代码经过解析，构建成 DOM 树；</li>
<li>计算 DOM 树上的 CSS 属性；</li>
<li>最后根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；</li>
<li>一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；</li>
<li>合成之后，再绘制到界面上。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1624950970635-877c9e71-6ccc-4279-a563-cdb274f51172.jpeg#align=left&amp;display=inline&amp;height=810&amp;originHeight=810&amp;originWidth=1440&amp;size=0&amp;status=done&amp;style=none&amp;width=1440" alt=""></p>
<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>浏览器首先要做的事就是根据 URL 把数据取回来，取回数据使用的是 HTTP 协议，实际上这个过程之前还有 DNS 查询。<br>HTTP 协议是基于 TCP 协议出现的，对 TCP 协议来说，TCP 协议是一条双向的通讯通道，HTTP 在 TCP 的基础上，规定了 Request-Response 的模式。这个模式决定了通讯必定是由浏览器端首先发起的。<br>大部分情况下，浏览器的实现者只需要用一个 TCP 库，甚至一个现成的 HTTP 库就可以搞定浏览器的网络通讯部分。HTTP 是纯粹的文本协议，它是规定了使用 TCP 协议来传输文本格式的一个应用层协议。</p>
<ol>
<li>request line，它分为三个部分，HTTP Method，请求的路径和请求的协议和版本。</li>
<li>response line，它也分为三个部分，协议和版本、状态码和状态文本。</li>
<li>请求头 / 响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。</li>
<li>请求体 / 响应体，请求体可能包含文件或者表单数据，响应体则是 HTML 代码。</li>
</ol>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1624953698304-616f2c86-856d-4185-990b-832d2c0e7101.png#align=left&amp;display=inline&amp;height=516&amp;originHeight=516&amp;originWidth=930&amp;size=113692&amp;status=done&amp;style=none&amp;width=930" alt="image.png"></p>
<h5 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h5><ul>
<li>GET：访问页面</li>
<li>POST：表单提交</li>
<li>HEAD：只返回响应头，多数由 JavaScript 发起</li>
<li>PUT：添加资源</li>
<li>DELETE：删除资源</li>
<li>CONNECT：多用于 HTTPS 和 WebSocket</li>
<li>OPTIONS：一般用于调试，多数线上服务都不支持</li>
<li>TRACE：同 OPTIONS</li>
</ul>
<h5 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h5><p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1624955665601-fb3d8fd5-e54d-4963-88ac-055f4654c54b.png#align=left&amp;display=inline&amp;height=407&amp;originHeight=407&amp;originWidth=633&amp;size=108736&amp;status=done&amp;style=none&amp;width=633" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1624955674364-2feb7bd9-db40-4ac7-b3de-ce855e121cac.png#align=left&amp;display=inline&amp;height=453&amp;originHeight=453&amp;originWidth=627&amp;size=122722&amp;status=done&amp;style=none&amp;width=627" alt="image.png"></p>
<h5 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h5><p>主要用于提交表单场景。实际上，HTTP 请求的 body 是比较自由的，只要浏览器端发送的 body 服务端认可就可以了。一些常见的 body 格式是：</p>
<ul>
<li>application/json</li>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/xml</li>
</ul>
<p>我们使用 HTML 的 form 标签提交产生的 HTML 请求，默认会产生 application/x-www-form-urlencoded 的数据格式，当有文件上传时，则会使用 multipart/form-data。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>有两个作用：</p>
<ul>
<li>一是确定请求的目标服务端身份；</li>
<li>二是保证传输的数据不会被网络中间节点窃听或者篡改；</li>
</ul>
<p>使用加密通道来传输 HTTP 的内容。但是 HTTPS 首先与服务端建立一条 TLS 加密通道。TLS 构建于 TCP 协议之上，它实际上是对传输的内容做一次加密，所以从传输内容上看，HTTPS 跟 HTTP 没有任何区别。</p>
<h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP 2"></a>HTTP 2</h3><p>是 HTTP 1.1 的升级版本，最大的改进有两点，一是支持服务端推送，二是支持 TCP 连接复用。<br>服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。<br>TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输窗口小的问题。</p>
<p><a href="https://www.yuque.com/httishere/running/iew14d">-&gt; 浏览器的工作-2</a></p>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>「JS」作用域</title>
    <url>/2020/10/10/yuque/ug30tr/</url>
    <content><![CDATA[<blockquote>
<p>作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符（变量）的访问权限。<br>——《你不知道的 JavaScript 上卷》</p>
</blockquote>
<p>参考教程：<a href="https://segmentfault.com/a/1190000017948999">前端进击的巨人（三）：从作用域走进闭包</a></p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>eval 作用域</li>
<li>块级作用域（ES6 新增）</li>
</ul>
<h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>JavaScript 中全局环境只有一个，对应的全局作用域也只有一个。局部环境没有使用<code>var/let/const</code>声明的变量默认都会成为全局变量。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global 变全局变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>函数内部环境称为函数作用域，在函数内声明的变量仅在函数内有效。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"function"</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>被大括号<code>&#123;&#125;</code>包裹的代码部分。<br>ES6 前没有块级作用域的概念，所以<code>&#123;&#125;</code>中并没有自己的作用域。如果我们想在 ES5 的环境下构建块级作用域，一般都是是通过立即执行函数来实现的。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'block'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'global'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>let/const</code>不允许变量提升，必须<strong>“先声明再使用”</strong>。这种限制，称为<strong>“暂时性死区”</strong>。这也能让我们在代码编写阶段变得更加规范化，执行跟书写顺序保持一致。</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote>
<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。<br>——《JavaScript 高级程序设计》</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">===</span> <span class="token string">"blue"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Color is now "</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数<code>changeColor()</code>的作用域链包含两个对象：它自己的变量对象（其中定义着<code>arguments</code>对象）和全局环境的变量对象。</p>
<h4 id="作用域链的变量查询"><a href="#作用域链的变量查询" class="headerlink" title="作用域链的变量查询"></a>作用域链的变量查询</h4><p>在多层级函数嵌套内，变量对象需要在作用域链上进行查找。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
    d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
      f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> e <span class="token operator">+</span> f<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>func2()</code>内部获取<code>a</code>变量时，先查找当前作用域是否声明该变量，若没有则循着作用域链向上作用域进行查找，知道全局作用域。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」实践</title>
    <url>/2021/03/11/yuque/tcffgw/</url>
    <content><![CDATA[<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><blockquote>
<p>while 循环快还是 for 循环快？<br>|0 是不是比 Math.floor 性能好？</p>
</blockquote>
<p><strong>一切没有 profiling 的性能都是耍流氓</strong>。凡是真正有价值的性能优化，必定是从端到端的业务场景建立体系来考虑的。</p>
<p>性能体系的建立可以分成以下几部分：</p>
<ul>
<li>现状评估和建立指标；</li>
<li>技术方案；</li>
<li>执行；</li>
<li>结果评估和监控。</li>
</ul>
<h3 id="现状评估和建立指标"><a href="#现状评估和建立指标" class="headerlink" title="现状评估和建立指标"></a>现状评估和建立指标</h3><p>两个因素：提升用户体验；提高业务价值</p>
<p>性能问题最主要的几个点：</p>
<ul>
<li>页面加载性能；</li>
<li>动画与操作性能；</li>
<li>内存、电量消耗。</li>
</ul>
<p>注意，这里我们仅仅是对“性能”两个字的分析和解读，在对大量的用户数据分析后，我们发现，其实这三部分中，“页面加载性能”跟用户的流失率有非常强的关联性，而用户流失率，正是公司业务非常看重的指标。</p>
<p>在开始阶段，我们决定把性能优化的重点放在页面加载性能上。那么，用什么指标来衡量页面加载性能呢？最容易想到的方案是“用户平均加载时间”，事实上，我们在相当长的一段时间，也都是在使用用户平均加载时间作为性能指标。</p>
<p>这个指标有严重的问题：</p>
<ol>
<li>当加载时间低于一定数字，用户体感差别不大了，我们经过一定的研究，认为这个数字大约是 1 秒；</li>
<li>少数超长时间加载的用户（如 2G），会极大影响整个指标，即指标不能反映大多数用户的体验。</li>
</ol>
<p>基于以上分析，我们设计了一个新的指标——<strong>秒开率</strong>，即一秒之内打开的用户占用户总量的百分比。</p>
<h3 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h3><p>从输入 URL 后按下回车，到底发生了什么？？</p>
<p><em>相关</em>：【面试】在浏览器地址栏输入 url 到打开页面整个过程发生了什么。</p>
<p>浏览器大致的工作过程：</p>
<p>从域名到 IP 地址，需要用 DNS 协议查询；HTTP 协议是用 TCP 传输的，所以会有 TCP 建立连接过程；如果使用 HTTPS，还有有 HTTPS 交换证书；每个网页还有图片等请求。</p>
<p>从这个分析和实际试验的结果看，网页的加载时间，不但跟体积有关系，还跟请求数有很大关系。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1617246920260-b6795765-8bb0-4b72-9348-84c78de369c1.jpeg#align=left&amp;display=inline&amp;height=566&amp;originHeight=566&amp;originWidth=1043&amp;size=0&amp;status=done&amp;style=none&amp;width=1043" alt=""></p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>工程水平从低到高分成三个阶段：纯管理；制度化；自动化。</p>
<p>自动化的方式是在一些重要的操作路径上设置规则，针对我们的性能优化，有两个点适合做这件事：一个是把开发好的页面发布上线，另一个是开发好的页面 URL 投放到首页等处的链接。</p>
<h3 id="结果评估和监控"><a href="#结果评估和监控" class="headerlink" title="结果评估和监控"></a>结果评估和监控</h3><p>线上监控，分两个部分：数据采集；数据展现。</p>
<p>数据采集部分，同样需要发布平台或者开发工具来配合，对性能数据来说，Performance API 非常好用，它是浏览器记录的性能数据，一般来说，我们用统一的代码把它上传到服务器端就够用了。</p>
<p>数据的展现部分就比较自由了，可以用不同的数据可视化方案来展现性能数据，没有一定之规。一般的数据监控平台，会提供报警机制，对性能来说，报警需求不是特别强烈，但是也可以设置一些条件，针对秒开率特别低的网页报警。</p>
<p>PS：DataDog？</p>
<h2 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h2><h3 id="工具体系"><a href="#工具体系" class="headerlink" title="工具体系"></a>工具体系</h3><p>提高团队效率，如何规划？</p>
<p>工具是为技术团队本身服务的工程体系，那么，工具的目标是什么呢？其实每一种工具的出现，必然都有一个非常具体的目标，比如 npm 帮助我们进行包管理，Yeoman 帮助我们初始化项目模板。但是这些目标是工具的目标，不是工具体系的目标。</p>
<p>考虑到工程行为都是团队合作，我们对工具最基本的要求就是：版本一致。</p>
<p>工具体系的另一个重要需求是：避免冲突。</p>
<p><strong>工具链是一系列互相配合的工具，能够协作完成开发任务</strong>（注：工具链这个词最早是由 C/C++ 程序员引入的概念，一般包含编译、链接、调试等工具）。</p>
<h3 id="工具体系的设计"><a href="#工具体系的设计" class="headerlink" title="工具体系的设计"></a>工具体系的设计</h3><p>前端开发大约要做哪些事：</p>
<ul>
<li>初始化项目；</li>
<li>运行和调试；</li>
<li>测试（单元测试）；</li>
<li>发布；</li>
</ul>
<p>那么一个典型的社区项目工具链可能就类似下面这样：</p>
<ul>
<li>Yeoman</li>
<li>webpack</li>
<li>ava/nyc</li>
<li>aws-cli</li>
</ul>
<p>然后还需要一种机制，保证团队使用的工具版本一致。</p>
<ol>
<li>轻量级的做法是，在项目初始化模板中定义 npm script 并且在 npm dev-dependency 中规定它的版本号。</li>
<li>重量级的做法是，开发一个包装工具，在命令行中不直接使用命令，而使用包装过的命令。如在我之前的团队，使用的工具名为 def，它规定了一些命令：<ul>
<li>def init</li>
<li>def dev</li>
<li>def test</li>
<li>def publish</li>
</ul>
</li>
</ol>
<p>这样，工具链的使用者只需指定工具链名称，就不需要知道项目具体使用了哪些工具，这样只需要专注自己的需求就够了。</p>
<h3 id="工具体系的执行"><a href="#工具体系的执行" class="headerlink" title="工具体系的执行"></a>工具体系的执行</h3><p>工具体系的入口是初始化项目，所以只要初始化工具在手，可以控制其它所有工具。</p>
<p>工具体系因为其自身特性，可以说是最容易做到自动化的一个体系了。</p>
<h3 id="工具体系的监控"><a href="#工具体系的监控" class="headerlink" title="工具体系的监控"></a>工具体系的监控</h3><p>以下指标跟开发者体验较为相关：调试 / 构建次数；构建平均时长；使用的工具版本；发布次数。</p>
<p>思考：在实际开发中经常会遇到几个开发者本地部分依赖扩展等版本不一致，导致编译或者运行结果不一致，可以通过加钩子，commit 之前检测一下各种工具或者软件的版本，确保过才可以正常 commit。</p>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>持续集成是近现代软件工程中的一个非常重要的概念。它是指在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一的构建和测试。</p>
<p>与持续集成相对的做法是：独立开发各个模块，在软件开发的最终阶段才做集成。</p>
<p>持续集成的优势是及早处理集成阶段的问题，使软件质量和开发进度可控。</p>
<p>现在持续集成还有升级版本：持续交付和持续部署，这些因为需要更为完善的基础设施，目前很少有公司前端团队可以用上，我们暂且不谈。</p>
<p>传统的持续集成概念诞生于桌面客户端开发，在 Web 前端领域，由于技术和产品形态的差别，我们需要构建的持续集成体系也有一些区别。</p>
<h3 id="持续集成总论"><a href="#持续集成总论" class="headerlink" title="持续集成总论"></a>持续集成总论</h3><p>传统软件的持续集成主要有以下措施:</p>
<ul>
<li>daily build：每日构建，开发者每天提交代码到代码仓库，构建一个可运行的版本。</li>
<li>build verification test（BVT）：构建验证测试，每日构建版本出来后，运行一组自动化的测试用例，保证基本功能可用。</li>
</ul>
<p>对于前端来说，有一些现实的区别：前端代码按页面自然解耦，大部分页面都是单人开发；前端构建逻辑简单，一般开发阶段都保证构建成功，不需要构建；前端代码一般用于开发界面，测试自动化成本极高；前端页面跳转，是基于 url，没有明确的产品边界。</p>
<h3 id="持续集成的目标"><a href="#持续集成的目标" class="headerlink" title="持续集成的目标"></a>持续集成的目标</h3><p>每日构建不需要，前端构建验证测试成本过高难以实施，那么我们是不是可以有一些代替的措施呢？</p>
<p>首先我们要确定前端持续集成的目标，我们回到持续集成的根本理念，一是要及早集成代码形成可测试的版本，二是通过一定的测试来验证提交的代码的有效性。</p>
<p>持续集成的方案我们进一步思考，前端持续集成如何完成这两个目标呢？前端代码不需要构建，或者说只需要单页面构建，但是页面与页面之间的跳转是用 url 构成的，所以我们的可测试的版本，不可能通过“构建”来获得。</p>
<p>我们只能通过“发布”来获得一个前端代码的可执行版本，在传统语境中，“发布”的目标是线上生产环境，这显然不行。于是，我们就需要一个预览环境，来做一种“虚拟发布”的操作。我们再来考虑一下，为界面编写自动化测试用例成本很高，那么如何代替构建验证测试呢？我们回忆一下，在性能一课，我有讲过，页面的性能可以通过一些自动化工具来分析，还可以通过一些数据采集方案来发现性能问题，对于预览环境前端页面，我们可以采用同样的措施。除了基于页面结构的分析和数据采集，我们还可以扫描代码。综上，我认为前端的持续集成的措施应该是这样的：预览环境，代替每日构建，前端每次（或指定次）提交代码到仓库都同步到预览环境，保证预览环境总是可用；规则校验，代替构建验证测试，通过数据采集（如前面提到的性能数据）和代码扫描，保证提交的代码满足一定的质量要求。接下来，让我来详细介绍一下预览环境的设计和规则校验的设计。</p>
<h3 id="预览环境"><a href="#预览环境" class="headerlink" title="预览环境"></a>预览环境</h3><p>前端代码发布到线上生产环境需要有线上的机器和域名，而预览环境同样需要机器和域名，不过，只需要在公司内网即可。所以建立预览环境的第一步就是申请机器和域名，我们需要运维协助，在预览环境的机器上部署 Web 应用服务器。有了预览环境的机器，下一步就是建立预览环境发布机制。有些公司使用脚本发布，有些公司使用 git hook，有些公司则使用一个 Web 应用平台，进行白屏操作，因为各个公司的发布机制千差万别，我这里没办法讲解具体的方案。这里我建议，预览环境的机器发布流程应该跟线上发布保持一致，这样可以最大程度降低成本和降低心智负担。预览环境的部署和发布机制建立是最基本的需求，在实际应用中，情况要复杂的多，可能需要多个预览环境同时存在。</p>
<p>比如，测试工程师可能要求一个相对稳定的环境来测试，这是一个合理的诉求，比如，全公司大部分业务都可能依赖登录页面，一旦登录页面在频繁发布导致一些预览环境的故障，可能全公司都没办法工作了。又比如，当服务端工程师联调时，会希望前端的预览环境跟服务端的预览环境对接，而当服务端的代码部署到线上生产环境后，可能又需要前端的预览环境跟服务端线上环境对接。这些问题都是我曾经遇到过的非常现实的问题，如果今天回过头来设计，我认为应该设计一套带参数和版本号的预览环境，为测试提供特定版本的预览环境，用参数解决那些跟服务端 API 对接问题，但是任何系统都不可能从一开始就设计完善，所以，建议你把重心放到建立预览环境的基本需求上来。</p>
<h3 id="规则校验"><a href="#规则校验" class="headerlink" title="规则校验"></a>规则校验</h3><p>接下来我们讲讲规则校验，规则校验可以分成三种措施：页面结构扫描；运行时数据采集；代码扫描。页面结构扫描可以使用无头浏览器（如 phantomjs）配合一些 JavaScript 代码编写的规则来完成。运行时数据采集，可以通过在页面插入公共 js 文件的方式来完成，最基本的是用 Performance API 来采集性能数据，用 window.onerror 来采集 js 错误。代码扫描，社区有一些现成的方案，比如 JSHint，你可以根据实际需要，选择社区方案或者自研。</p>
<h3 id="持续集成的实施"><a href="#持续集成的实施" class="headerlink" title="持续集成的实施"></a>持续集成的实施</h3><p>持续集成的实施，是必须严格做到自动化和制度化的。我们可以通过上节课讲的工具来完成持续集成。其它部分，都可以通过工具和制度来完成，这里需要重点讲的是规则校验中的规则部分。我们刚刚讲解的规则校验仅仅是搭建好了平台，而规则本身，我们需要先形成一个共识，然后在前端团队内部形成一定的更新机制。这里，我建议用 issue 的方式来管理规则的提案，可以在周会或者月会上讨论，充分保证整个团队对校验规则的一致意见。这里，我们必须警惕三种错误：少数人拍脑袋决定校验规则；一成不变的校验规则；频繁无规律变化的校验规则。只有经过民主讨论、定期更新的校验规则，才能在团队中起到积极作用。校验规则决定了整个前端团队的开发体验，所以必须非常慎重。</p>
<h3 id="持续集成的结果"><a href="#持续集成的结果" class="headerlink" title="持续集成的结果"></a>持续集成的结果</h3><p>持续集成机制的建立本身就可以视为一种结果，它能够让整个团队的代码质量有一个基本的保障，提前发现问题，统一代码风格，从而带来开发体验和效率的提升。此外，持续集成的结果也能够以数据的方式呈现出整个开发团队的健康状态，这是管理者会非常关注的一个点。</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」高级类型</title>
    <url>/2021/12/21/yuque/uht9di/</url>
    <content><![CDATA[<blockquote>
<p>TS 为了保障语言的灵活性所引入的语言特性。</p>
</blockquote>
<h3 id="交叉类型-amp-联合类型"><a href="#交叉类型-amp-联合类型" class="headerlink" title="交叉类型&amp;联合类型"></a>交叉类型&amp;联合类型</h3><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><p>使用<code>&amp;</code>连接。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 必须实现所有属性，相当于并集</span>
<span class="token keyword">let</span> pet<span class="token operator">:</span> Dog <span class="token operator">&amp;</span> Cat <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><p>声明的类型并不确定，可以为多个类型中的一个。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> hoc_a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> hoc_a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="字面量联合类型"><a href="#字面量联合类型" class="headerlink" title="字面量联合类型"></a>字面量联合类型</h5><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> hoc_b<span class="token operator">:</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hoc_c<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="类的联合类型"><a href="#类的联合类型" class="headerlink" title="类的联合类型"></a>类的联合类型</h5><p>其实只能访问公有的属性。</p>
<p>可以利用共有属性设计相应的类型保护区块。</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-12-22_15-52-34.jpg#id=vBFmt&amp;originHeight=561&amp;originWidth=940&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"square"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>r <span class="token operator">*</span> s<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> s<span class="token punctuation">.</span>width <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// never检测上述分支是否全部覆盖</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>实现一个从对象内获取一些属性的值的方法。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> hoc_obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  d<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  e<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getValues</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> keys<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>hoc_obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues</span><span class="token punctuation">(</span>hoc_obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>keyof T 表示类型 T 的所有公共属性的字面量的联合类型。</p>
</blockquote>
<p>将上面函数进行一定的改造，使其能对类型进行保护。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// keyof</span>
<span class="token keyword">interface</span> <span class="token class-name">Obj</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> Obj<span class="token punctuation">;</span>

<span class="token comment">// T[K]</span>
<span class="token keyword">let</span> value<span class="token operator">:</span> Obj<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// T extends U</span>

<span class="token comment">// 配合泛型约束</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getValues_1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> keys<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getValues_1</span><span class="token punctuation">(</span>hoc_obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 不能将类型“"f"”分配给类型“"a" | "b" | "c" | "d" | "e"”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>提供从旧类型中创建新类型的方式，允许将一个类型映射成另外一个类型。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ReadOnlyObj</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 只读类型</span>

<span class="token keyword">type</span> <span class="token class-name">PartialObj</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Obj<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 可选类型</span>

<span class="token keyword">type</span> <span class="token class-name">PickObj</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 选择属性</span>

<span class="token keyword">type</span> <span class="token class-name">RecordObj</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">"x"</span> <span class="token operator">|</span> <span class="token string">"y"</span><span class="token punctuation">,</span> Obj<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 新增类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h3><p>由条件表达式所决定的类型。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span>
  <span class="token operator">?</span> <span class="token string">"string"</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span>
  <span class="token operator">?</span> <span class="token string">"number"</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">boolean</span></span>
  <span class="token operator">?</span> <span class="token string">"boolean"</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">undefined</span></span>
  <span class="token operator">?</span> <span class="token string">"undefined"</span>
  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span>
  <span class="token operator">?</span> <span class="token string">"function"</span>
  <span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T4</span></span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"e"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// type T4 = "b" | "c"</span>
<span class="token comment">// 先拆解：Diff&lt;'a', 'a' | 'e'> | Diff&lt;'b', 'a' | 'e'> | Diff&lt;'c', 'a' | 'e'></span>
<span class="token comment">// never | 'b' | 'c'</span>
<span class="token comment">// 'b' | 'c'</span>

<span class="token keyword">type</span> <span class="token class-name">NotNull<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T5</span></span> <span class="token operator">=</span> NotNull<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述就是 TS 的两个内置类型：</p>
<ul>
<li>Diff -&gt; <code>Exclude&lt;T, U&gt;</code></li>
<li>NotNull -&gt; <code>NoNullable&lt;T&gt;</code></li>
<li><code>Extract&lt;T, U&gt;</code>，抽取相同的类型</li>
</ul>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T6</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"e"</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// type T6 = "a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「React Practice」React生态圈</title>
    <url>/2021/07/12/yuque/uqto9w/</url>
    <content><![CDATA[<blockquote>
<p>「React Practice」系列教程是学习王沛老师的【React 实战进阶】课程的学习记录，demo 参考来自<a href="https://codesandbox.io/s/6n20nrzlxz">https://codesandbox.io/s/6n20nrzlxz</a>。<br><strong>非原创，仅作为学习记录。</strong></p>
</blockquote>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><blockquote>
<p>ref：<a href="https://css-tricks.com/learning-react-redux/">https://css-tricks.com/learning-react-redux/</a></p>
</blockquote>
<p>独立于 react 之外的单独的一个库。</p>
<p>组件：state -&gt; DOM。</p>
<p>全局有一个唯一 store，负责提供整个应用程序所有的状态。Redux 让组件通信更加容易。<br><img src="https://cdn.nlark.com/yuque/0/2021/svg/250093/1626057511251-3ffc1bfc-80be-49c9-b8a9-b14c0606769e.svg#align=left&amp;display=inline&amp;height=500&amp;originHeight=500&amp;originWidth=800&amp;size=66153&amp;status=done&amp;style=none&amp;width=800" alt="redux-article-3-03.svg"><br>图片来源：<a href="https://css-tricks.com/learning-react-redux">https://css-tricks.com/learning-react-redux</a></p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li>Single Source of Truth</li>
</ul>
<p>所有的 View 全部依赖于 Store，View 内部尽量没有自己的状态（Redux uses only one store for all its application state. Since all state resides in one place）。</p>
<ul>
<li>可预测性</li>
</ul>
<p><code>state + action = new state</code> ，不是在原 state 上对 state 进行修改，而是产生一个新的 state（<strong>State is Read-Only</strong>）。</p>
<ul>
<li>纯函数更新 store</li>
</ul>
<h4 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h4><blockquote>
<p><em>The only way to mutate the state is to emit an action, an object describing what happened.</em><br>The application cannot modify the state directly. Instead, “actions” are dispatched to express an intent to change the state in the store.</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/svg/250093/1626060713513-5424b39b-98b2-48c4-8a2b-a0f712cc7175.svg#align=left&amp;display=inline&amp;height=265&amp;originHeight=265&amp;originWidth=800&amp;size=34830&amp;status=done&amp;style=none&amp;width=800" alt="redux-article-3-05.svg"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 三个通用方法</span>
store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Reducers are functions that you write which handle dispatched actions and can actually change the state.<br>Dispatching an action is <strong>the only way</strong> for the application code to express a state change:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> action <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"ADD_USER"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Dan"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>触发更新就是通过 reducer 进行的，reducer 就是一个函数，接收 state 和 action，reducer 可以接收到所有 action，然后在函数体内根据 action 的 type 来处理具体的 action。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">someReducer</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token operator">...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>数据流向：比如点击页面某个按钮产生了事件 action，action 通过 dispatcher 被分发给了 reducer，然后由 reducer 来处理改变 state，最后通知 UI 进行页面数据更新。</p>
<h4 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h4><ul>
<li>combineReducers：多个 reducer 的整合</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> combineReducers <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	reducer1<span class="token punctuation">,</span>
	reducer2<span class="token punctuation">,</span>
	<span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>bindActionCreators： <code>bindActionCreators(actionCreators, dispatch)</code>，  使用 dispatch 对每个 action creator 进行包装，以便可以直接调用它们。</li>
</ul>
<h4 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore<span class="token punctuation">,</span> combineReducers<span class="token punctuation">,</span> bindActionCreators <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Store initial state</span>
  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// reducer</span>
  <span class="token keyword">const</span> <span class="token function-variable function">counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">"PLUS_ONE"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">"MINUS_ONE"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">"CUSTOM_COUNT"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">;</span>

  <span class="token comment">// Create store</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
    <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      todos<span class="token punctuation">,</span>
      counter<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Action creator</span>
  <span class="token keyword">function</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// action</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"PLUS_ONE"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function">minusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"MINUS_ONE"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function">customCount</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"CUSTOM_COUNT"</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  plusOne <span class="token operator">=</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">,</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>

  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听store的变化</span>
  <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">minusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">customCount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>run<span class="token punctuation">&#125;</span><span class="token operator">></span>Run<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">*</span> 请打开控制台查看运行结果<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="在-react-内使用"><a href="#在-react-内使用" class="headerlink" title="在 react 内使用"></a>在 react 内使用</h4><p><code>react-redux</code>  提供了一个 <code>connect</code>  的方法，可以将 component 和 store 联系在一起。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SidePanel</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">// 将store的状态传入组件</span>
<span class="token comment">// 性能问题：用到哪些数据就绑定哪些数据</span>
<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">side_nav</span><span class="token operator">:</span> state<span class="token punctuation">.</span>nav<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>actions <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>SidePanel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>connect</code>  的工作原理就是<strong><a href="https://www.yuque.com/httishere/running/ronixb#wFSYg">高阶组件</a>。</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1626077220071-e797212a-eadb-49c6-87d4-a239157b6103.jpeg#align=left&amp;display=inline&amp;height=519&amp;originHeight=519&amp;originWidth=1091&amp;size=114847&amp;status=done&amp;style=none&amp;width=1091" alt="IMG_A234AAE6623C-1.jpeg"></strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> bindActionCreators<span class="token punctuation">,</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span>

<span class="token comment">// Store initial state</span>
<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// reducer</span>
<span class="token keyword">const</span> <span class="token function-variable function">counter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token string">"PLUS_ONE"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"MINUS_ONE"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">"CUSTOM_COUNT"</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>count <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// Create store</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Action creator</span>
<span class="token keyword">function</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// action</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"PLUS_ONE"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">minusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"MINUS_ONE"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> plusOne<span class="token punctuation">,</span> minusOne <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"counter"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>minusOne<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">"inline-block"</span><span class="token punctuation">,</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">"0 10px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>plusOne<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> plusOne<span class="token punctuation">,</span> minusOne <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> ConnectedCounter <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">CounterSample</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ConnectedCounter <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="异步-Action-amp-中间件"><a href="#异步-Action-amp-中间件" class="headerlink" title="异步 Action&amp;中间件"></a>异步 Action&amp;中间件</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/250093/1626850097533-f065ebbd-2535-49d8-b56c-460fd3eaea99.jpeg#align=left&amp;display=inline&amp;height=363&amp;originHeight=703&amp;originWidth=881&amp;size=0&amp;status=done&amp;style=none&amp;width=455" alt=""></p>
<h4 id="中间件（Middlewares）"><a href="#中间件（Middlewares）" class="headerlink" title="中间件（Middlewares）"></a>中间件（Middlewares）</h4><p>中间件会在 dispatcher 中截获 action，进行预处理。</p>
<ul>
<li>截获 action</li>
<li>发出 action</li>
</ul>
<h4 id="异步-action"><a href="#异步-action" class="headerlink" title="异步 action"></a>异步 action</h4><p>不是特殊的 action，是多个同步 action 的组合使用</p>
<h4 id="DEMO-1"><a href="#DEMO-1" class="headerlink" title="DEMO"></a>DEMO</h4><p>中间件比较常见的应用场景就是 <code>logger</code> 。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  <span class="token constant">HOME_FETCH_FILE_CONTENT_BEGIN</span><span class="token punctuation">,</span>
  <span class="token constant">HOME_FETCH_FILE_CONTENT_SUCCESS</span><span class="token punctuation">,</span>
  <span class="token constant">HOME_FETCH_FILE_CONTENT_FAILURE</span><span class="token punctuation">,</span>
  <span class="token constant">HOME_FETCH_FILE_CONTENT_DISMISS_ERROR</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./constants"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchFileContent</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_BEGIN</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/rekit/api/file-content"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> file <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_SUCCESS</span><span class="token punctuation">,</span>
          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> file<span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>content <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_FAILURE</span><span class="token punctuation">,</span>
          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> e <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">dismissFetchFileContentError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_DISMISS_ERROR</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 多种类型action的处理</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_BEGIN</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentPending</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentError</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_SUCCESS</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> fileContentNeedReload <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>fileContentNeedReload <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span> fileContentNeedReload<span class="token punctuation">[</span>action<span class="token punctuation">.</span>data<span class="token punctuation">.</span>file<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">fileContentById</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token operator">...</span>state<span class="token punctuation">.</span>fileContentById<span class="token punctuation">,</span>
          <span class="token punctuation">[</span>action<span class="token punctuation">.</span>data<span class="token punctuation">.</span>file<span class="token punctuation">]</span><span class="token operator">:</span> action<span class="token punctuation">.</span>data<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        fileContentNeedReload<span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentPending</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentError</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">case</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_FAILURE</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentPending</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentError</span><span class="token operator">:</span> action<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token constant">HOME_FETCH_FILE_CONTENT_DISMISS_ERROR</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">...</span>state<span class="token punctuation">,</span>
        <span class="token literal-property property">fetchFileContentError</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」结构化程序设计</title>
    <url>/2021/09/01/yuque/un7o7p/</url>
    <content><![CDATA[<h3 id="JS-执行粒度-Realm"><a href="#JS-执行粒度-Realm" class="headerlink" title="JS 执行粒度 Realm"></a>JS 执行粒度 Realm</h3><ul>
<li>JS Context =&gt; Realm（粒度比宏任务更大）</li>
<li>宏任务</li>
<li>微任务</li>
<li>函数调用</li>
<li>语句/声明</li>
<li>表达式</li>
<li>直接量/变量/this…</li>
</ul>
<p>如果使用 GLOBAL 变量对象是不需要用到 Realm。</p>
<p>在 JS 内，函数表达式和对象直接量均会创建对象，使用<code>.</code>做隐式转换也会创建对象，这些对象都是有原型的，如果没有 Realm 我们就不知道它们的原型是什么了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// vs</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="获取所有-GLOBAL-对象"><a href="#获取所有-GLOBAL-对象" class="headerlink" title="获取所有 GLOBAL 对象"></a>获取所有 GLOBAL 对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span>
  eval<span class="token punctuation">,</span>
  isFinite<span class="token punctuation">,</span>
  isNaN<span class="token punctuation">,</span>
  parseFloat<span class="token punctuation">,</span>
  parseInt<span class="token punctuation">,</span>
  decodeURI<span class="token punctuation">,</span>
  decodeURIComponent<span class="token punctuation">,</span>
  encodeURI<span class="token punctuation">,</span>
  encodeURIComponent<span class="token punctuation">,</span>
  Array<span class="token punctuation">,</span>
  Date<span class="token punctuation">,</span>
  RegExp<span class="token punctuation">,</span>
  Promise<span class="token punctuation">,</span>
  Proxy<span class="token punctuation">,</span>
  Map<span class="token punctuation">,</span>
  WeakMap<span class="token punctuation">,</span>
  Set<span class="token punctuation">,</span>
  WeakSet<span class="token punctuation">,</span>
  Function<span class="token punctuation">,</span>
  Boolean<span class="token punctuation">,</span>
  String<span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span>
  Symbol<span class="token punctuation">,</span>
  Object<span class="token punctuation">,</span>
  Error<span class="token punctuation">,</span>
  EvalError<span class="token punctuation">,</span>
  RangeError<span class="token punctuation">,</span>
  ReferenceError<span class="token punctuation">,</span>
  SyntaxError<span class="token punctuation">,</span>
  TypeError<span class="token punctuation">,</span>
  URIError<span class="token punctuation">,</span>
  ArrayBuffer<span class="token punctuation">,</span>
  <span class="token comment">// SharedArrayBuffer, // 所有主流浏览器均默认于2018年1月5日禁用SharedArrayBuffer</span>
  DataView<span class="token punctuation">,</span>
  Float32Array<span class="token punctuation">,</span>
  Float64Array<span class="token punctuation">,</span>
  Int8Array<span class="token punctuation">,</span>
  Int16Array<span class="token punctuation">,</span>
  Int32Array<span class="token punctuation">,</span>
  Uint8Array<span class="token punctuation">,</span>
  Uint16Array<span class="token punctuation">,</span>
  Uint32Array<span class="token punctuation">,</span>
  Uint8ClampedArray<span class="token punctuation">,</span>
  Atomics<span class="token punctuation">,</span>
  <span class="token constant">JSON</span><span class="token punctuation">,</span>
  Math<span class="token punctuation">,</span>
  Reflect<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>objects<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> current <span class="token operator">=</span> objects<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      property<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> property<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token keyword">typeof</span> property<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      property<span class="token punctuation">.</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>property<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> property<span class="token punctuation">.</span>get <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>property<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> property<span class="token punctuation">.</span>set <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="宏任务-amp-微任务"><a href="#宏任务-amp-微任务" class="headerlink" title="宏任务&amp;微任务"></a>宏任务&amp;微任务</h3><p>两个角色：宿主环境和 JS 引擎。</p>
<ul>
<li><strong>宏任务：宿主发起的任务；</strong></li>
<li><strong>微任务：JS 引擎发起的任务；</strong></li>
</ul>
<p>JS 是单线程执行的。</p>
<p>宏任务内部会有一个微任务列表，在执行下一个宏任务之前，会把上一个宏任务内的微任务全部完成。</p>
<h4 id="分析异步执⾏的顺序："><a href="#分析异步执⾏的顺序：" class="headerlink" title="分析异步执⾏的顺序："></a>分析异步执⾏的顺序：</h4><ul>
<li>⾸先我们分析<strong>有多少个宏任务</strong>；</li>
<li>在每个宏任务中，分析有多少个微任务；</li>
<li>根据调⽤次序，确定宏任务中的微任务执⾏次序；</li>
<li>根据宏任务的触发规则和调⽤次序，确定宏任务的执⾏次序；</li>
<li>确定整个顺序。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>思考下面代码的执行顺序：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>˛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>会先在一个微任务内执行完所有的同步代码。</p>
<p>宏任务 1:</p>
<ul>
<li>微任务 1：0，4，5，-2（同步代码）<ul>
<li>入队：1，-1</li>
</ul>
</li>
<li>微任务 2：1<ul>
<li>入队：1.5</li>
</ul>
</li>
<li>微任务 3：-1</li>
<li>微任务 4：1.5</li>
</ul>
<p>宏任务 2:</p>
<ul>
<li>微任务 1：2</li>
<li>微任务 2：3</li>
</ul>
<h3 id="函数调用（Execution-Context）"><a href="#函数调用（Execution-Context）" class="headerlink" title="函数调用（Execution Context）"></a>函数调用（Execution Context）</h3><p><strong>执行上下文栈（Execution Context Stack）</strong>。</p>
<p>在函数调用时会进行栈 push，函数执行完毕就会 pop。</p>
<ul>
<li>code evaluation state</li>
<li>Function</li>
<li>Script or Module</li>
<li>Generator</li>
<li>Realm</li>
<li>Lexical Environment（词法环境）</li>
<li>Variable Environment（变量环境）</li>
</ul>
<h4 id="Lexical-Environment"><a href="#Lexical-Environment" class="headerlink" title="Lexical Environment"></a>Lexical Environment</h4><ul>
<li>this（箭头函数声明的时候就被绑定了？）</li>
<li>new.target</li>
<li>super</li>
<li>变量</li>
</ul>
<h4 id="Variable-Environment"><a href="#Variable-Environment" class="headerlink" title="Variable Environment"></a>Variable Environment</h4><blockquote>
<p>历史遗留包袱，仅仅用于处理 var 声明。</p>
</blockquote>
<h4 id="Environment-Record"><a href="#Environment-Record" class="headerlink" title="Environment Record"></a>Environment Record</h4><p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-09-01_11-00-50.jpg#id=ilPmw&amp;originHeight=430&amp;originWidth=842&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-09-01_11-04-45.jpg#id=ZaDKY&amp;originHeight=276&amp;originWidth=1084&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>在 js 内，逗号表达式永远只返回最后一个值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token comment">// 3</span>

<span class="token keyword">let</span> param2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>q<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param2<span class="token punctuation">)</span> <span class="token comment">// function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」浏览器原理-CSS计算</title>
    <url>/2021/09/28/yuque/ur0kri/</url>
    <content><![CDATA[<blockquote>
<p>主要分析将 DOM 树加上 CSS 规则的步骤。</p>
</blockquote>
<h3 id="STEP-0-环境准备"><a href="#STEP-0-环境准备" class="headerlink" title="STEP 0: 环境准备"></a>STEP 0: 环境准备</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://www.npmjs.com/package/css">CSS</a>库</p>
<h3 id="STEP-1-收集-CSS-规则"><a href="#STEP-1-收集-CSS-规则" class="headerlink" title="STEP 1: 收集 CSS 规则"></a>STEP 1: 收集 CSS 规则</h3><ul>
<li>遇到 style 标签时，需要将 CSS 规则保存收集；</li>
<li>调用 CSS parser 分析 CSS 规则；</li>
<li>必须仔细研究此库分析 CSS 规则的格式；</li>
</ul>
<h3 id="STEP-2-添加调用"><a href="#STEP-2-添加调用" class="headerlink" title="STEP 2: 添加调用"></a>STEP 2: 添加调用</h3><ul>
<li>创建元素之后，<strong>立即计算 CSS</strong><code>cssComputer.computeCss(element);</code>；</li>
<li>理论上，当分析一个元素时，所有的 CSS 规则已经收集完毕；</li>
<li>在真实浏览器中，可能遇到写在 body 内的 style 标签，需要重新进行 CSS 计算的情况，但在这里我们进行忽略（CSS 重新计算，重排，重绘，所以需要在编写代码时需要将 style 写在所有元素最前面）；</li>
</ul>
<h3 id="STEP-3-获取父元素序列"><a href="#STEP-3-获取父元素序列" class="headerlink" title="STEP 3: 获取父元素序列"></a>STEP 3: 获取父元素序列</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> elements <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在 computeCSS 函数内，必须知道元素的所有父元素才能判断元素与规则是否匹配；</li>
<li>从上一步骤的 stack 内可以获取本元素的所有元素；</li>
<li>因为我们首先获取的事“当前元素”，所以<strong>获取和计算父元素匹配的顺序是从内向外</strong>；</li>
</ul>
<h3 id="STEP-4-拆分选择器"><a href="#STEP-4-拆分选择器" class="headerlink" title="STEP 4: 拆分选择器"></a>STEP 4: 拆分选择器</h3><ul>
<li>选择器也需要从当前元素向外排列；</li>
<li>复杂选择器需要拆成针对单个元素的选择器，用<strong>循环来匹配父元素队列</strong>；</li>
</ul>
<h3 id="STEP-5-计算选择器与元素匹配"><a href="#STEP-5-计算选择器与元素匹配" class="headerlink" title="STEP 5: 计算选择器与元素匹配"></a>STEP 5: 计算选择器与元素匹配</h3><ul>
<li>根据选择器的类型和元素属性，计算是否与当前元素匹配；</li>
<li>该 toy-browser 仅实现三种基本选择器，实际浏览器中要处理更复杂的复合浏览器；</li>
</ul>
<h3 id="STEP-6-生成-computed-属性"><a href="#STEP-6-生成-computed-属性" class="headerlink" title="STEP 6: 生成 computed 属性"></a>STEP 6: 生成 computed 属性</h3><ul>
<li>一旦选择匹配，就应用选择器到元素上，形成 computedStyle；</li>
</ul>
<p>PS：可能会涉及到<strong>选择器的优先级（specificity）</strong>。</p>
<h3 id="STEP-7-确定规则覆盖关系"><a href="#STEP-7-确定规则覆盖关系" class="headerlink" title="STEP 7: 确定规则覆盖关系"></a>STEP 7: 确定规则覆盖关系</h3><p>选择器优先级的计算和比较。</p>
<h3 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// css-computed.js</span>
<span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// **** 添加CSS规则 **** //</span>
<span class="token keyword">function</span> <span class="token function">addCSSRules</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> ast <span class="token operator">=</span> css<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(JSON.stringify(ast, null, "    "));</span>
  rules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>ast<span class="token punctuation">.</span>stylesheet<span class="token punctuation">.</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// *** 针对对象：元素 **** //</span>
<span class="token keyword">function</span> <span class="token function">computeCss</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> stack</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// console.log(JSON.stringify(rules, null, " "));</span>
  <span class="token comment">// &amp; 使用slice避免污染原始stack</span>
  <span class="token keyword">let</span> elements <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// console.log(elements)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">)</span> element<span class="token punctuation">.</span>computeStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 遍历所有规则</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> rule <span class="token keyword">of</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// console.log(JSON.stringify(rule, null, " "));</span>
    <span class="token comment">// 全部选择器</span>
    <span class="token keyword">let</span> selectorParts <span class="token operator">=</span> rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ! 匹配当前元素</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">match</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> selectorParts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token string">"matched element: "</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>tagName <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> selectorParts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ^ 已经匹配到当前“元素”</span>

    <span class="token keyword">let</span> matched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 每条规则的标识</span>

    <span class="token comment">// &amp; 双循环检查父元素是否匹配</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> selectorParts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> selectorParts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> matched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>matched<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ^ 计算当前的选择器优先级</span>
      <span class="token keyword">let</span> sp <span class="token operator">=</span> <span class="token function">specificity</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>selectors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果匹配到，将规则加入element</span>
      <span class="token comment">// console.log(`Element: $&#123;element&#125;, rule: $&#123;rule&#125;`);</span>
      <span class="token keyword">let</span> computeStyle <span class="token operator">=</span> element<span class="token punctuation">.</span>computeStyle<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> declaration <span class="token keyword">of</span> rule<span class="token punctuation">.</span>declarations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// ^ 可能会出现样式覆盖</span>
        computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> declaration<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>specificity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>specificity <span class="token operator">=</span> sp<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>specificity<span class="token punctuation">)</span><span class="token punctuation">,</span> sp<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>specificity <span class="token operator">=</span> sp<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        computeStyle<span class="token punctuation">[</span>declaration<span class="token punctuation">.</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> declaration<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      element<span class="token punctuation">.</span>computeStyle <span class="token operator">=</span> computeStyle<span class="token punctuation">;</span>
      <span class="token comment">// &#123;color: &#123;value: …&#125;, font-size: &#123;value: …&#125;&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// *** 匹配元素 *** //</span>
<span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector <span class="token operator">||</span> <span class="token operator">!</span>element<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// ^ 简单处理，仅判断id选择器，class选择器和标签选择器</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> attr <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attr</span><span class="token punctuation">)</span> <span class="token operator">=></span> attr<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">&amp;&amp;</span> attr<span class="token punctuation">.</span>value <span class="token operator">===</span> selector<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> attr <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attr</span><span class="token punctuation">)</span> <span class="token operator">=></span> attr<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">&amp;&amp;</span> attr<span class="token punctuation">.</span>value <span class="token operator">===</span> selector<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// ? class还可以使用空格，所以后续可以补充有空格的情况匹配</span>
    <span class="token comment">// ? 难道不会被split嘛？</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>tagName <span class="token operator">===</span> selector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// *** 计算优先级 *** //</span>
<span class="token keyword">function</span> <span class="token function">specificity</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 从高到低</span>
  <span class="token comment">// 0 表示行内样式，最高优先级</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ! 表示当前的优先级</span>
  <span class="token keyword">let</span> selectorParts <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> part <span class="token keyword">of</span> selectorParts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// *** 比较优先级 *** //</span>
<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">sp1<span class="token punctuation">,</span> sp2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sp1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sp1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sp1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> sp2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  rules<span class="token punctuation">,</span>
  addCSSRules<span class="token punctuation">,</span>
  computeCss<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」CSS-排版</title>
    <url>/2021/12/14/yuque/vzq7do/</url>
    <content><![CDATA[<h3 id="盒（Box）"><a href="#盒（Box）" class="headerlink" title="盒（Box）"></a>盒（Box）</h3><p>源代码：标签（tag），语义：元素（Element），表现：盒（Box）。<br><strong>排版和渲染的基本单位是盒。</strong></p>
<h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><p><img src="https://gitee.com/httishere/blog-image/raw/master/img/WechatIMG1084.png#id=u0xtd&amp;originHeight=468&amp;originWidth=704&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h5 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><code>box-sizing</code></h5><ul>
<li>Content-box</li>
<li>Border-box</li>
</ul>
<h3 id="正常流"><a href="#正常流" class="headerlink" title="正常流"></a>正常流</h3><blockquote>
<p>从左到右；<br>同一行写的文字都是对齐的；<br>一行写满了，就换行道下一行；</p>
</blockquote>
<ul>
<li>收集盒进行</li>
<li>计算盒在行中的排布</li>
<li>计算行的排布</li>
</ul>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-12-13_10-47-21.jpg#id=MRvHg&amp;originHeight=188&amp;originWidth=658&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-12-13_10-50-08.jpg#id=zqkBe&amp;originHeight=464&amp;originWidth=422&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt="">（BFC， block formatting context )</p>
<h4 id="行模型"><a href="#行模型" class="headerlink" title="行模型"></a>行模型</h4><h5 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h5><p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211213110129.png#id=twFZm&amp;originHeight=262&amp;originWidth=696&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h4 id="float-amp-clear"><a href="#float-amp-clear" class="headerlink" title="float &amp; clear"></a>float &amp; clear</h4><p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211213162357.png#id=QfPuf&amp;originHeight=644&amp;originWidth=2876&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">float:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
float:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
float:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
float:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字
文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当高度不够<strong>绕环</strong>的时候，所有 float 右的元素可能会产生冲突。</p>
<p>所以此时需要一个<code>clear</code>属性。</p>
<p>给所有 float 元素均加上 clear 属性，则遇到相冲突的 float 元素时会发生自动换行。</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211213162627.png#id=dCgPV&amp;originHeight=870&amp;originWidth=2870&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h4 id="margin-折叠"><a href="#margin-折叠" class="headerlink" title="margin 折叠"></a>margin 折叠</h4><p>同一个 BFC 内垂直方向上可能会产生 margin 折叠。</p>
<p>产生一个单独的 BFC（能<strong>容纳一个正常流</strong>）：</p>
<ul>
<li><code>overflow: hidden</code>等非<code>visible</code>；</li>
<li><code>display: inline-block | table-cell | table-caption</code>；</li>
<li><code>flex item</code>，它一定是 block container；</li>
</ul>
<p>只要一个 BFC 里面是正常流，外面也是正常流，且该 BFC 的 overflow 是 visible，那么该 BFC 也会和外面的块级元素发生折叠。</p>
<p><strong>block container 只有</strong><code>**block**</code><strong>和</strong><code>**inline-block**</code><strong>。</strong></p>
<p>让这个折叠现象去除，我们可以让发生折叠的地方<strong>建立独立的 BFC</strong>。</p>
<p>总结发生 margin 折叠的场景：</p>
<ul>
<li>这些 margin 都处于普通流中，并在同一个 BFC 中；</li>
<li>这些 margin 没有被非空内容、padding、border 或 clear 分隔开；</li>
<li>这些 margin 在垂直方向上是相邻的；</li>
</ul>
<p>当相邻的两个 margin 都是正值的时候，取两者的最大值；当 margin 都是负值的时候，取的是其中绝对值较大的。</p>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」面向对象的JS？</title>
    <url>/2021/03/11/yuque/wev3mi/</url>
    <content><![CDATA[<h2 id="面对对象-or-基于对象"><a href="#面对对象-or-基于对象" class="headerlink" title="面对对象 or 基于对象"></a>面对对象 or 基于对象</h2><blockquote>
<p>Object：一切事物的总称。<br>基于对象：语言和宿主的基础设施由对象来提供，并且 JavaScript 程序即是一系列互相通讯的对象集合。</p>
</blockquote>
<h3 id="对象的特点（标识性、状态和行为）："><a href="#对象的特点（标识性、状态和行为）：" class="headerlink" title="对象的特点（标识性、状态和行为）："></a>对象的特点（标识性、状态和行为）：</h3><ul>
<li>对象具有唯一标识性：即使完全相同的两个对象，也并非同一个对象。（一般而言，各种语言的对象唯一标识性都是用内存地址来体现的）</li>
<li>对象有状态：对象具有状态，同一对象可能处于不同状态之下。</li>
<li>对象具有行为：即对象的状态，可能因为它的行为产生变迁。</li>
</ul>
<p><strong>JavaScript 中对象独有的特色是：对象具有高度的动态性，这是因为 JavaScript 赋予了使用者在运行时为对象添改状态和行为的能力。</strong></p>
<h3 id="数据属性和访问器属性（getter-setter）"><a href="#数据属性和访问器属性（getter-setter）" class="headerlink" title="数据属性和访问器属性（getter/setter）"></a>数据属性和访问器属性（getter/setter）</h3><h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><ul>
<li>value：就是属性的值。</li>
<li>writable：决定属性能否被赋值。</li>
<li>enumerable：决定 for in 能否枚举该属性。</li>
<li>configurable：决定该属性能否被删除或者改变特征值。</li>
</ul>
<h4 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h4><ul>
<li>getter：函数或 undefined，在取属性值时被调用。</li>
<li>setter：函数或 undefined，在设置属性值时被调用。</li>
<li>enumerable：决定 for in 能否枚举该属性。</li>
<li>configurable：决定该属性能否被删除或者改变特征值。</li>
</ul>
<p>可以使用内置函数<code>getOwnPropertyDescriptor</code>来查看属性特征：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// a和b皆为数据属性</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123;value: 2, writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用<code>Object.defineProperty</code>改变属性特征或者自定义访问器属性（<strong>与 Vue 的双向绑定实现原理相关</strong>）：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//a和b都是数据属性，但特征值变化了</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#123;value: 2, writable: false, enumerable: false, configurable: true&#125;</span>
o<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，不能被重新赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在创建对象时，也可以使用 get 和 set 关键字来创建访问器属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>JavaScript 对象的具体设计：具有高度动态性的属性集合。</strong></p>
<p>面向对象的三个特征，封装，继承，多态。</p>
<p>对于面向对象的思考还需要学习很多！！！</p>
<h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>JavaScript 是面向对象的，但是又和主流的面向对象不同，最主要的区别在于 JS 具有高度动态性，可以在运行时对对象进行属性的添加和更改。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>JS 是基于原型来描述对象，不同于其他基于类的编程语言，“基于原型”的编程看起来更为提倡程序员去关注一系列<strong>对象实例的行为</strong>，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类（理解“基于原型”的编程思想是深入理解 JavaScript 的关键所在—原型：一系列对象行为的集合，原型更强调的是行为）。</p>
<p>基于原型的面向对象系统通过“复制”的方式来创建新对象，并不真的去复制一个原型对象，而是使得新对象持有一个<strong>原型的引用</strong>。</p>
<ul>
<li>所有对象都有私有字段[[prototype]]，就是对象的原型</li>
<li>访问某个属性时，如果实例对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止</li>
</ul>
<p>ES6 提供了一系列内置函数，可以直接访问操纵原型：</p>
<ul>
<li>Object.create 根据指定的原型创建新对象，原型可以是 null；</li>
<li>Object.getPrototypeOf 获得一个对象的原型；</li>
<li>Object.setPrototypeOf 设置一个对象的原型。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"meow~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"jump"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> tiger <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cat<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">say</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"roar!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> anotherCat <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>

anotherCat<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meow~</span>

<span class="token keyword">var</span> anotherTiger <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>tiger<span class="token punctuation">)</span><span class="token punctuation">;</span>

anotherTiger<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// roar!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果在 anotherTiger 上想要访问其原型的属性，可以使用<code>Object.getPrototypeOf</code>方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>anotherTiger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meow~</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>自定义 Object.prototype.toString 的行为，以下代码展示了使用 Symbol.toStringTag 来自定义 Object.prototype.toString 的行为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
o <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// "[object Object]"</span>
o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"MyObject"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object MyObject]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>new</code>运算接受一个构造器和一组调用参数，实际上做了几件事：</p>
<ul>
<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>
<li>将 this 和调用参数传给构造器，执行（<code>Constructor.apply(obj, arguments)</code>）；</li>
<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>
</ul>
<p>new 构造器的两种方式：一是在构造器中添加属性，二是在构造器的 prototype 属性上添加属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 直接在构造器中修改 this，给 this 添加属性。</span>
<span class="token keyword">function</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">p2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">c1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o1<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;constructor: ƒ&#125;，实际添加的是this的属性非原型属性</span>

<span class="token comment">// 修改构造器的 prototype 属性指向的对象，它是从这个构造器构造出来的所有对象的原型。</span>
<span class="token keyword">function</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
c2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
c2<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">p2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">c2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o2<span class="token punctuation">.</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;p1: 1, p2: ƒ, constructor: ƒ&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ES6-中的类"><a href="#ES6-中的类" class="headerlink" title="ES6 中的类"></a>ES6 中的类</h3><p>在标准中删除了所有[[class]]相关的私有属性描述，类的概念正式从属性升级成语言的基础设施，从此，基于类的编程方式成为了 JavaScript 的官方编程范式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不建议将数据属性定义在构造器外</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Getter</span>
  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// Method</span>
  <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>类中定义的方法和属性会被写在原型对象之上。</p>
<h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" makes a noise."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call the super class constructor and pass in the name parameter</span>
    <span class="token comment">// 调用父类具有相同形参的构造方法，super()相当于Parent.prototype.constructor.call(this)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" barks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Mitzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mitzie barks.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们使用类的思想来设计代码时，应该尽量使用 class 来声明类，而不是用旧语法，拿函数来模拟对象（规范代码）。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>理解运行时的原型系统都是很有必要的一件事。</p>
<p>prototype 属性和私有字段[prototype]的区别？</p>
<p><a href="https://time.geekbang.org/column/article/79539">https://time.geekbang.org/column/article/79539</a> 还需继续加油！！！</p>
<h2 id="对象分类"><a href="#对象分类" class="headerlink" title="对象分类"></a>对象分类</h2><p>JavaScript 的对象机制并非简单的属性集合 + 原型，就是 JS 的对象机制并非只有属性集合和原型。</p>
<ul>
<li>宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定。</li>
<li>内置对象（Built-in Objects）：由 JavaScript 语言提供的对象。<ul>
<li>固有对象（Intrinsic Objects ）：由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。</li>
<li>原生对象（Native Objects）：可以由用户通过 Array、RegExp 等内置构造器或者特殊语法创建的对象。</li>
<li>普通对象（Ordinary Objects）：由{}语法、Object 构造器或者 class 关键字定义类创建的对象，它能够被原型继承。</li>
</ul>
</li>
</ul>
<h3 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h3><p>最经典的就是 window，window 上又有很多属性，如 document。</p>
<p>全局对象 window 上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境。</p>
<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><h4 id="固有对象"><a href="#固有对象" class="headerlink" title="固有对象"></a>固有对象</h4><p>随着 JavaScript 运行时创建而自动创建的对象实例，类似基础库的角色。我们前面提到的“类”其实就是固有对象的一种。</p>
<h4 id="原生对象"><a href="#原生对象" class="headerlink" title="原生对象"></a>原生对象</h4><p>能够通过语言本身的构造器创建的对象，基本如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1615442679231-3f4e7505-8b6f-4e26-815b-d91776d7f090.png#height=375&amp;id=MC6tJ&amp;originHeight=375&amp;originWidth=988&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=988" alt=""></p>
<p>几乎所有这些构造器的能力都是无法用纯 JavaScript 代码实现的，它们也无法用 class/extend 语法来继承。</p>
<h4 id="（这部分需要研究研究！！）用对象来模拟函数与构造器：函数对象与构造器对象"><a href="#（这部分需要研究研究！！）用对象来模拟函数与构造器：函数对象与构造器对象" class="headerlink" title="（这部分需要研究研究！！）用对象来模拟函数与构造器：函数对象与构造器对象"></a>（这部分需要研究研究！！）用对象来模拟函数与构造器：函数对象与构造器对象</h4><ul>
<li>函数对象的定义是：具有[[call]]私有字段的对象；</li>
<li>构造器对象的定义是：具有私有字段[[construct]]的对象。</li>
</ul>
<p>JavaScript 用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提供了“具有[[call]]私有字段的对象”，就可以被 JavaScript 函数调用语法支持。</p>
<p>任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用（函数是一类拥有[call] 属性的对象 至于 call 的实现与行为是引擎层面决定的）。</p>
<p><strong>对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总是一致的</strong>。比如内置对象 Date 在作为构造器调用时产生新的对象，作为函数时，则产生字符串：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mon Mar 08 2021 23:16:53 GMT+0800 (中国标准时间) (对象)</span>
<span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Mon Mar 08 2021 23:17:01 GMT+0800 (中国标准时间)" (字符串)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em><strong>相关</strong></em><strong>：【面试题】为啥 new Date( ) 和 Date( ) 表现不一致？</strong></p>
<p>在 ES6 之后 <code>=&gt;</code> 语法创建的函数仅仅是函数，它们无法被当作构造器使用。</p>
<p>对于用户使用 function 语法或者 Function 构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的，它们执行同一段代码。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把f作为函数调用</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把f作为构造器调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1630050354165-259462cf-f81a-4873-abf4-7dc171c74d83.png#clientId=ufcf22f00-d6c0-4&amp;from=paste&amp;height=241&amp;id=ue6c09ac4&amp;originHeight=482&amp;originWidth=978&amp;originalType=binary∶=1&amp;size=56076&amp;status=done&amp;style=none&amp;taskId=u59ce1503-e718-40b6-b06c-1658c273f6b&amp;width=489" alt="image.png"></p>
<p><strong>[[construct]]的执行过程如下</strong>：</p>
<ul>
<li>以 Object.prototype 为原型创建一个新对象；</li>
<li><strong>以新对象为 this</strong>，执行函数的[[call]]；</li>
<li>如果[[call]]的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。</li>
</ul>
<p>如果我们的构造器<strong>返回了一个新的对象</strong>，那么 new 创建的新对象就变成了一个构造函数之外完全无法访问的对象，这一定程度上可以实现“私有”。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">getValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 var a = &#123;getValue: () => this.a&#125;，这里的this指向cls</span>
o<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//100</span>
o<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">//a在外面永远无法访问到</span>

<span class="token keyword">function</span> <span class="token function">cls2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> oo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cls2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oo<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// undefined，这里就是和this相关了，此时getValue内的this指向oo，但是oo并没有a属性，所以此时this.a为undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="特殊行为对象"><a href="#特殊行为对象" class="headerlink" title="特殊行为对象"></a>特殊行为对象</h3><ul>
<li>Array：Array 的 length 属性根据最大的下标自动发生变化。</li>
<li>Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。</li>
<li>String：为了支持下标运算，String 的正整数属性访问会去字符串里查找。</li>
<li>Arguments：arguments 的非负整数型下标属性跟对应的变量联动。</li>
<li>模块的 namespace 对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于 import 吧。</li>
<li>类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。</li>
<li>bind 后的 function：跟原来的函数相关联。</li>
</ul>
<h3 id="不使用-new-关键字获得对象"><a href="#不使用-new-关键字获得对象" class="headerlink" title="不使用 new 关键字获得对象"></a>不使用 new 关键字获得对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">oo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 利用字面量</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token comment">// 2. 利用dom api</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 利用JavaScript内置对象的api</span>
<span class="token keyword">var</span> e <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">k1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">k2</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">k3</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.利用装箱转换</span>
<span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  i <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  k <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  l <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  m <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="获取所有固有对象"><a href="#获取所有固有对象" class="headerlink" title="获取所有固有对象"></a>获取所有固有对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span>
  eval<span class="token punctuation">,</span>
  isFinite<span class="token punctuation">,</span>
  isNaN<span class="token punctuation">,</span>
  parseFloat<span class="token punctuation">,</span>
  parseInt<span class="token punctuation">,</span>
  decodeURI<span class="token punctuation">,</span>
  decodeURIComponent<span class="token punctuation">,</span>
  encodeURI<span class="token punctuation">,</span>
  encodeURIComponent<span class="token punctuation">,</span>
  Array<span class="token punctuation">,</span>
  Date<span class="token punctuation">,</span>
  RegExp<span class="token punctuation">,</span>
  Promise<span class="token punctuation">,</span>
  Proxy<span class="token punctuation">,</span>
  Map<span class="token punctuation">,</span>
  WeakMap<span class="token punctuation">,</span>
  Set<span class="token punctuation">,</span>
  WeakSet<span class="token punctuation">,</span>
  Function<span class="token punctuation">,</span>
  Boolean<span class="token punctuation">,</span>
  String<span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span>
  Symbol<span class="token punctuation">,</span>
  Object<span class="token punctuation">,</span>
  Error<span class="token punctuation">,</span>
  EvalError<span class="token punctuation">,</span>
  RangeError<span class="token punctuation">,</span>
  ReferenceError<span class="token punctuation">,</span>
  SyntaxError<span class="token punctuation">,</span>
  TypeError<span class="token punctuation">,</span>
  URIError<span class="token punctuation">,</span>
  ArrayBuffer<span class="token punctuation">,</span>
  SharedArrayBuffer<span class="token punctuation">,</span>
  DataView<span class="token punctuation">,</span>
  Float32Array<span class="token punctuation">,</span>
  Float64Array<span class="token punctuation">,</span>
  Int8Array<span class="token punctuation">,</span>
  Int16Array<span class="token punctuation">,</span>
  Int32Array<span class="token punctuation">,</span>
  Uint8Array<span class="token punctuation">,</span>
  Uint16Array<span class="token punctuation">,</span>
  Uint32Array<span class="token punctuation">,</span>
  Uint8ClampedArray<span class="token punctuation">,</span>
  Atomics<span class="token punctuation">,</span>
  <span class="token constant">JSON</span><span class="token punctuation">,</span>
  Math<span class="token punctuation">,</span>
  Reflect<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>d<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> d<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token keyword">typeof</span> d<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">"function"</span>
    <span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> objects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">)</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">,</span> objects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>set<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">,</span> objects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」词法类型</title>
    <url>/2021/08/19/yuque/whqse7/</url>
    <content><![CDATA[<h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a><a href="https://www.fileformat.info/info/unicode/block/index.htm">unicode</a></h4><blockquote>
<p><a href="https://home.unicode.org/">https://home.unicode.org/</a></p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在需要使用“中文”作为变量名时，最好在声明时使用<code>\u</code>转译。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 厉害 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>厉害<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 如何获取中文的字符编码</span>
<span class="token string">"厉害"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "5389"</span>
<span class="token string">"厉害"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "5bb3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>InputElement</p>
<ul>
<li>WhiteSpace<ul>
<li><code>&lt;TAB&gt;</code>：制表符</li>
<li><code>&lt;VT&gt;</code> ：纵向制表符</li>
<li><code>&lt;FF&gt;</code></li>
<li><code>&lt;SP&gt;</code></li>
<li><code>&lt;NBSP&gt;</code></li>
<li><code>&lt;BOM&gt;</code></li>
<li><code>&lt;USP&gt;</code></li>
</ul>
</li>
<li>LineTerminater：换行符<ul>
<li><code>&lt;LF&gt;</code>：<code>/n</code></li>
<li><code>&lt;CR&gt;</code> ：<code>/r</code></li>
<li><code>&lt;LS&gt;</code>：超出 unicode 编码外，不建议使用</li>
<li><code>&lt;PS&gt;</code>：超出 unicode 编码外，不建议使用</li>
</ul>
</li>
<li>Comment</li>
<li>Token<ul>
<li>Punctuator：符号（<code>(),&lt;,&gt;...</code>）</li>
<li>IdentifierName：标识符<ul>
<li>Keywords</li>
<li>Future reserved Keywords：enum</li>
<li>Identifier：以字母开头</li>
</ul>
</li>
<li>Literal：直接量（<code>true,false...</code>）<ul>
<li>Number（0，0.，.2，1e3）=&gt; (<code>0.1+0.2 != 0.3</code>问题，最小精度)</li>
<li>String（”abc”, ‘abc’, 还支持反引号）</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取一个数字的二进制</span>
<span class="token comment">// 因为根据Number的定义，97.是一个合法的数字，所以需要在97后面加一个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre><code>  -  Boolean
  -  Object
  -  Symbol
  -  Null
  -  Undefined
</code></pre><blockquote>
<ul>
<li>变量名：不能与关键字相同（不能定义一个变量名为<code>new</code>的变量，特殊：get（可以作为变量名，也可以作为关键字））</li>
<li>属性名：可以与关键字相同</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」语句</title>
    <url>/2021/08/27/yuque/wkuzg2/</url>
    <content><![CDATA[<p>可以参考之前学的<a href="https://www.yuque.com/httishere/running/ang4as"><strong>重学前端</strong>的语句篇</a>。</p>
<p>在 JavaScript 标准中，把语句分成了两种：<strong>普通语句和声明型语句</strong>。</p>
<p>常见的语句包括<strong>变量声明、表达式、条件、循环</strong>等。</p>
<h3 id="Completion-Record"><a href="#Completion-Record" class="headerlink" title="Completion Record"></a>Completion Record</h3><blockquote>
<p>用于描述异常、跳出等语句执行过程。</p>
</blockquote>
<p>表示一个语句执行完之后的结果，它有三个字段：</p>
<ul>
<li>[[type]] 表示完成的类型，<code>normal</code>, <code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>；</li>
<li>[[value]] 表示语句的返回值，如果语句没有，则是 empty；</li>
<li>[[target]] 表示语句的目标，通常是一个 JavaScript 标签（标签在后文会有介绍）。</li>
</ul>
<h3 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h3><ul>
<li>ExpressionStatement</li>
<li>EmptyStatement</li>
<li>DebuggerStatement</li>
<li>ThrowStatement</li>
<li>ContinueStatement</li>
<li>BreakStatement</li>
<li>ReturnStatement</li>
</ul>
<h3 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h3><ul>
<li>BlockStatement</li>
<li>IfStatement</li>
<li>SwitchStatement</li>
<li>IterationStatement</li>
<li>WithStatement</li>
<li>LabelledStatement</li>
<li>TryStatement</li>
</ul>
<h4 id="block"><a href="#block" class="headerlink" title="block"></a>block</h4><ul>
<li>BlockStatement<code>&#123;&#125;</code>：和作用域相关，语句顺次执行，但是一旦某一语句出现错误，则该 block 会被中断；</li>
</ul>
<h4 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h4><ul>
<li><code>while() &#123;&#125;</code>：while 语句内如果是 return 或者 throw 则整个 block 的 completion 就会变成 return 或者 throw，如果是 continue 则会消费子语句；</li>
<li><code>do&#123;&#125;while()</code></li>
<li><code>for(...;...;)&#123;&#125;</code></li>
<li><code>for(... in ...)&#123;&#125;</code>：一个变量的所有属性名；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">in</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>for(... of ...)&#123;&#125;</code>：可以遍历所有具有迭代性质的对象，可迭代对象；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">yield</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>var</code></li>
<li><code>const/let</code></li>
<li><code>in</code></li>
</ul>
<h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4><p>try 后面必须使用<code>&#123;&#125;</code>。</p>
<p>不是 block，但是也会产生一个作用域。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> e<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Uncaught SyntaxError: Identifier 'e' has already been declared</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="声明语句"><a href="#声明语句" class="headerlink" title="声明语句"></a>声明语句</h3><ul>
<li>函数声明</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 函数声明，必须有函数名</span>
<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 函数表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>Generator 声明，可以理解为特殊的 function，会返回一个对象，与异步编程并没有关系。<br>常见的场景：产生无尽序列，分步返回多个结果等。<br>完全继承了<code>function</code>的特点。</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>异步声明</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>异步迭代器声明<br><code>for await</code>:</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> _foo <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
_foo<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步的generator只能在异步的函数内调用</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>变量声明<ul>
<li>var：<strong>变量提升</strong>，无论在 function 的何处定义都是针对整个 function 而言的（JS 作用域的设计错误），声明提升但是赋值并不提升。<br>不建议在函数内部的 block 内进行<code>var</code>声明，<strong>最好是在 function 的头部进行变量声明</strong>。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 改变了o内部的x</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token comment">// 0</span>
<span class="token comment">// 相当于</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 访问到的是全局的x</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 实际改变的是o内部的x</span>
  <span class="token punctuation">&#125;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
  <entry>
    <title>「大前端」at rule &amp; qualified rule</title>
    <url>/2021/03/24/yuque/xcwk53/</url>
    <content><![CDATA[<h2 id="at-rule"><a href="#at-rule" class="headerlink" title="at-rule"></a>at-rule</h2><ul>
<li><a href="/charset">@charset </a> ： <a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></li>
<li><a href="/import">@import </a> ： <a href="https://www.w3.org/TR/css-cascade-4/">https://www.w3.org/TR/css-cascade-4/</a></li>
<li><a href="/media">@media </a> ： <a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>
<li><a href="/page">@page </a> ： <a href="https://www.w3.org/TR/css-page-3/">https://www.w3.org/TR/css-page-3/</a></li>
<li><a href="/counter-style">@counter-style </a> ： <a href="https://www.w3.org/TR/css-counter-styles-3">https://www.w3.org/TR/css-counter-styles-3</a></li>
<li><a href="/keyframes">@keyframes </a> ： <a href="https://www.w3.org/TR/css-animations-1/">https://www.w3.org/TR/css-animations-1/</a></li>
<li><a href="/fontface">@fontface </a> ： <a href="https://www.w3.org/TR/css-fonts-3/">https://www.w3.org/TR/css-fonts-3/</a></li>
<li><a href="/supports">@supports </a> ： <a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>
<li><a href="/namespace">@namespace </a> ： <a href="https://www.w3.org/TR/css-namespaces-3/">https://www.w3.org/TR/css-namespaces-3/</a></li>
</ul>
<h3 id="charset"><a href="#charset" class="headerlink" title="@charset "></a><a href="/charset">@charset </a></h3><blockquote>
<p><a href="/charset">@charset </a> 用于提示 CSS 文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="import"><a href="#import" class="headerlink" title="@import "></a><a href="/import">@import </a></h3><blockquote>
<p><a href="/import">@import </a> 用于引入一个 CSS 文件，除了 <a href="/charset">@charset </a> 规则不会被引入，<a href="/import">@import </a> 可以引入另一个文件的全部内容。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mystyle.css"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"mystyle.css"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>

<span class="token atrule"><span class="token rule">@import</span> [ &lt;url> | &lt;string> ] [ <span class="token function">supports</span><span class="token punctuation">(</span>
    [ &lt;supports-condition> | &lt;declaration> ]
  <span class="token punctuation">)</span> ]? &lt;media-query-list>?<span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="media"><a href="#media" class="headerlink" title="@media "></a><a href="/media">@media </a></h3><blockquote>
<p><a href="/media">@media </a> 就是大名鼎鼎的 media query 使用的规则了，它能够对设备的类型进行一些判断。在 media 的区块内，是普通规则列表。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 10pt<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="page"><a href="#page" class="headerlink" title="@page "></a><a href="/page">@page </a></h3><blockquote>
<p><a href="/page">@page </a> 用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">&#123;</span>
  <span class="token property">size</span><span class="token punctuation">:</span> 8.5in 11in<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>
  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Hamlet"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token atrule"><span class="token rule">@top-right</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Page "</span> <span class="token function">counter</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="counter-style"><a href="#counter-style" class="headerlink" title="@counter-style "></a><a href="/counter-style">@counter-style </a></h3><blockquote>
<p>counter-style 产生一种数据，用于定义列表项的表现。<em>目前只有 Firefox 支持</em>。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@counter-style</span> triangle</span> <span class="token punctuation">&#123;</span>
  <span class="token property">system</span><span class="token punctuation">:</span> cyclic<span class="token punctuation">;</span>
  <span class="token property">symbols</span><span class="token punctuation">:</span> ‣<span class="token punctuation">;</span>
  <span class="token property">suffix</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">li</span> <span class="token punctuation">&#123;</span>
  <span class="token property">list-style</span><span class="token punctuation">:</span> triangle<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="key-frames"><a href="#key-frames" class="headerlink" title="@key-frames "></a><a href="/key-frames">@key-frames </a></h3><blockquote>
<p><a href="/keyframes">@keyframes </a> 产生一种数据，用于定义动画关键帧。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> diagonal-slide</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="fontface"><a href="#fontface" class="headerlink" title="@fontface "></a><a href="/fontface">@fontface </a></h3><blockquote>
<p><a href="/fontface">@fontface </a> 用于定义一种字体，icon font 技术就是利用这个特性来实现的。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> Gentium<span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://example.com/fonts/Gentium.woff<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">p</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> Gentium<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="support"><a href="#support" class="headerlink" title="@support "></a><a href="/support">@support </a></h3><blockquote>
<p>support 检查环境的特性，它与 media 比较类似。</p>
</blockquote>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="@namespace"></a>@namespace</h3><blockquote>
<p>用于跟 XML 命名空间配合的一个规则，表示内部的 CSS 选择器全都带上特定命名空间。</p>
</blockquote>
<h3 id="viewport"><a href="#viewport" class="headerlink" title="@viewport"></a>@viewport</h3><blockquote>
<p>用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 HTML 的 meta 代替。</p>
</blockquote>
<h2 id="qualified-rule"><a href="#qualified-rule" class="headerlink" title="qualified rule"></a>qualified rule</h2><p>主要是由选择器和声明区块构成。声明区块又由属性和值构成。普通规则：</p>
<ul>
<li>选择器</li>
<li>声明列表<ul>
<li>属性</li>
<li>值<ul>
<li>值的类型</li>
<li>函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>任何选择器，都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线（空格，即为后代选择器的优先级较低）。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1616577961595-6e6e5814-08bb-42c8-b8c0-b130511a8883.png#height=404&amp;id=hLLxP&amp;originHeight=404&amp;originWidth=410&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=410" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2021/png/250093/1616577961646-8738dc24-798c-414c-a44c-b0a582c3ba35.png#height=562&amp;id=cUl11&amp;originHeight=562&amp;originWidth=960&amp;originalType=binary∶=1&amp;size=0&amp;status=done&amp;style=none&amp;width=960" alt=""></p>
<h3 id="声明：属性和值"><a href="#声明：属性和值" class="headerlink" title="声明：属性和值"></a>声明：属性和值</h3><blockquote>
<p>声明部分是一个由“属性: 值”组成的序列。属性是由中划线、下划线、字母等组成的标识符，CSS 还支持使用反斜杠转义。需要注意的是：属性不允许使用连续的两个中划线开头，这样的属性会被认为是 CSS 变量。</p>
</blockquote>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--main-color</span><span class="token punctuation">:</span> #06c<span class="token punctuation">;</span>
  <span class="token property">--accent-color</span><span class="token punctuation">:</span> #006<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* The rest of the CSS file */</span>
<span class="token selector">#foo h1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中属性值是以下类型：</p>
<ul>
<li>CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li>
<li>字符串：比如 content 属性。</li>
<li>URL：使用 url() 函数的 URL 值。</li>
<li>整数 / 实数：比如 flex 属性。</li>
<li>维度：单位的整数 / 实数，比如 width 属性。</li>
<li>百分比：大部分维度都支持。</li>
<li>颜色：比如 background-color 属性。</li>
<li>图片：比如 background-image 属性。</li>
<li>2D 位置：比如 background-position 属性。</li>
<li>函数：来自函数的值，比如 transform 属性。</li>
</ul>
<p>计算型函数：</p>
<ul>
<li>calc()：是基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，该函数允许不同单位混合运算。</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">section</span> <span class="token punctuation">&#123;</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3 - 2 * 1em - 2 * 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>max()</li>
<li>min()</li>
<li>clamp()<br>：max()、min() 和 clamp() 则是一些比较大小的函数，max() 表示取两数中较大的一个，min() 表示取两数之中较小的一个，clamp() 则是给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</li>
<li>toggle()：在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现。</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
  <span class="token property">list-style-type</span><span class="token punctuation">:</span> <span class="token function">toggle</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>attr()：允许 CSS 接受属性值的控制。</li>
</ul>
]]></content>
      <categories>
        <category>CSS/Less</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>「Daily」interview list</title>
    <url>/2021/03/08/yuque/xgluvp/</url>
    <content><![CDATA[<ul>
<li>原始类型有哪几种？null 是对象嘛？</li>
<li>对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？</li>
<li>typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？</li>
<li>如何正确判断 this？箭头函数的 this 是什么？</li>
<li>== 和 === 有什么区别？</li>
<li>什么是闭包？</li>
<li>什么是浅拷贝？如何实现浅拷贝？什么是深拷贝？如何实现深拷贝？</li>
<li>如何理解原型？如何理解原型链？</li>
<li>什么是提升？什么是暂时性死区？var、let 及 const 区别？</li>
<li>原型如何实现继承？Class 如何实现继承？Class 本质是什么？</li>
<li>为什么要使用模块化？都有哪几种方式可以实现模块化，各有什么特点？</li>
<li>Proxy 可以实现什么功能？</li>
<li>map, filter, reduce 各自有什么作用？</li>
<li>并发与并行的区别？</li>
<li>什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？</li>
<li>你理解的 Generator 是什么？</li>
<li>Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？</li>
<li>async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？</li>
<li>进程与线程区别？JS 单线程带来的好处？</li>
<li>什么是执行栈？</li>
<li>call、apply 及 bind 函数内部实现是怎么样的？</li>
<li>new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？</li>
<li>为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</li>
<li>事件的触发过程是怎么样的？知道什么是事件代理嘛？</li>
<li>什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？</li>
<li>有几种方式可以实现存储功能，分别有什么优缺点？</li>
<li>插入几万个 DOM，如何实现页面不卡顿？</li>
<li>在不考虑缓存和优化网络协议的前提下，考虑可以通过哪些方式来最快的渲染页面，也就是常说的关键渲染路径，这部分也是性能优化中的一块内容</li>
<li>什么是 CSRF 攻击？如何防范 CSRF 攻击？</li>
<li>什么是 MVVM？比之 MVC 有什么区别？</li>
<li>什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？</li>
<li>前端路由原理？两种实现方式有什么区别？</li>
<li>Vue 和 React 之间的区别</li>
<li>computed 和 watch 区别</li>
<li>keep-alive 组件有什么作用</li>
<li>Vue 的响应式原理是什么</li>
<li>v-for 里面的 key 有什么作用</li>
<li>DOM 渲染在 哪个周期中就已经完成</li>
</ul>
<p>Vue3.0 中将会通过  <code>Proxy</code>  来替换原本的  <code>Object.defineProperty</code>  来实现数据响应式。 Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Daily</category>
      </categories>
      <tags>
        <tag>Daily</tag>
      </tags>
  </entry>
  <entry>
    <title>「TypeScript」模块化&amp;声明</title>
    <url>/2021/12/23/yuque/xyp3mm/</url>
    <content><![CDATA[<h2 id="ES6-amp-Common"><a href="#ES6-amp-Common" class="headerlink" title="ES6 &amp; Common"></a>ES6 &amp; Common</h2><h3 id="ES6-模块系统"><a href="#ES6-模块系统" class="headerlink" title="ES6 模块系统"></a>ES6 模块系统</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// a.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> b<span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">as</span> <span class="token constant">G</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 别名</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> str <span class="token keyword">as</span> hello <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./b"</span><span class="token punctuation">;</span>

<span class="token comment">// b.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span>

<span class="token comment">// c.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">P</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> f <span class="token keyword">as</span> <span class="token constant">F</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> All <span class="token keyword">from</span> <span class="token string">"./a"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> myFun <span class="token keyword">from</span> <span class="token string">"./a"</span><span class="token punctuation">;</span> <span class="token comment">// 不加&#123;&#125;表示default</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Common-模块系统"><a href="#Common-模块系统" class="headerlink" title="Common 模块系统"></a>Common 模块系统</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// a.node.ts</span>
<span class="token keyword">let</span> node_a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 整体导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> node_a<span class="token punctuation">;</span>

<span class="token comment">// b.node.ts</span>
exports<span class="token punctuation">.</span>node_b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>node_c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// c.node.ts</span>
<span class="token keyword">let</span> node_c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"./a.node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> node_c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"./b.node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node_c1<span class="token punctuation">,</span> node_c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;x: 1, y: 2&#125; &#123;node_b: 3, node_c: 4&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>只允许一个文件内有一个顶级导出（</strong><code>**module.exports**</code><strong>）。</strong></p>
<h3 id="TS-编译"><a href="#TS-编译" class="headerlink" title="TS 编译"></a>TS 编译</h3><p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211223103720.png#id=p8Wqx&amp;originHeight=233&amp;originWidth=496&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h4 id="target-语言"><a href="#target-语言" class="headerlink" title="target 语言"></a>target 语言</h4><h5 id="ES3"><a href="#ES3" class="headerlink" title="ES3"></a>ES3</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc ./src/es6/b.ts <span class="token parameter variable">-t</span> es3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// b.js</span>
<span class="token string">"use strict"</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc ./src/es6/b.ts <span class="token parameter variable">-t</span> es5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// b.js</span>
<span class="token string">"use strict"</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>最后的模块系统也是 common 模块。</strong></p>
<h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc ./src/es6/b.ts <span class="token parameter variable">-t</span> es6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>模块系统也是 ES6 模块。</strong></p>
<h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><h5 id="amd"><a href="#amd" class="headerlink" title="amd"></a>amd</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc ./src/es6/b.ts <span class="token parameter variable">-m</span> amd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// b.js</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"use strict"</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="umd"><a href="#umd" class="headerlink" title="umd"></a>umd</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc ./src/es6/b.ts <span class="token parameter variable">-m</span> umd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// b.js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> v<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token string">"use strict"</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  exports<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"es6"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ES6-与-Common-混用"><a href="#ES6-与-Common-混用" class="headerlink" title="ES6 与 Common 混用"></a>ES6 与 Common 混用</h3><p>例子：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// node/c.node.ts</span>
<span class="token keyword">let</span> node_c1 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"./a.node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> node_c2 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"./b.node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> node_c3 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"../es6/a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在es6内此处导出的应该就是默认导出</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node_c1<span class="token punctuation">,</span> node_c2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">node_c3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际：TypeError: node_c3 is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211223110136.png#id=CA6AN&amp;originHeight=146&amp;originWidth=392&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p>所以如果要使用需要<code>node_c3.default()</code>。</p>
<p>所以在实际情况下尽量不要将 ES6 模块与 Common 进行混用。</p>
<p>或是使用 ts 提供的导出<code>export =</code>，导入<code>import X =</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// es6/d.ts</span>
<span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 且该文件不能再有其他导出</span>

<span class="token comment">// node/c.node.ts</span>
<span class="token keyword">import</span> node_c4 <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"../es6/d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">node_c4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h2><p>尽量在全局环境下使用，用于隔离作用域。</p>
<p>在其他文件引用该命名空间文件，<code>/// &lt;reference path = &quot;a.ts&quot; /&gt;</code>。</p>
<p>编译后会被编译成一个<strong>立即执行函数</strong>，并创建了一个闭包，导出的成员会被挂到全局变量下。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// a.ts</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译后：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Shape<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Shape</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  Shape<span class="token punctuation">.</span>square <span class="token operator">=</span> square<span class="token punctuation">;</span> <span class="token comment">// 导出的成员</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Shape <span class="token operator">||</span> <span class="token punctuation">(</span>Shape <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Shape<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="命名空间别名"><a href="#命名空间别名" class="headerlink" title="命名空间别名"></a>命名空间别名</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> square <span class="token operator">=</span> Shape<span class="token punctuation">.</span>square<span class="token punctuation">;</span>
<span class="token function">square</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><p>将重名的声明合并为同一个声明。</p>
<h3 id="接口声明合并"><a href="#接口声明合并" class="headerlink" title="接口声明合并"></a>接口声明合并</h3><p>接口的非函数的成员应该是唯一的。 如果它们不是唯一的，那么它们必须是相同的类型。 如果两个接口中同时声明了同名的非函数成员且它们的类型不同，则编译器会报错。</p>
<p>对于函数成员，每个同名函数声明都会被当成这个函数的一个重载。 同时需要注意，当接口<code>A</code>与后来的接口<code>A</code>合并时，后面的接口具有更高的优先级。</p>
<p><strong>不同文件内重名的声明也会发生声明合并。</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">MA</span></span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">MA</span></span> <span class="token punctuation">&#123;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> merge_a<span class="token operator">:</span> <span class="token constant">MA</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果签名里有一个参数的类型是<em>单一</em>的字符串字面量（比如，不是字符串字面量的联合类型），那么它将会被提升到重载列表的<strong>最顶端</strong>。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">MA</span></span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">MA</span></span> <span class="token punctuation">&#123;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 合并后</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">MA</span></span> <span class="token punctuation">&#123;</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="命名空间声明合并"><a href="#命名空间声明合并" class="headerlink" title="命名空间声明合并"></a>命名空间声明合并</h3><p>命名空间内导出的成员不可重复。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">namespace</span> Shape <span class="token punctuation">&#123;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">rectangle</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">namespace</span> Shape <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> pi <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// error</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211223143509.png#id=kqphw&amp;originHeight=221&amp;originWidth=771&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p>命名空间可以和函数以及类合并，相当于给函数和类添加属性，<strong>注意命名空间的声明不能位于与之合并的类或者函数之前</strong>。</p>
<p>也可以和枚举进行合并。</p>
<h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p>在使用非 TS 编写的类库时，需要书写其声明文件暴露 API。</p>
<p>安装相应的声明文件。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i jquery
<span class="token comment"># 声明文件</span>
<span class="token function">npm</span> i @types/jquery <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在使用第三方类库之前，可以先<a href="https://www.typescriptlang.org/dt/search?search=">查询是否有声明文件</a>。</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/20211223160358.png#id=xShuu&amp;originHeight=496&amp;originWidth=1230&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p>或者自己<a href="https://definitelytyped.org/guides/contributing.html">编写声明文件</a>。</p>
<h3 id="全局库"><a href="#全局库" class="headerlink" title="全局库"></a>全局库</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// global-lib.js</span>
<span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

globalLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>
globalLib<span class="token punctuation">.</span><span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"global lib does something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// global-lib.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">globalLib</span><span class="token punctuation">(</span>options<span class="token operator">:</span> globalLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> globalLib <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="模块类库"><a href="#模块类库" class="headerlink" title="模块类库"></a>模块类库</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module-lib.js</span>
<span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

moduleLib<span class="token punctuation">.</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">;</span>
moduleLib<span class="token punctuation">.</span><span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module lib does something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// module-lib.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">moduleLib</span><span class="token punctuation">(</span>options<span class="token operator">:</span> ModuleLib<span class="token punctuation">.</span>Options<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> moduleLib <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token operator">=</span> moduleLib<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="umd-类库"><a href="#umd-类库" class="headerlink" title="umd 类库"></a>umd 类库</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// umd-lib.js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"umd lib does something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// umd-lib.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> umdLib <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> umdLib<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">=</span> umdLib<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="给外部组件添加自定义方法"><a href="#给外部组件添加自定义方法" class="headerlink" title="给外部组件添加自定义方法"></a>给外部组件添加自定义方法</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">"moment"</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"moment"</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
moment<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"moment my function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moment<span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="给全局变量添加方法"><a href="#给全局变量添加方法" class="headerlink" title="给全局变量添加方法"></a>给全局变量添加方法</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> global <span class="token punctuation">&#123;</span>
  <span class="token keyword">namespace</span> globalLib <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
globalLib<span class="token punctuation">.</span><span class="token function-variable function">doAnything</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"global doAnything"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
globalLib<span class="token punctuation">.</span><span class="token function">doAnything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>「ROAD 6」浏览器原理</title>
    <url>/2021/09/27/yuque/yoo7gw/</url>
    <content><![CDATA[<h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>URL -&gt; (HTTP) -&gt;<a href="https://www.yuque.com/httishere/running/hr55oy">HTML -&gt;( parse) -&gt; DOM</a> -&gt; <a href="https://www.yuque.com/httishere/running/ur0kri">(CSS computing) </a>-&gt; DOM with CSS -&gt; layout -&gt;DOM with position -&gt;(render) -&gt; Bitmap</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/%E6%B5%8F%E8%A7%88%E5%99%A8.png#id=iVkUm&amp;originHeight=322&amp;originWidth=2930&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-09-01_15-46-45.jpg#id=CXWLp&amp;originHeight=636&amp;originWidth=936&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h4 id="TCP-与-IP-的基础知识"><a href="#TCP-与-IP-的基础知识" class="headerlink" title="TCP 与 IP 的基础知识"></a>TCP 与 IP 的基础知识</h4><ul>
<li>流</li>
<li>端口</li>
<li>require(‘net’)</li>
<li>包</li>
<li>IP 地址</li>
<li>libnet/libpcap</li>
</ul>
<h3 id="Toy-Browser"><a href="#Toy-Browser" class="headerlink" title="Toy-Browser"></a>Toy-Browser</h3><p><a href="https://datatracker.ietf.org/doc/html/rfc2616/">RFC2616</a></p>
<h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><ul>
<li>Request line (POST / HTTP/1.1)<br><img src="https://gitee.com/httishere/blog-image/raw/master/img/image-20210913170214302.png#id=ymGQa&amp;originHeight=246&amp;originWidth=500&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></li>
<li>headers<ul>
<li>Host: 127.0.0.1</li>
<li>Content-Type: application/x-www-form-urlencoded</li>
<li>(空行)</li>
</ul>
</li>
<li>body (filed=xxx&amp;code=xxx)</li>
</ul>
<h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><ul>
<li>Status line (HTTP/1.1 200 OK)</li>
<li>headers<ul>
<li>Content-Type: text/html</li>
<li>Date: Mon, 13 Sep 2021 10:13:57 GMT</li>
<li>Connection: keep-alive</li>
<li>Transfer-Encoding: chunked</li>
<li>(空行)</li>
</ul>
</li>
<li>body<ul>
<li>26 (body 字符数)</li>
<li><code>&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;</code></li>
<li>0</li>
<li>(空行)</li>
</ul>
</li>
</ul>
<h4 id="简易-server-和-client"><a href="#简易-server-和-client" class="headerlink" title="简易 server 和 client"></a>简易 server 和 client</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// server.js</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"request received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"x-Foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"text/plain"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8088</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// client.js</span>
<span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8088</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 'connect' listener.</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"connected to server!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"POST / HTTP/1.1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Host: 127.0.0.1\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Length: 19\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Content-Type: application/x-www-form-urlencoded\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"filed=xxxx&amp;code=xxx\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"disconnected from server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>PS:</p>
<ul>
<li>HTTP 是一个文本协议；</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Request</span>
<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// method, url = host + port + path</span>
  <span class="token comment">// body: key-value</span>
  <span class="token comment">// headers</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> options<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">"GET"</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> options<span class="token punctuation">.</span>host<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> options<span class="token punctuation">.</span>port <span class="token operator">||</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> options<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> options<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> options<span class="token punctuation">.</span>headers <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>bodyText <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"application/x-www-form-urlencoded"</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>bodyText <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Length"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyText<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> HTTP/1.1\r
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\r
\r
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>bodyText<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        connection<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        connection <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>
          <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>host<span class="token punctuation">,</span>
            <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">,</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            connection<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
          connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8088</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token punctuation">[</span><span class="token string">"X-Foo2"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"customed"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"httishere"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Response</span>
<span class="token keyword">class</span> <span class="token class-name">ResponseParser</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE_END</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// \r</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_NAME</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_SPACE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// \r</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_VALUE</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// \r</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_LINE_END</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_BLOCK_END</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 有两个换行</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusLine <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>headerValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">get</span> <span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser<span class="token punctuation">.</span>isFinished<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">get</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>statusLine<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">HTTP\/1.1 ([0-9]+) ([\s\S]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">statusCode</span><span class="token operator">:</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span>
      <span class="token literal-property property">statusText</span><span class="token operator">:</span> RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receiveChar</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">receiveChar</span><span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// status line (WAITING_STATUS_LINE -> WAITING_STATUS_LINE_END)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">"\r"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE_END</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_NAME</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>statusLine <span class="token operator">+=</span> char<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// status line ended, and headers start</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_STATUS_LINE_END</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_NAME</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// get key-value from headers</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_NAME</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">":"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_SPACE</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">"\r"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// end headers</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_BLOCK_END</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">+=</span> char<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_BLOCK_END</span> <span class="token operator">&amp;&amp;</span>
      char <span class="token operator">===</span> <span class="token string">"\n"</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY</span><span class="token punctuation">;</span>
      <span class="token comment">// body parser creates</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"chunked"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrunkedBodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// one name of the headers ended</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_SPACE</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// header value starts</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">"\r"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_LINE_END</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>headerName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>headerValue<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headerValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>headerValue <span class="token operator">+=</span> char<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// one value of the headers ended</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_LINE_END</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_HEADER_NAME</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// body starts</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>bodyParser<span class="token punctuation">.</span><span class="token function">receiveChar</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">TrunkedBodyParser</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH_LINE_END</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">READIND_TRUNK</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE_END</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY_BLOCK</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY_BLOCK_END</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isFinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">receiveChar</span><span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">"\r"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// console.log('finished', this.content)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isFinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY_BLOCK</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH_LINE_END</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH_LINE_END</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">READIND_TRUNK</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">READIND_TRUNK</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\r"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE_END</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_NEW_LINE_END</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_LENGTH</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY_BLOCK</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">===</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">WAITING_BODY_BLOCK_END</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 更新request的data事件</span>
connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  parser<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>result:</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-09-13_20-58-02.jpg#id=FcaP8&amp;originHeight=192&amp;originWidth=485&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<p>优化：</p>
<p>可以再增加状态机对 body 的<code>\r\n</code>进行再优化。</p>
<p><img src="https://gitee.com/httishere/blog-image/raw/master/img/Xnip2021-09-13_21-06-24.jpg#id=dEVol&amp;originHeight=191&amp;originWidth=403&amp;originalType=binary∶=1&amp;status=done&amp;style=none" alt=""></p>
<h3 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h3><p><a href="http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html">阮老师的文章</a>，有空可以看看。</p>
<ul>
<li>每个状态都是一个机器<ul>
<li>在每个机器里，可以进行计算，存储，输出……</li>
<li>所有机器接受的输入都是一致的</li>
<li>状态机的每个机器本身没有状态（类似纯函数，无副作用）</li>
</ul>
</li>
<li>每个机器知道下一个状态<ul>
<li>每个机器都有确定的下一个状态（Moore）</li>
<li>每个机器根据输入决定下一个状态（Mealy）</li>
</ul>
</li>
</ul>
<h4 id="使用有限状态机处理字符串"><a href="#使用有限状态机处理字符串" class="headerlink" title="使用有限状态机处理字符串"></a>使用有限状态机处理字符串</h4><h5 id="在一个字符串中，找到字符”a”"><a href="#在一个字符串中，找到字符”a”" class="headerlink" title="在一个字符串中，找到字符”a”"></a>在一个字符串中，找到字符”a”</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findA</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="在一个字符串中，找到字符”ab”"><a href="#在一个字符串中，找到字符”ab”" class="headerlink" title="在一个字符串中，找到字符”ab”"></a>在一个字符串中，找到字符”ab”</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findAb</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> findAFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      findAFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>findAFlag <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      findAFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="在一个字符串中，找到字符”abcdef”"><a href="#在一个字符串中，找到字符”abcdef”" class="headerlink" title="在一个字符串中，找到字符”abcdef”"></a>在一个字符串中，找到字符”abcdef”</h5><p>同上，使用<code>findAFlag</code>，<code>findBFlag</code>，<code>findCFlag</code>，<code>findDFlag</code>，<code>findEFlag</code>，<code>findFFlag</code>几个标志。</p>
<h4 id="JS-中的有限状态机（Mealy）"><a href="#JS-中的有限状态机（Mealy）" class="headerlink" title="JS 中的有限状态机（Mealy）"></a>JS 中的有限状态机（Mealy）</h4><p>每个函数是一个状态，函数参数就是输入，函数体内可以自由地处理每个状态的逻辑，返回值作为下一个状态。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> start<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> state <span class="token operator">===</span> end<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> foundA<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// trap状态，一般用这种来表示一个最终状态</span>
<span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> end<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">foundA</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> foundB<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">foundB</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> foundC<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foundC</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"d"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> foundD<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foundD</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"e"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> foundE<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">foundE</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">"f"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> end<span class="token punctuation">;</span>
  <span class="token keyword">return</span> start<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"abcddddef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="如何使用状态机处理类似”abcabx”这样的字符串"><a href="#如何使用状态机处理类似”abcabx”这样的字符串" class="headerlink" title="如何使用状态机处理类似”abcabx”这样的字符串"></a>如何使用状态机处理类似”abcabx”这样的字符串</h4><h4 id="如何使用状态机处理类似”abababx”这样的字符串"><a href="#如何使用状态机处理类似”abababx”这样的字符串" class="headerlink" title="如何使用状态机处理类似”abababx”这样的字符串"></a>如何使用状态机处理类似”abababx”这样的字符串</h4><h4 id="如何用状态机处理完全未知的-pattern"><a href="#如何用状态机处理完全未知的-pattern" class="headerlink" title="如何用状态机处理完全未知的 pattern"></a>如何用状态机处理完全未知的 pattern</h4><blockquote>
<p>参考：字符串 KMP 算法</p>
</blockquote>
]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>ROAD 6</tag>
      </tags>
  </entry>
</search>
