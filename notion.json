[
  {
    "id": "052b00d2-4389-4501-9933-6cb3872e3597",
    "slug": "052b00d243",
    "icon": {
      "type": "emoji",
      "emoji": "⚫"
    },
    "cover": null,
    "url": "https://www.notion.so/React-Hooks-2-React-Hooks-052b00d24389450199336cb3872e3597",
    "title": "React Hooks 精进 2 - React基本概念 & Hooks的理解",
    "format": "lake",
    "description": null,
    "updated_at": "2023-01-30T10:35:00.000Z",
    "created_at": "2023-01-30T10:35:00.000Z",
    "published_at": "2023-01-30T10:35:00.000Z",
    "last_editor": "httishere",
    "body": "tags: [React]<br />categories: [React]<br />cover: null\n\n---\n\n\n## 在React之前\n\n\n需要调用DOM的API来修改DOM树的结构从而改变UI的展示方式。\n\n\n## React之后\n\n\n需要要在业务状态和UI状态之间建立一个绑定的关系。\n\n\n---\n\n\n## 基本概念\n\n\n### 用组件的方式描述UI\n\n\n在React内所有的UI都是通过**组件**去描述和组织的，React组件是以**树状结构**组织到一起的，通常会有一个根组件：\n\n- 内置组件：映射到HTML节点的组件\n- 自定义组件：自己创建的组件，使用时必须以大写字母开头\n\n### 使用state和props管理状态\n\n- state：保存状态的机制\n- props：父子组件之间传递状态的方式\n\n在函数组件内可以使用`useState`这个Hook来保存状态，内置组件和自定义组件都可以在使用时把接收的属性props作为参数，当这个参数变化时组件也会自动重新渲染。\n\n\n```javascript\nimport React from \"react\";\n\nfunction CountLabel({ count }) {\n\tconst color = count > 10 ? \"red\" : \"blue\";\n\treturn <span style={{ color }}>{count}</span>\n}\n\nexport default function Counter() {\n\tconst [count, setCount] = React.userState(0);\n\t\n\treturn (\n\t\t<div>\n\t\t\t<CountLabel count={count} onClick={() => setCount(count + 1)} />\n\t\t</div>\n\t) \n}\n```\n\n\n### JSX语法的本质\n\n\nJSX并不是新的模版语言而是一个**语法糖**，不用JSX语法的话也可以使用React.createElement来实现。\n\n1. JSX的表达能力等价于JavaScript；\n2. 无需学习；\n\n## 创建应用\n\n\n```shell\nnpm run create-react-app my-app\ncd my-app\nnpm start\n```\n\n\n### 在组件内执行异步请求\n\n\n需要有数据状态，loading状态以及错误处理。\n\n\n> **在React组件中，任何一个state发生变化，整个函数组件都会被完全执行一遍。**\n\n- 为了避免在组件内重复定义很多函数，可以使用useCallback这个Hook来缓存回调函数；\n- 异步请求逻辑的重用可以利用Redux这个全局状态管理框架；\n\n## 一些思考\n\n\n### React最打动人的特性是什么？或者说它的最大优点。\n\n- 灵活的jsx\n- 生态强大，核心简单，写法灵活\n\n## Hooks（>16.8)\n\n\n> 原来的基于class的组件完全可以继续使用。\n\n\n### React组件的本质\n\n\n就是从Model到View的映射，这里的Model对应的是state和props。\n\n\n**数据绑定**：当Model发生改变时，函数会重新执行，并且生成新的DOM树，然后React再将新的DOM树以最优的方式更新到浏览器。\n\n\n为什么会出现Hooks，原来的Class组件有哪些问题？\n\n- React组件之间不会互相继承，所以没有利用到Class的继承特性；\n- UI是由状态驱动的，很少会在外部调用一个类实例，组件的所有方法都是内部调用；\n\n所以这两个Class最重要的特性都未使用到，所以用函数去描述**`State ⇒ View`**这样的映射才是最合适的，但是函数组件有没有State和生命周期，于是就有了Hooks。\n\n\n### Hooks的诞生\n\n\n函数和对象不同，实例对象不能够在多次执行之间保存状态，所以我们需要一个能够把外部的数据绑定到函数的执行机制。\n\n\n这个机制就是**Hooks，Hooks就是把某个目标结果钩到某个可能会变化的数据源或者事件源上，那么当被钩到的数据或者事件发生变化时，产生这个目标结果的代码会重新执行，产生更新后的结果。**\n\n\n对于函数组件，这个结果就是最终的DOM树；对于`useCallback`，`useMemo`这样的雨缓存相关的组件则是在依赖项发生变化时去更新缓存。Hooks的结构：\n\n\n![](https://i.hd-r.cn/a6e410883f0975e888ea749be99e35cf.jpg)\n\n\n‼️ Hooks中被钩的对象可以是某个独立的数据源也可以是另一个Hook执行的结果，这样就可以达成**逻辑复用**的效果。\n\n\n### Hooks带来的最大的好处：逻辑复用\n\n\n在之前的React使用中必须借助高阶组件等设计模式来实现逻辑复用，但告诫组件会产生荣誉的组件节点，所有Hooks也大大的**简化了逻辑复用**。\n\n\n比如说实现窗口大小的监听，窗口大小是一个外部数据状态，我们可以通过Hooks的方式对其进行封装，将其变成一个可绑定的数据源，这样代码会更加简洁直观。\n\n\n### Hooks的另一个好处：有助于关注分离\n\n\n能够针对同一个业务逻辑的代码尽可能聚合在一起，在过去的React内需要把同一个业务逻辑的代码分散在组件的不同生命周期内。\n\n\n## 总结\n\n- React的开发思想：从State⇒View的函数式映射；\n- Hooks解决了Class组件存在的代码冗余，难以逻辑复用的问题；\n"
  },
  {
    "id": "6ed49a2a-dc86-4d84-94f3-808ed5e547c2",
    "slug": "6ed49a2adc",
    "icon": {
      "type": "emoji",
      "emoji": "⚫"
    },
    "cover": null,
    "url": "https://www.notion.so/React-Hooks-1-Hooks-6ed49a2adc864d8494f3808ed5e547c2",
    "title": "React Hooks 精进 1 - 用Hooks的角度去转变开发思路",
    "format": "lake",
    "description": null,
    "updated_at": "2023-01-30T10:35:00.000Z",
    "created_at": "2023-01-30T10:35:00.000Z",
    "published_at": "2023-01-30T10:35:00.000Z",
    "last_editor": "httishere",
    "body": "tags: [React]<br />categories: [React]<br />cover: null\n\n---\n\n\n## React 两个颠覆性创新点\n\n- 虚拟DOM机制\n- JSX语法\n\n## Hooks出现之前的业务逻辑复用方式\n\n\n在组件内的不同生命周期中做时间监听的绑定和解绑。\n\n\n## 引入Hooks之后\n\n\n只需要通过Hooks的方式进行封装，将其变成一个可绑定的数据源，这样函数组件就具备了状态管理，生命周期管理等能力。\n\n\n## Hooks的学习路径\n\n1. 全局认知：Hooks的功能边界，什么功能要用Hooks去做\n2. 核心概念和原理：应对实际复杂业务问题的关键能力\n3. 实战：把原理和实际业务场景结合起来，掌握Hooks的思考方式\n\n![](https://i.hd-r.cn/fa23b9c56bc62fe4a0bbd40777b6a67a.jpg)\n\n\n## 学习内容：\n\n\n### 基础篇：抓住问题本质，提高解决复杂问题的能力\n\n\n### 实战篇：业务场景驱动，掌握解决实际问题的思考能力\n\n\n### 扩展篇：了解工具。生态和未来，开拓技术视野\n\n"
  },
  {
    "id": "ce50450a-16b2-4f24-9dd2-316d85a0d909",
    "slug": "ce50450a16",
    "icon": {
      "type": "emoji",
      "emoji": "⚫"
    },
    "cover": null,
    "url": "https://www.notion.so/2022-ce50450a16b24f249dd2316d85a0d909",
    "title": "心之所向，行之所往 ｜ 2022总结",
    "format": "lake",
    "description": "跌宕起伏，兵荒马乱的一年。",
    "updated_at": "2023-01-30T10:35:00.000Z",
    "created_at": "2023-01-30T10:35:00.000Z",
    "published_at": "2023-01-30T10:35:00.000Z",
    "last_editor": "httishere",
    "body": "tags: [复盘]<br />categories: [随笔]<br />cover: null\n\n---\n\n\n说实话，这一年大概是跌宕起伏，兵荒马乱的一年吧。\n\n\n### 工作 & 学习\n\n\n> 🟡 **换了新工作……**  \n> 年初的时候公司的状况实在是有点不好，然后因为一直都跨不出舒适圈，教练非常热心地想要给我介绍工作，刚好她的有个学员的朋友有内推机会，于是想要我发简历，难受，甚至简历都需呀别人催好几遍。  \n>   \n> 发完简历之后，对方表示还不错，我真的是又忐忑又开心，因为我知道其实我不算优秀。之后我提前请假回家过年，正好在回家之后几天收到了面试邀约，不过线上的面试让我减轻了一些压力，第一个面试是关于一些基础问题的面试，还做了一个css效果的小demo，我感觉这个我还是表现得不错。再然后隔天又收到了第二场面试的邀约，这次是一个在线实时coding的测试，关于搜索匹配，其实面试过程不算顺利，也可能是因为在线coding让我特别紧张，之后在面试官的提示下也算是完成了他的预期效果（不过是在面试结束后做好的）。  \n>   \n> 所以我还是算顺利地收到了offer，真的是意外地顺利。\n\n\n> 🟡 **学习基本搁置……**\n\n\n### 爱好\n\n\n今年最没想到的大概是在自媒体上的发展吧，因为身体原因中间搁置了很久，在身体状况好些的时候重新开始了原来的分享，渐渐地也收到了一些合作，然后发布了一个小模版没想到也小爆了一下，希望之后能有更多更好的想法。\n\n\n希望今年的小红书粉丝能达到2w。\n\n\n### 2023的展望\n\n- 希望在专业技能上能有所长进，能多写技术博客\n- 身体健康，开开心心\n- 保持学习\n\n### 今年事件回顾\n\n\n> 🟡 一月  \n> - 达成了蹬腿131kg的成就。  \n>   \n> - 刚买的鼠标放在被子上的缘故，第二天出现在了洗衣机里，不过很坚强地并没有受伤。  \n>   \n> - 妹妹去上班穿了我前一天穿过的衣服，所以带走了我兜里的钥匙，于是被锁在了家里，并且我是在马上要出门去上课的时候才发现，和教练调节了迟一小时上课，并叫了跑腿，外面大雨滂沱，内心迷茫无措。  \n>   \n> - 回家乔迁啦。  \n>   \n> - 在线面试，拿到offer。\n\n\n> 🟡 二月  \n> - 在家看冬奥会。  \n>   \n> - 02/21入职新公司，结果一屁股坐在了地上。\n\n\n> 🟡 三月  \n> - 之前的公司忘记给我停缴，结果还想让我交公司交的部分，最后协调只交了自己交的部分。  \n>   \n> - 第一次做美甲。  \n>   \n> - 硬拉上了新高度70kg。  \n>   \n> - gitee图床被🈲️了  \n>   \n> - 一个月喝了好多奶茶咖啡\n\n\n> 🟡 四月  \n> - 非正式会谈官宣。  \n>   \n> - 开始常态化核酸检测。  \n>   \n> - 收到了教练送的体脂秤。  \n>   \n> - 花28元做了一次单采。  \n>   \n> - 开始居家办公（但是谁知道才办了一天就……  \n>   \n> - 和妹妹一起去了植物园，第一次贴了假睫毛。  \n>   \n> - 因为疫情取消了我们的五一之旅。\n\n\n> 🟡 五月  \n> - 之前在身上摸到了一个肿块，趁五一去检查，结果不太好，需要手术确认。  \n>   \n> - 做了局麻手术，术中病理做出来是恶性肿瘤。  \n>   \n> - 请假。  \n>   \n> - 去做了生殖保护咨询。\n\n\n> 🟡 六月  \n> - 回家修养，开始化疗之程。  \n>   \n> - 手术切口一直好不了。  \n>   \n> - 剃了光头。\n\n\n> 🟡 七月  \n> - 第一次吃了甲鱼。  \n>   \n> - 回归工作，居家办公中。  \n>   \n> - 生日呀。  \n>   \n> - 抢到了饿了么免单。\n\n\n> 🟡 八月  \n> - 收到了生病之后的第一笔工资。  \n>   \n> - 接到了小红书长期合作（也是第一笔合作。\n\n\n> 🟡 九月  \n> - 小红书5000粉。  \n>   \n> - 吃青蟹的时候被扎了，没想到手指就此发炎，然后因为白细胞太低去了医院急诊，结果发现发烧了，于是又去发热门诊验血打针。  \n>   \n> - 每天去医院输液。\n\n\n> 🟡 十月  \n> - 买了一个大菠萝蜜。  \n>   \n> - 每天去医院输液。  \n>   \n> - 公众号粉丝5000。\n\n\n> 🟡 十一月  \n> - 结膜炎，化疗住院。  \n>   \n> - 因为来医院的时候和阳性时空伴随了，在医院被隔离了5天。  \n>   \n> - 结束化疗。  \n>   \n> - 小红书粉丝10000。\n\n\n> 🟡 十二月  \n> - 开始放疗。  \n>   \n> - B站粉丝20000。  \n>   \n> - 更新了组件库2.0。\n\n\n---\n\n\n愿一直做一个善良的人。\n\n\n愿年年身体健康，万事如意。\n\n\n愿新的一年心之所向，行之所往。\n\n"
  },
  {
    "id": "d5fc6184-d9cf-4478-bc67-54b8c42dc17c",
    "slug": "d5fc6184d9",
    "icon": {
      "type": "emoji",
      "emoji": "💤"
    },
    "cover": null,
    "url": "https://www.notion.so/Notion-Notion-API-Notion-Hexo-d5fc6184d9cf4478bc6754b8c42dc17c",
    "title": "「Notion」利用Notion API将Notion文章整合到本地Hexo项目（一）",
    "format": "lake",
    "description": null,
    "updated_at": "2023-01-30T10:35:00.000Z",
    "created_at": "2023-01-30T10:35:00.000Z",
    "published_at": "2023-01-30T10:35:00.000Z",
    "last_editor": "httishere",
    "body": "tags: [Notion]<br />categories: [Notion-API]<br />cover: null\n\n---\n\n\n因为我的Hexo博客是拉取我在语雀上的文章还有本地写的文章，所以没有直接采用相关的Notion部署成Blog的已有API。\n\n\n还是使用将文章拉取到本地再手动部署的方式。\n\n\n> 参考：[yuque-hexo](https://github.com/x-cold/yuque-hexo)\n\n\n## **为Notion API设置访问令牌**\n\n\n需要设置一个Integration（集成），通过Notion API连接访问自己的数据库，然后生成一个访问令牌来访问Notion的API。\n\n\n在[Notion API文档](https://developers.notion.com/reference/intro)页面，点击右上角的**View my integrations** 链接。点击**+ New integration**按钮。\n\n\n![](https://i.postimg.cc/xd0zGHgm/2022-09-10-20-16-22.png)\n\n\n创建集成完毕后，将会在详情页看到自己的访问令牌：\n\n\n![](https://i.postimg.cc/BQ7h8Sg4/2022-09-10-20-17-28.png)\n\n\n## 在Notion内创建你的博客表格\n\n\n![](https://i.postimg.cc/zX4CZV7b/2022-09-10-20-20-05.png)\n\n\n我创建了一个Blog表格，并为每个文章设置了`title`，`slug(urlname)`，`tags`，`categories`，`description`，`publish`，`created_at`和`updated_at`这几个字断。\n\n\n其中`slug`是直接截取了id的一部分作为url name：\n\n\n![](https://i.postimg.cc/HxW545YK/2022-09-10-20-23-53.png)\n\n\n## 在blog项目内配置相关信息\n\n\n点击Blog页面右上角的**···**按钮，在`Connections`内选择我们刚刚创建的**my-blog**集成。\n\n\n事先拥有一个 [hexo](https://github.com/hexojs/hexo)项目，并在 `package.json`中配置相关信息：\n\n\n```json\n\"notionConfig\": {\n    \"mdNameFormat\": \"slug\",\n    \"baseUrl\": \"https://api.notion.com/v1/databases/\",\n    \"token\": \"your Internal Integration Token\",\n    \"database\": \"your database id\",\n    \"postPath\": \"source/_posts/notion\" // markdown所在文件\n},\n```\n\n\n太久了，快要忘记内容了，等下次重新看下再继续。\n\n"
  },
  null,
  null,
  null
]